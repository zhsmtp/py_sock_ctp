#ifndef CPP_CTP_TD_H
#define CPP_CTP_TD_H
#include "ThostFtdcTraderApi.h"

#include "socket_wrapper.h"

#include "rapidjson/document.h"
#include "rapidjson/writer.h"
#include "rapidjson/stringbuffer.h"

using namespace std;
using namespace rapidjson;


class TraderSpi : public CThostFtdcTraderSpi
{
    public:
    Sock_Wrapper *socks = NULL;
    TraderSpi(Sock_Wrapper *socks)
    {
        this->socks = socks;
    }
    void OnFrontConnected()
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnFrontConnected");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnFrontDisconnected(int nReason)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnFrontDisconnected");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        writer.Key("nReason");
        writer.Int(nReason);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnHeartBeatWarning(int nTimeLapse)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnHeartBeatWarning");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        writer.Key("nTimeLapse");
        writer.Int(nTimeLapse);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspAuthenticate(CThostFtdcRspAuthenticateField * pRspAuthenticateField, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspAuthenticate");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcRspAuthenticateField local_pRspAuthenticateField = { 0 };
        if(pRspAuthenticateField)
        {
            memcpy(&local_pRspAuthenticateField, pRspAuthenticateField, sizeof(CThostFtdcRspAuthenticateField));
        }
        writer.Key("pRspAuthenticateField");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pRspAuthenticateField.BrokerID).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pRspAuthenticateField.UserID).c_str());
        writer.Key("UserProductInfo");
        writer.String(g2u(local_pRspAuthenticateField.UserProductInfo).c_str());
        writer.Key("AppID");
        writer.String(g2u(local_pRspAuthenticateField.AppID).c_str());
        writer.Key("AppType");
        writer.Int(local_pRspAuthenticateField.AppType);
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspUserLogin(CThostFtdcRspUserLoginField * pRspUserLogin, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspUserLogin");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcRspUserLoginField local_pRspUserLogin = { 0 };
        if(pRspUserLogin)
        {
            memcpy(&local_pRspUserLogin, pRspUserLogin, sizeof(CThostFtdcRspUserLoginField));
        }
        writer.Key("pRspUserLogin");
        writer.StartObject();
        writer.Key("TradingDay");
        writer.String(g2u(local_pRspUserLogin.TradingDay).c_str());
        writer.Key("LoginTime");
        writer.String(g2u(local_pRspUserLogin.LoginTime).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pRspUserLogin.BrokerID).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pRspUserLogin.UserID).c_str());
        writer.Key("SystemName");
        writer.String(g2u(local_pRspUserLogin.SystemName).c_str());
        writer.Key("FrontID");
        writer.Int(local_pRspUserLogin.FrontID);
        writer.Key("SessionID");
        writer.Int(local_pRspUserLogin.SessionID);
        writer.Key("MaxOrderRef");
        writer.String(g2u(local_pRspUserLogin.MaxOrderRef).c_str());
        writer.Key("SHFETime");
        writer.String(g2u(local_pRspUserLogin.SHFETime).c_str());
        writer.Key("DCETime");
        writer.String(g2u(local_pRspUserLogin.DCETime).c_str());
        writer.Key("CZCETime");
        writer.String(g2u(local_pRspUserLogin.CZCETime).c_str());
        writer.Key("FFEXTime");
        writer.String(g2u(local_pRspUserLogin.FFEXTime).c_str());
        writer.Key("INETime");
        writer.String(g2u(local_pRspUserLogin.INETime).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspUserLogout(CThostFtdcUserLogoutField * pUserLogout, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspUserLogout");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcUserLogoutField local_pUserLogout = { 0 };
        if(pUserLogout)
        {
            memcpy(&local_pUserLogout, pUserLogout, sizeof(CThostFtdcUserLogoutField));
        }
        writer.Key("pUserLogout");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pUserLogout.BrokerID).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pUserLogout.UserID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspUserPasswordUpdate(CThostFtdcUserPasswordUpdateField * pUserPasswordUpdate, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspUserPasswordUpdate");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcUserPasswordUpdateField local_pUserPasswordUpdate = { 0 };
        if(pUserPasswordUpdate)
        {
            memcpy(&local_pUserPasswordUpdate, pUserPasswordUpdate, sizeof(CThostFtdcUserPasswordUpdateField));
        }
        writer.Key("pUserPasswordUpdate");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pUserPasswordUpdate.BrokerID).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pUserPasswordUpdate.UserID).c_str());
        writer.Key("OldPassword");
        writer.String(g2u(local_pUserPasswordUpdate.OldPassword).c_str());
        writer.Key("NewPassword");
        writer.String(g2u(local_pUserPasswordUpdate.NewPassword).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspTradingAccountPasswordUpdate(CThostFtdcTradingAccountPasswordUpdateField * pTradingAccountPasswordUpdate, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspTradingAccountPasswordUpdate");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcTradingAccountPasswordUpdateField local_pTradingAccountPasswordUpdate = { 0 };
        if(pTradingAccountPasswordUpdate)
        {
            memcpy(&local_pTradingAccountPasswordUpdate, pTradingAccountPasswordUpdate, sizeof(CThostFtdcTradingAccountPasswordUpdateField));
        }
        writer.Key("pTradingAccountPasswordUpdate");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pTradingAccountPasswordUpdate.BrokerID).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pTradingAccountPasswordUpdate.AccountID).c_str());
        writer.Key("OldPassword");
        writer.String(g2u(local_pTradingAccountPasswordUpdate.OldPassword).c_str());
        writer.Key("NewPassword");
        writer.String(g2u(local_pTradingAccountPasswordUpdate.NewPassword).c_str());
        writer.Key("CurrencyID");
        writer.String(g2u(local_pTradingAccountPasswordUpdate.CurrencyID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspUserAuthMethod(CThostFtdcRspUserAuthMethodField * pRspUserAuthMethod, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspUserAuthMethod");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcRspUserAuthMethodField local_pRspUserAuthMethod = { 0 };
        if(pRspUserAuthMethod)
        {
            memcpy(&local_pRspUserAuthMethod, pRspUserAuthMethod, sizeof(CThostFtdcRspUserAuthMethodField));
        }
        writer.Key("pRspUserAuthMethod");
        writer.StartObject();
        writer.Key("UsableAuthMethod");
        writer.Int(local_pRspUserAuthMethod.UsableAuthMethod);
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspGenUserCaptcha(CThostFtdcRspGenUserCaptchaField * pRspGenUserCaptcha, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspGenUserCaptcha");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcRspGenUserCaptchaField local_pRspGenUserCaptcha = { 0 };
        if(pRspGenUserCaptcha)
        {
            memcpy(&local_pRspGenUserCaptcha, pRspGenUserCaptcha, sizeof(CThostFtdcRspGenUserCaptchaField));
        }
        writer.Key("pRspGenUserCaptcha");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pRspGenUserCaptcha.BrokerID).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pRspGenUserCaptcha.UserID).c_str());
        writer.Key("CaptchaInfoLen");
        writer.Int(local_pRspGenUserCaptcha.CaptchaInfoLen);
        writer.Key("CaptchaInfo");
        writer.String(g2u(local_pRspGenUserCaptcha.CaptchaInfo).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspGenUserText(CThostFtdcRspGenUserTextField * pRspGenUserText, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspGenUserText");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcRspGenUserTextField local_pRspGenUserText = { 0 };
        if(pRspGenUserText)
        {
            memcpy(&local_pRspGenUserText, pRspGenUserText, sizeof(CThostFtdcRspGenUserTextField));
        }
        writer.Key("pRspGenUserText");
        writer.StartObject();
        writer.Key("UserTextSeq");
        writer.Int(local_pRspGenUserText.UserTextSeq);
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspOrderInsert(CThostFtdcInputOrderField * pInputOrder, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspOrderInsert");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcInputOrderField local_pInputOrder = { 0 };
        if(pInputOrder)
        {
            memcpy(&local_pInputOrder, pInputOrder, sizeof(CThostFtdcInputOrderField));
        }
        writer.Key("pInputOrder");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pInputOrder.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pInputOrder.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pInputOrder.reserve1).c_str());
        writer.Key("OrderRef");
        writer.String(g2u(local_pInputOrder.OrderRef).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pInputOrder.UserID).c_str());
        writer.Key("OrderPriceType");
        writer.Int(local_pInputOrder.OrderPriceType);
        writer.Key("Direction");
        writer.Int(local_pInputOrder.Direction);
        writer.Key("CombOffsetFlag");
        writer.String(g2u(local_pInputOrder.CombOffsetFlag).c_str());
        writer.Key("CombHedgeFlag");
        writer.String(g2u(local_pInputOrder.CombHedgeFlag).c_str());
        writer.Key("LimitPrice");
        writer.Double(local_pInputOrder.LimitPrice);
        writer.Key("VolumeTotalOriginal");
        writer.Int(local_pInputOrder.VolumeTotalOriginal);
        writer.Key("TimeCondition");
        writer.Int(local_pInputOrder.TimeCondition);
        writer.Key("GTDDate");
        writer.String(g2u(local_pInputOrder.GTDDate).c_str());
        writer.Key("VolumeCondition");
        writer.Int(local_pInputOrder.VolumeCondition);
        writer.Key("MinVolume");
        writer.Int(local_pInputOrder.MinVolume);
        writer.Key("ContingentCondition");
        writer.Int(local_pInputOrder.ContingentCondition);
        writer.Key("StopPrice");
        writer.Double(local_pInputOrder.StopPrice);
        writer.Key("ForceCloseReason");
        writer.Int(local_pInputOrder.ForceCloseReason);
        writer.Key("IsAutoSuspend");
        writer.Int(local_pInputOrder.IsAutoSuspend);
        writer.Key("BusinessUnit");
        writer.String(g2u(local_pInputOrder.BusinessUnit).c_str());
        writer.Key("RequestID");
        writer.Int(local_pInputOrder.RequestID);
        writer.Key("UserForceClose");
        writer.Int(local_pInputOrder.UserForceClose);
        writer.Key("IsSwapOrder");
        writer.Int(local_pInputOrder.IsSwapOrder);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pInputOrder.ExchangeID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pInputOrder.InvestUnitID).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pInputOrder.AccountID).c_str());
        writer.Key("CurrencyID");
        writer.String(g2u(local_pInputOrder.CurrencyID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pInputOrder.ClientID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pInputOrder.reserve2).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pInputOrder.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pInputOrder.InstrumentID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pInputOrder.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspParkedOrderInsert(CThostFtdcParkedOrderField * pParkedOrder, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspParkedOrderInsert");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcParkedOrderField local_pParkedOrder = { 0 };
        if(pParkedOrder)
        {
            memcpy(&local_pParkedOrder, pParkedOrder, sizeof(CThostFtdcParkedOrderField));
        }
        writer.Key("pParkedOrder");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pParkedOrder.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pParkedOrder.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pParkedOrder.reserve1).c_str());
        writer.Key("OrderRef");
        writer.String(g2u(local_pParkedOrder.OrderRef).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pParkedOrder.UserID).c_str());
        writer.Key("OrderPriceType");
        writer.Int(local_pParkedOrder.OrderPriceType);
        writer.Key("Direction");
        writer.Int(local_pParkedOrder.Direction);
        writer.Key("CombOffsetFlag");
        writer.String(g2u(local_pParkedOrder.CombOffsetFlag).c_str());
        writer.Key("CombHedgeFlag");
        writer.String(g2u(local_pParkedOrder.CombHedgeFlag).c_str());
        writer.Key("LimitPrice");
        writer.Double(local_pParkedOrder.LimitPrice);
        writer.Key("VolumeTotalOriginal");
        writer.Int(local_pParkedOrder.VolumeTotalOriginal);
        writer.Key("TimeCondition");
        writer.Int(local_pParkedOrder.TimeCondition);
        writer.Key("GTDDate");
        writer.String(g2u(local_pParkedOrder.GTDDate).c_str());
        writer.Key("VolumeCondition");
        writer.Int(local_pParkedOrder.VolumeCondition);
        writer.Key("MinVolume");
        writer.Int(local_pParkedOrder.MinVolume);
        writer.Key("ContingentCondition");
        writer.Int(local_pParkedOrder.ContingentCondition);
        writer.Key("StopPrice");
        writer.Double(local_pParkedOrder.StopPrice);
        writer.Key("ForceCloseReason");
        writer.Int(local_pParkedOrder.ForceCloseReason);
        writer.Key("IsAutoSuspend");
        writer.Int(local_pParkedOrder.IsAutoSuspend);
        writer.Key("BusinessUnit");
        writer.String(g2u(local_pParkedOrder.BusinessUnit).c_str());
        writer.Key("RequestID");
        writer.Int(local_pParkedOrder.RequestID);
        writer.Key("UserForceClose");
        writer.Int(local_pParkedOrder.UserForceClose);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pParkedOrder.ExchangeID).c_str());
        writer.Key("ParkedOrderID");
        writer.String(g2u(local_pParkedOrder.ParkedOrderID).c_str());
        writer.Key("UserType");
        writer.Int(local_pParkedOrder.UserType);
        writer.Key("Status");
        writer.Int(local_pParkedOrder.Status);
        writer.Key("ErrorID");
        writer.Int(local_pParkedOrder.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pParkedOrder.ErrorMsg).c_str());
        writer.Key("IsSwapOrder");
        writer.Int(local_pParkedOrder.IsSwapOrder);
        writer.Key("AccountID");
        writer.String(g2u(local_pParkedOrder.AccountID).c_str());
        writer.Key("CurrencyID");
        writer.String(g2u(local_pParkedOrder.CurrencyID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pParkedOrder.ClientID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pParkedOrder.InvestUnitID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pParkedOrder.reserve2).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pParkedOrder.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pParkedOrder.InstrumentID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pParkedOrder.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspParkedOrderAction(CThostFtdcParkedOrderActionField * pParkedOrderAction, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspParkedOrderAction");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcParkedOrderActionField local_pParkedOrderAction = { 0 };
        if(pParkedOrderAction)
        {
            memcpy(&local_pParkedOrderAction, pParkedOrderAction, sizeof(CThostFtdcParkedOrderActionField));
        }
        writer.Key("pParkedOrderAction");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pParkedOrderAction.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pParkedOrderAction.InvestorID).c_str());
        writer.Key("OrderActionRef");
        writer.Int(local_pParkedOrderAction.OrderActionRef);
        writer.Key("OrderRef");
        writer.String(g2u(local_pParkedOrderAction.OrderRef).c_str());
        writer.Key("RequestID");
        writer.Int(local_pParkedOrderAction.RequestID);
        writer.Key("FrontID");
        writer.Int(local_pParkedOrderAction.FrontID);
        writer.Key("SessionID");
        writer.Int(local_pParkedOrderAction.SessionID);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pParkedOrderAction.ExchangeID).c_str());
        writer.Key("OrderSysID");
        writer.String(g2u(local_pParkedOrderAction.OrderSysID).c_str());
        writer.Key("ActionFlag");
        writer.Int(local_pParkedOrderAction.ActionFlag);
        writer.Key("LimitPrice");
        writer.Double(local_pParkedOrderAction.LimitPrice);
        writer.Key("VolumeChange");
        writer.Int(local_pParkedOrderAction.VolumeChange);
        writer.Key("UserID");
        writer.String(g2u(local_pParkedOrderAction.UserID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pParkedOrderAction.reserve1).c_str());
        writer.Key("ParkedOrderActionID");
        writer.String(g2u(local_pParkedOrderAction.ParkedOrderActionID).c_str());
        writer.Key("UserType");
        writer.Int(local_pParkedOrderAction.UserType);
        writer.Key("Status");
        writer.Int(local_pParkedOrderAction.Status);
        writer.Key("ErrorID");
        writer.Int(local_pParkedOrderAction.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pParkedOrderAction.ErrorMsg).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pParkedOrderAction.InvestUnitID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pParkedOrderAction.reserve2).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pParkedOrderAction.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pParkedOrderAction.InstrumentID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pParkedOrderAction.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspOrderAction(CThostFtdcInputOrderActionField * pInputOrderAction, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspOrderAction");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcInputOrderActionField local_pInputOrderAction = { 0 };
        if(pInputOrderAction)
        {
            memcpy(&local_pInputOrderAction, pInputOrderAction, sizeof(CThostFtdcInputOrderActionField));
        }
        writer.Key("pInputOrderAction");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pInputOrderAction.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pInputOrderAction.InvestorID).c_str());
        writer.Key("OrderActionRef");
        writer.Int(local_pInputOrderAction.OrderActionRef);
        writer.Key("OrderRef");
        writer.String(g2u(local_pInputOrderAction.OrderRef).c_str());
        writer.Key("RequestID");
        writer.Int(local_pInputOrderAction.RequestID);
        writer.Key("FrontID");
        writer.Int(local_pInputOrderAction.FrontID);
        writer.Key("SessionID");
        writer.Int(local_pInputOrderAction.SessionID);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pInputOrderAction.ExchangeID).c_str());
        writer.Key("OrderSysID");
        writer.String(g2u(local_pInputOrderAction.OrderSysID).c_str());
        writer.Key("ActionFlag");
        writer.Int(local_pInputOrderAction.ActionFlag);
        writer.Key("LimitPrice");
        writer.Double(local_pInputOrderAction.LimitPrice);
        writer.Key("VolumeChange");
        writer.Int(local_pInputOrderAction.VolumeChange);
        writer.Key("UserID");
        writer.String(g2u(local_pInputOrderAction.UserID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pInputOrderAction.reserve1).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pInputOrderAction.InvestUnitID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pInputOrderAction.reserve2).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pInputOrderAction.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pInputOrderAction.InstrumentID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pInputOrderAction.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryMaxOrderVolume(CThostFtdcQryMaxOrderVolumeField * pQryMaxOrderVolume, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryMaxOrderVolume");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcQryMaxOrderVolumeField local_pQryMaxOrderVolume = { 0 };
        if(pQryMaxOrderVolume)
        {
            memcpy(&local_pQryMaxOrderVolume, pQryMaxOrderVolume, sizeof(CThostFtdcQryMaxOrderVolumeField));
        }
        writer.Key("pQryMaxOrderVolume");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pQryMaxOrderVolume.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pQryMaxOrderVolume.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pQryMaxOrderVolume.reserve1).c_str());
        writer.Key("Direction");
        writer.Int(local_pQryMaxOrderVolume.Direction);
        writer.Key("OffsetFlag");
        writer.Int(local_pQryMaxOrderVolume.OffsetFlag);
        writer.Key("HedgeFlag");
        writer.Int(local_pQryMaxOrderVolume.HedgeFlag);
        writer.Key("MaxVolume");
        writer.Int(local_pQryMaxOrderVolume.MaxVolume);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pQryMaxOrderVolume.ExchangeID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pQryMaxOrderVolume.InvestUnitID).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pQryMaxOrderVolume.InstrumentID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspSettlementInfoConfirm(CThostFtdcSettlementInfoConfirmField * pSettlementInfoConfirm, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspSettlementInfoConfirm");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcSettlementInfoConfirmField local_pSettlementInfoConfirm = { 0 };
        if(pSettlementInfoConfirm)
        {
            memcpy(&local_pSettlementInfoConfirm, pSettlementInfoConfirm, sizeof(CThostFtdcSettlementInfoConfirmField));
        }
        writer.Key("pSettlementInfoConfirm");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pSettlementInfoConfirm.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pSettlementInfoConfirm.InvestorID).c_str());
        writer.Key("ConfirmDate");
        writer.String(g2u(local_pSettlementInfoConfirm.ConfirmDate).c_str());
        writer.Key("ConfirmTime");
        writer.String(g2u(local_pSettlementInfoConfirm.ConfirmTime).c_str());
        writer.Key("SettlementID");
        writer.Int(local_pSettlementInfoConfirm.SettlementID);
        writer.Key("AccountID");
        writer.String(g2u(local_pSettlementInfoConfirm.AccountID).c_str());
        writer.Key("CurrencyID");
        writer.String(g2u(local_pSettlementInfoConfirm.CurrencyID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspRemoveParkedOrder(CThostFtdcRemoveParkedOrderField * pRemoveParkedOrder, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspRemoveParkedOrder");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcRemoveParkedOrderField local_pRemoveParkedOrder = { 0 };
        if(pRemoveParkedOrder)
        {
            memcpy(&local_pRemoveParkedOrder, pRemoveParkedOrder, sizeof(CThostFtdcRemoveParkedOrderField));
        }
        writer.Key("pRemoveParkedOrder");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pRemoveParkedOrder.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pRemoveParkedOrder.InvestorID).c_str());
        writer.Key("ParkedOrderID");
        writer.String(g2u(local_pRemoveParkedOrder.ParkedOrderID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pRemoveParkedOrder.InvestUnitID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspRemoveParkedOrderAction(CThostFtdcRemoveParkedOrderActionField * pRemoveParkedOrderAction, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspRemoveParkedOrderAction");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcRemoveParkedOrderActionField local_pRemoveParkedOrderAction = { 0 };
        if(pRemoveParkedOrderAction)
        {
            memcpy(&local_pRemoveParkedOrderAction, pRemoveParkedOrderAction, sizeof(CThostFtdcRemoveParkedOrderActionField));
        }
        writer.Key("pRemoveParkedOrderAction");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pRemoveParkedOrderAction.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pRemoveParkedOrderAction.InvestorID).c_str());
        writer.Key("ParkedOrderActionID");
        writer.String(g2u(local_pRemoveParkedOrderAction.ParkedOrderActionID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pRemoveParkedOrderAction.InvestUnitID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspExecOrderInsert(CThostFtdcInputExecOrderField * pInputExecOrder, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspExecOrderInsert");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcInputExecOrderField local_pInputExecOrder = { 0 };
        if(pInputExecOrder)
        {
            memcpy(&local_pInputExecOrder, pInputExecOrder, sizeof(CThostFtdcInputExecOrderField));
        }
        writer.Key("pInputExecOrder");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pInputExecOrder.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pInputExecOrder.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pInputExecOrder.reserve1).c_str());
        writer.Key("ExecOrderRef");
        writer.String(g2u(local_pInputExecOrder.ExecOrderRef).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pInputExecOrder.UserID).c_str());
        writer.Key("Volume");
        writer.Int(local_pInputExecOrder.Volume);
        writer.Key("RequestID");
        writer.Int(local_pInputExecOrder.RequestID);
        writer.Key("BusinessUnit");
        writer.String(g2u(local_pInputExecOrder.BusinessUnit).c_str());
        writer.Key("OffsetFlag");
        writer.Int(local_pInputExecOrder.OffsetFlag);
        writer.Key("HedgeFlag");
        writer.Int(local_pInputExecOrder.HedgeFlag);
        writer.Key("ActionType");
        writer.Int(local_pInputExecOrder.ActionType);
        writer.Key("PosiDirection");
        writer.Int(local_pInputExecOrder.PosiDirection);
        writer.Key("ReservePositionFlag");
        writer.Int(local_pInputExecOrder.ReservePositionFlag);
        writer.Key("CloseFlag");
        writer.Int(local_pInputExecOrder.CloseFlag);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pInputExecOrder.ExchangeID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pInputExecOrder.InvestUnitID).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pInputExecOrder.AccountID).c_str());
        writer.Key("CurrencyID");
        writer.String(g2u(local_pInputExecOrder.CurrencyID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pInputExecOrder.ClientID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pInputExecOrder.reserve2).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pInputExecOrder.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pInputExecOrder.InstrumentID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pInputExecOrder.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspExecOrderAction(CThostFtdcInputExecOrderActionField * pInputExecOrderAction, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspExecOrderAction");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcInputExecOrderActionField local_pInputExecOrderAction = { 0 };
        if(pInputExecOrderAction)
        {
            memcpy(&local_pInputExecOrderAction, pInputExecOrderAction, sizeof(CThostFtdcInputExecOrderActionField));
        }
        writer.Key("pInputExecOrderAction");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pInputExecOrderAction.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pInputExecOrderAction.InvestorID).c_str());
        writer.Key("ExecOrderActionRef");
        writer.Int(local_pInputExecOrderAction.ExecOrderActionRef);
        writer.Key("ExecOrderRef");
        writer.String(g2u(local_pInputExecOrderAction.ExecOrderRef).c_str());
        writer.Key("RequestID");
        writer.Int(local_pInputExecOrderAction.RequestID);
        writer.Key("FrontID");
        writer.Int(local_pInputExecOrderAction.FrontID);
        writer.Key("SessionID");
        writer.Int(local_pInputExecOrderAction.SessionID);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pInputExecOrderAction.ExchangeID).c_str());
        writer.Key("ExecOrderSysID");
        writer.String(g2u(local_pInputExecOrderAction.ExecOrderSysID).c_str());
        writer.Key("ActionFlag");
        writer.Int(local_pInputExecOrderAction.ActionFlag);
        writer.Key("UserID");
        writer.String(g2u(local_pInputExecOrderAction.UserID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pInputExecOrderAction.reserve1).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pInputExecOrderAction.InvestUnitID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pInputExecOrderAction.reserve2).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pInputExecOrderAction.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pInputExecOrderAction.InstrumentID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pInputExecOrderAction.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspForQuoteInsert(CThostFtdcInputForQuoteField * pInputForQuote, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspForQuoteInsert");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcInputForQuoteField local_pInputForQuote = { 0 };
        if(pInputForQuote)
        {
            memcpy(&local_pInputForQuote, pInputForQuote, sizeof(CThostFtdcInputForQuoteField));
        }
        writer.Key("pInputForQuote");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pInputForQuote.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pInputForQuote.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pInputForQuote.reserve1).c_str());
        writer.Key("ForQuoteRef");
        writer.String(g2u(local_pInputForQuote.ForQuoteRef).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pInputForQuote.UserID).c_str());
        writer.Key("ExchangeID");
        writer.String(g2u(local_pInputForQuote.ExchangeID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pInputForQuote.InvestUnitID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pInputForQuote.reserve2).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pInputForQuote.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pInputForQuote.InstrumentID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pInputForQuote.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQuoteInsert(CThostFtdcInputQuoteField * pInputQuote, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQuoteInsert");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcInputQuoteField local_pInputQuote = { 0 };
        if(pInputQuote)
        {
            memcpy(&local_pInputQuote, pInputQuote, sizeof(CThostFtdcInputQuoteField));
        }
        writer.Key("pInputQuote");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pInputQuote.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pInputQuote.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pInputQuote.reserve1).c_str());
        writer.Key("QuoteRef");
        writer.String(g2u(local_pInputQuote.QuoteRef).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pInputQuote.UserID).c_str());
        writer.Key("AskPrice");
        writer.Double(local_pInputQuote.AskPrice);
        writer.Key("BidPrice");
        writer.Double(local_pInputQuote.BidPrice);
        writer.Key("AskVolume");
        writer.Int(local_pInputQuote.AskVolume);
        writer.Key("BidVolume");
        writer.Int(local_pInputQuote.BidVolume);
        writer.Key("RequestID");
        writer.Int(local_pInputQuote.RequestID);
        writer.Key("BusinessUnit");
        writer.String(g2u(local_pInputQuote.BusinessUnit).c_str());
        writer.Key("AskOffsetFlag");
        writer.Int(local_pInputQuote.AskOffsetFlag);
        writer.Key("BidOffsetFlag");
        writer.Int(local_pInputQuote.BidOffsetFlag);
        writer.Key("AskHedgeFlag");
        writer.Int(local_pInputQuote.AskHedgeFlag);
        writer.Key("BidHedgeFlag");
        writer.Int(local_pInputQuote.BidHedgeFlag);
        writer.Key("AskOrderRef");
        writer.String(g2u(local_pInputQuote.AskOrderRef).c_str());
        writer.Key("BidOrderRef");
        writer.String(g2u(local_pInputQuote.BidOrderRef).c_str());
        writer.Key("ForQuoteSysID");
        writer.String(g2u(local_pInputQuote.ForQuoteSysID).c_str());
        writer.Key("ExchangeID");
        writer.String(g2u(local_pInputQuote.ExchangeID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pInputQuote.InvestUnitID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pInputQuote.ClientID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pInputQuote.reserve2).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pInputQuote.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pInputQuote.InstrumentID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pInputQuote.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQuoteAction(CThostFtdcInputQuoteActionField * pInputQuoteAction, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQuoteAction");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcInputQuoteActionField local_pInputQuoteAction = { 0 };
        if(pInputQuoteAction)
        {
            memcpy(&local_pInputQuoteAction, pInputQuoteAction, sizeof(CThostFtdcInputQuoteActionField));
        }
        writer.Key("pInputQuoteAction");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pInputQuoteAction.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pInputQuoteAction.InvestorID).c_str());
        writer.Key("QuoteActionRef");
        writer.Int(local_pInputQuoteAction.QuoteActionRef);
        writer.Key("QuoteRef");
        writer.String(g2u(local_pInputQuoteAction.QuoteRef).c_str());
        writer.Key("RequestID");
        writer.Int(local_pInputQuoteAction.RequestID);
        writer.Key("FrontID");
        writer.Int(local_pInputQuoteAction.FrontID);
        writer.Key("SessionID");
        writer.Int(local_pInputQuoteAction.SessionID);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pInputQuoteAction.ExchangeID).c_str());
        writer.Key("QuoteSysID");
        writer.String(g2u(local_pInputQuoteAction.QuoteSysID).c_str());
        writer.Key("ActionFlag");
        writer.Int(local_pInputQuoteAction.ActionFlag);
        writer.Key("UserID");
        writer.String(g2u(local_pInputQuoteAction.UserID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pInputQuoteAction.reserve1).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pInputQuoteAction.InvestUnitID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pInputQuoteAction.ClientID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pInputQuoteAction.reserve2).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pInputQuoteAction.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pInputQuoteAction.InstrumentID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pInputQuoteAction.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspBatchOrderAction(CThostFtdcInputBatchOrderActionField * pInputBatchOrderAction, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspBatchOrderAction");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcInputBatchOrderActionField local_pInputBatchOrderAction = { 0 };
        if(pInputBatchOrderAction)
        {
            memcpy(&local_pInputBatchOrderAction, pInputBatchOrderAction, sizeof(CThostFtdcInputBatchOrderActionField));
        }
        writer.Key("pInputBatchOrderAction");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pInputBatchOrderAction.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pInputBatchOrderAction.InvestorID).c_str());
        writer.Key("OrderActionRef");
        writer.Int(local_pInputBatchOrderAction.OrderActionRef);
        writer.Key("RequestID");
        writer.Int(local_pInputBatchOrderAction.RequestID);
        writer.Key("FrontID");
        writer.Int(local_pInputBatchOrderAction.FrontID);
        writer.Key("SessionID");
        writer.Int(local_pInputBatchOrderAction.SessionID);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pInputBatchOrderAction.ExchangeID).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pInputBatchOrderAction.UserID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pInputBatchOrderAction.InvestUnitID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pInputBatchOrderAction.reserve1).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pInputBatchOrderAction.MacAddress).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pInputBatchOrderAction.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspOptionSelfCloseInsert(CThostFtdcInputOptionSelfCloseField * pInputOptionSelfClose, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspOptionSelfCloseInsert");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcInputOptionSelfCloseField local_pInputOptionSelfClose = { 0 };
        if(pInputOptionSelfClose)
        {
            memcpy(&local_pInputOptionSelfClose, pInputOptionSelfClose, sizeof(CThostFtdcInputOptionSelfCloseField));
        }
        writer.Key("pInputOptionSelfClose");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pInputOptionSelfClose.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pInputOptionSelfClose.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pInputOptionSelfClose.reserve1).c_str());
        writer.Key("OptionSelfCloseRef");
        writer.String(g2u(local_pInputOptionSelfClose.OptionSelfCloseRef).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pInputOptionSelfClose.UserID).c_str());
        writer.Key("Volume");
        writer.Int(local_pInputOptionSelfClose.Volume);
        writer.Key("RequestID");
        writer.Int(local_pInputOptionSelfClose.RequestID);
        writer.Key("BusinessUnit");
        writer.String(g2u(local_pInputOptionSelfClose.BusinessUnit).c_str());
        writer.Key("HedgeFlag");
        writer.Int(local_pInputOptionSelfClose.HedgeFlag);
        writer.Key("OptSelfCloseFlag");
        writer.Int(local_pInputOptionSelfClose.OptSelfCloseFlag);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pInputOptionSelfClose.ExchangeID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pInputOptionSelfClose.InvestUnitID).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pInputOptionSelfClose.AccountID).c_str());
        writer.Key("CurrencyID");
        writer.String(g2u(local_pInputOptionSelfClose.CurrencyID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pInputOptionSelfClose.ClientID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pInputOptionSelfClose.reserve2).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pInputOptionSelfClose.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pInputOptionSelfClose.InstrumentID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pInputOptionSelfClose.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspOptionSelfCloseAction(CThostFtdcInputOptionSelfCloseActionField * pInputOptionSelfCloseAction, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspOptionSelfCloseAction");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcInputOptionSelfCloseActionField local_pInputOptionSelfCloseAction = { 0 };
        if(pInputOptionSelfCloseAction)
        {
            memcpy(&local_pInputOptionSelfCloseAction, pInputOptionSelfCloseAction, sizeof(CThostFtdcInputOptionSelfCloseActionField));
        }
        writer.Key("pInputOptionSelfCloseAction");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pInputOptionSelfCloseAction.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pInputOptionSelfCloseAction.InvestorID).c_str());
        writer.Key("OptionSelfCloseActionRef");
        writer.Int(local_pInputOptionSelfCloseAction.OptionSelfCloseActionRef);
        writer.Key("OptionSelfCloseRef");
        writer.String(g2u(local_pInputOptionSelfCloseAction.OptionSelfCloseRef).c_str());
        writer.Key("RequestID");
        writer.Int(local_pInputOptionSelfCloseAction.RequestID);
        writer.Key("FrontID");
        writer.Int(local_pInputOptionSelfCloseAction.FrontID);
        writer.Key("SessionID");
        writer.Int(local_pInputOptionSelfCloseAction.SessionID);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pInputOptionSelfCloseAction.ExchangeID).c_str());
        writer.Key("OptionSelfCloseSysID");
        writer.String(g2u(local_pInputOptionSelfCloseAction.OptionSelfCloseSysID).c_str());
        writer.Key("ActionFlag");
        writer.Int(local_pInputOptionSelfCloseAction.ActionFlag);
        writer.Key("UserID");
        writer.String(g2u(local_pInputOptionSelfCloseAction.UserID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pInputOptionSelfCloseAction.reserve1).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pInputOptionSelfCloseAction.InvestUnitID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pInputOptionSelfCloseAction.reserve2).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pInputOptionSelfCloseAction.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pInputOptionSelfCloseAction.InstrumentID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pInputOptionSelfCloseAction.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspCombActionInsert(CThostFtdcInputCombActionField * pInputCombAction, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspCombActionInsert");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcInputCombActionField local_pInputCombAction = { 0 };
        if(pInputCombAction)
        {
            memcpy(&local_pInputCombAction, pInputCombAction, sizeof(CThostFtdcInputCombActionField));
        }
        writer.Key("pInputCombAction");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pInputCombAction.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pInputCombAction.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pInputCombAction.reserve1).c_str());
        writer.Key("CombActionRef");
        writer.String(g2u(local_pInputCombAction.CombActionRef).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pInputCombAction.UserID).c_str());
        writer.Key("Direction");
        writer.Int(local_pInputCombAction.Direction);
        writer.Key("Volume");
        writer.Int(local_pInputCombAction.Volume);
        writer.Key("CombDirection");
        writer.Int(local_pInputCombAction.CombDirection);
        writer.Key("HedgeFlag");
        writer.Int(local_pInputCombAction.HedgeFlag);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pInputCombAction.ExchangeID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pInputCombAction.reserve2).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pInputCombAction.MacAddress).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pInputCombAction.InvestUnitID).c_str());
        writer.Key("FrontID");
        writer.Int(local_pInputCombAction.FrontID);
        writer.Key("SessionID");
        writer.Int(local_pInputCombAction.SessionID);
        writer.Key("InstrumentID");
        writer.String(g2u(local_pInputCombAction.InstrumentID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pInputCombAction.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryOrder(CThostFtdcOrderField * pOrder, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryOrder");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcOrderField local_pOrder = { 0 };
        if(pOrder)
        {
            memcpy(&local_pOrder, pOrder, sizeof(CThostFtdcOrderField));
        }
        writer.Key("pOrder");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pOrder.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pOrder.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pOrder.reserve1).c_str());
        writer.Key("OrderRef");
        writer.String(g2u(local_pOrder.OrderRef).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pOrder.UserID).c_str());
        writer.Key("OrderPriceType");
        writer.Int(local_pOrder.OrderPriceType);
        writer.Key("Direction");
        writer.Int(local_pOrder.Direction);
        writer.Key("CombOffsetFlag");
        writer.String(g2u(local_pOrder.CombOffsetFlag).c_str());
        writer.Key("CombHedgeFlag");
        writer.String(g2u(local_pOrder.CombHedgeFlag).c_str());
        writer.Key("LimitPrice");
        writer.Double(local_pOrder.LimitPrice);
        writer.Key("VolumeTotalOriginal");
        writer.Int(local_pOrder.VolumeTotalOriginal);
        writer.Key("TimeCondition");
        writer.Int(local_pOrder.TimeCondition);
        writer.Key("GTDDate");
        writer.String(g2u(local_pOrder.GTDDate).c_str());
        writer.Key("VolumeCondition");
        writer.Int(local_pOrder.VolumeCondition);
        writer.Key("MinVolume");
        writer.Int(local_pOrder.MinVolume);
        writer.Key("ContingentCondition");
        writer.Int(local_pOrder.ContingentCondition);
        writer.Key("StopPrice");
        writer.Double(local_pOrder.StopPrice);
        writer.Key("ForceCloseReason");
        writer.Int(local_pOrder.ForceCloseReason);
        writer.Key("IsAutoSuspend");
        writer.Int(local_pOrder.IsAutoSuspend);
        writer.Key("BusinessUnit");
        writer.String(g2u(local_pOrder.BusinessUnit).c_str());
        writer.Key("RequestID");
        writer.Int(local_pOrder.RequestID);
        writer.Key("OrderLocalID");
        writer.String(g2u(local_pOrder.OrderLocalID).c_str());
        writer.Key("ExchangeID");
        writer.String(g2u(local_pOrder.ExchangeID).c_str());
        writer.Key("ParticipantID");
        writer.String(g2u(local_pOrder.ParticipantID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pOrder.ClientID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pOrder.reserve2).c_str());
        writer.Key("TraderID");
        writer.String(g2u(local_pOrder.TraderID).c_str());
        writer.Key("InstallID");
        writer.Int(local_pOrder.InstallID);
        writer.Key("OrderSubmitStatus");
        writer.Int(local_pOrder.OrderSubmitStatus);
        writer.Key("NotifySequence");
        writer.Int(local_pOrder.NotifySequence);
        writer.Key("TradingDay");
        writer.String(g2u(local_pOrder.TradingDay).c_str());
        writer.Key("SettlementID");
        writer.Int(local_pOrder.SettlementID);
        writer.Key("OrderSysID");
        writer.String(g2u(local_pOrder.OrderSysID).c_str());
        writer.Key("OrderSource");
        writer.Int(local_pOrder.OrderSource);
        writer.Key("OrderStatus");
        writer.Int(local_pOrder.OrderStatus);
        writer.Key("OrderType");
        writer.Int(local_pOrder.OrderType);
        writer.Key("VolumeTraded");
        writer.Int(local_pOrder.VolumeTraded);
        writer.Key("VolumeTotal");
        writer.Int(local_pOrder.VolumeTotal);
        writer.Key("InsertDate");
        writer.String(g2u(local_pOrder.InsertDate).c_str());
        writer.Key("InsertTime");
        writer.String(g2u(local_pOrder.InsertTime).c_str());
        writer.Key("ActiveTime");
        writer.String(g2u(local_pOrder.ActiveTime).c_str());
        writer.Key("SuspendTime");
        writer.String(g2u(local_pOrder.SuspendTime).c_str());
        writer.Key("UpdateTime");
        writer.String(g2u(local_pOrder.UpdateTime).c_str());
        writer.Key("CancelTime");
        writer.String(g2u(local_pOrder.CancelTime).c_str());
        writer.Key("ActiveTraderID");
        writer.String(g2u(local_pOrder.ActiveTraderID).c_str());
        writer.Key("ClearingPartID");
        writer.String(g2u(local_pOrder.ClearingPartID).c_str());
        writer.Key("SequenceNo");
        writer.Int(local_pOrder.SequenceNo);
        writer.Key("FrontID");
        writer.Int(local_pOrder.FrontID);
        writer.Key("SessionID");
        writer.Int(local_pOrder.SessionID);
        writer.Key("UserProductInfo");
        writer.String(g2u(local_pOrder.UserProductInfo).c_str());
        writer.Key("StatusMsg");
        writer.String(g2u(local_pOrder.StatusMsg).c_str());
        writer.Key("UserForceClose");
        writer.Int(local_pOrder.UserForceClose);
        writer.Key("ActiveUserID");
        writer.String(g2u(local_pOrder.ActiveUserID).c_str());
        writer.Key("BrokerOrderSeq");
        writer.Int(local_pOrder.BrokerOrderSeq);
        writer.Key("RelativeOrderSysID");
        writer.String(g2u(local_pOrder.RelativeOrderSysID).c_str());
        writer.Key("ZCETotalTradedVolume");
        writer.Int(local_pOrder.ZCETotalTradedVolume);
        writer.Key("IsSwapOrder");
        writer.Int(local_pOrder.IsSwapOrder);
        writer.Key("BranchID");
        writer.String(g2u(local_pOrder.BranchID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pOrder.InvestUnitID).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pOrder.AccountID).c_str());
        writer.Key("CurrencyID");
        writer.String(g2u(local_pOrder.CurrencyID).c_str());
        writer.Key("reserve3");
        writer.String(g2u(local_pOrder.reserve3).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pOrder.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pOrder.InstrumentID).c_str());
        writer.Key("ExchangeInstID");
        writer.String(g2u(local_pOrder.ExchangeInstID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pOrder.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryTrade(CThostFtdcTradeField * pTrade, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryTrade");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcTradeField local_pTrade = { 0 };
        if(pTrade)
        {
            memcpy(&local_pTrade, pTrade, sizeof(CThostFtdcTradeField));
        }
        writer.Key("pTrade");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pTrade.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pTrade.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pTrade.reserve1).c_str());
        writer.Key("OrderRef");
        writer.String(g2u(local_pTrade.OrderRef).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pTrade.UserID).c_str());
        writer.Key("ExchangeID");
        writer.String(g2u(local_pTrade.ExchangeID).c_str());
        writer.Key("TradeID");
        writer.String(g2u(local_pTrade.TradeID).c_str());
        writer.Key("Direction");
        writer.Int(local_pTrade.Direction);
        writer.Key("OrderSysID");
        writer.String(g2u(local_pTrade.OrderSysID).c_str());
        writer.Key("ParticipantID");
        writer.String(g2u(local_pTrade.ParticipantID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pTrade.ClientID).c_str());
        writer.Key("TradingRole");
        writer.Int(local_pTrade.TradingRole);
        writer.Key("reserve2");
        writer.String(g2u(local_pTrade.reserve2).c_str());
        writer.Key("OffsetFlag");
        writer.Int(local_pTrade.OffsetFlag);
        writer.Key("HedgeFlag");
        writer.Int(local_pTrade.HedgeFlag);
        writer.Key("Price");
        writer.Double(local_pTrade.Price);
        writer.Key("Volume");
        writer.Int(local_pTrade.Volume);
        writer.Key("TradeDate");
        writer.String(g2u(local_pTrade.TradeDate).c_str());
        writer.Key("TradeTime");
        writer.String(g2u(local_pTrade.TradeTime).c_str());
        writer.Key("TradeType");
        writer.Int(local_pTrade.TradeType);
        writer.Key("PriceSource");
        writer.Int(local_pTrade.PriceSource);
        writer.Key("TraderID");
        writer.String(g2u(local_pTrade.TraderID).c_str());
        writer.Key("OrderLocalID");
        writer.String(g2u(local_pTrade.OrderLocalID).c_str());
        writer.Key("ClearingPartID");
        writer.String(g2u(local_pTrade.ClearingPartID).c_str());
        writer.Key("BusinessUnit");
        writer.String(g2u(local_pTrade.BusinessUnit).c_str());
        writer.Key("SequenceNo");
        writer.Int(local_pTrade.SequenceNo);
        writer.Key("TradingDay");
        writer.String(g2u(local_pTrade.TradingDay).c_str());
        writer.Key("SettlementID");
        writer.Int(local_pTrade.SettlementID);
        writer.Key("BrokerOrderSeq");
        writer.Int(local_pTrade.BrokerOrderSeq);
        writer.Key("TradeSource");
        writer.Int(local_pTrade.TradeSource);
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pTrade.InvestUnitID).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pTrade.InstrumentID).c_str());
        writer.Key("ExchangeInstID");
        writer.String(g2u(local_pTrade.ExchangeInstID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryInvestorPosition(CThostFtdcInvestorPositionField * pInvestorPosition, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryInvestorPosition");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcInvestorPositionField local_pInvestorPosition = { 0 };
        if(pInvestorPosition)
        {
            memcpy(&local_pInvestorPosition, pInvestorPosition, sizeof(CThostFtdcInvestorPositionField));
        }
        writer.Key("pInvestorPosition");
        writer.StartObject();
        writer.Key("reserve1");
        writer.String(g2u(local_pInvestorPosition.reserve1).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pInvestorPosition.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pInvestorPosition.InvestorID).c_str());
        writer.Key("PosiDirection");
        writer.Int(local_pInvestorPosition.PosiDirection);
        writer.Key("HedgeFlag");
        writer.Int(local_pInvestorPosition.HedgeFlag);
        writer.Key("PositionDate");
        writer.Int(local_pInvestorPosition.PositionDate);
        writer.Key("YdPosition");
        writer.Int(local_pInvestorPosition.YdPosition);
        writer.Key("Position");
        writer.Int(local_pInvestorPosition.Position);
        writer.Key("LongFrozen");
        writer.Int(local_pInvestorPosition.LongFrozen);
        writer.Key("ShortFrozen");
        writer.Int(local_pInvestorPosition.ShortFrozen);
        writer.Key("LongFrozenAmount");
        writer.Double(local_pInvestorPosition.LongFrozenAmount);
        writer.Key("ShortFrozenAmount");
        writer.Double(local_pInvestorPosition.ShortFrozenAmount);
        writer.Key("OpenVolume");
        writer.Int(local_pInvestorPosition.OpenVolume);
        writer.Key("CloseVolume");
        writer.Int(local_pInvestorPosition.CloseVolume);
        writer.Key("OpenAmount");
        writer.Double(local_pInvestorPosition.OpenAmount);
        writer.Key("CloseAmount");
        writer.Double(local_pInvestorPosition.CloseAmount);
        writer.Key("PositionCost");
        writer.Double(local_pInvestorPosition.PositionCost);
        writer.Key("PreMargin");
        writer.Double(local_pInvestorPosition.PreMargin);
        writer.Key("UseMargin");
        writer.Double(local_pInvestorPosition.UseMargin);
        writer.Key("FrozenMargin");
        writer.Double(local_pInvestorPosition.FrozenMargin);
        writer.Key("FrozenCash");
        writer.Double(local_pInvestorPosition.FrozenCash);
        writer.Key("FrozenCommission");
        writer.Double(local_pInvestorPosition.FrozenCommission);
        writer.Key("CashIn");
        writer.Double(local_pInvestorPosition.CashIn);
        writer.Key("Commission");
        writer.Double(local_pInvestorPosition.Commission);
        writer.Key("CloseProfit");
        writer.Double(local_pInvestorPosition.CloseProfit);
        writer.Key("PositionProfit");
        writer.Double(local_pInvestorPosition.PositionProfit);
        writer.Key("PreSettlementPrice");
        writer.Double(local_pInvestorPosition.PreSettlementPrice);
        writer.Key("SettlementPrice");
        writer.Double(local_pInvestorPosition.SettlementPrice);
        writer.Key("TradingDay");
        writer.String(g2u(local_pInvestorPosition.TradingDay).c_str());
        writer.Key("SettlementID");
        writer.Int(local_pInvestorPosition.SettlementID);
        writer.Key("OpenCost");
        writer.Double(local_pInvestorPosition.OpenCost);
        writer.Key("ExchangeMargin");
        writer.Double(local_pInvestorPosition.ExchangeMargin);
        writer.Key("CombPosition");
        writer.Int(local_pInvestorPosition.CombPosition);
        writer.Key("CombLongFrozen");
        writer.Int(local_pInvestorPosition.CombLongFrozen);
        writer.Key("CombShortFrozen");
        writer.Int(local_pInvestorPosition.CombShortFrozen);
        writer.Key("CloseProfitByDate");
        writer.Double(local_pInvestorPosition.CloseProfitByDate);
        writer.Key("CloseProfitByTrade");
        writer.Double(local_pInvestorPosition.CloseProfitByTrade);
        writer.Key("TodayPosition");
        writer.Int(local_pInvestorPosition.TodayPosition);
        writer.Key("MarginRateByMoney");
        writer.Double(local_pInvestorPosition.MarginRateByMoney);
        writer.Key("MarginRateByVolume");
        writer.Double(local_pInvestorPosition.MarginRateByVolume);
        writer.Key("StrikeFrozen");
        writer.Int(local_pInvestorPosition.StrikeFrozen);
        writer.Key("StrikeFrozenAmount");
        writer.Double(local_pInvestorPosition.StrikeFrozenAmount);
        writer.Key("AbandonFrozen");
        writer.Int(local_pInvestorPosition.AbandonFrozen);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pInvestorPosition.ExchangeID).c_str());
        writer.Key("YdStrikeFrozen");
        writer.Int(local_pInvestorPosition.YdStrikeFrozen);
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pInvestorPosition.InvestUnitID).c_str());
        writer.Key("PositionCostOffset");
        writer.Double(local_pInvestorPosition.PositionCostOffset);
        writer.Key("TasPosition");
        writer.Int(local_pInvestorPosition.TasPosition);
        writer.Key("TasPositionCost");
        writer.Double(local_pInvestorPosition.TasPositionCost);
        writer.Key("InstrumentID");
        writer.String(g2u(local_pInvestorPosition.InstrumentID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryTradingAccount(CThostFtdcTradingAccountField * pTradingAccount, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryTradingAccount");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcTradingAccountField local_pTradingAccount = { 0 };
        if(pTradingAccount)
        {
            memcpy(&local_pTradingAccount, pTradingAccount, sizeof(CThostFtdcTradingAccountField));
        }
        writer.Key("pTradingAccount");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pTradingAccount.BrokerID).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pTradingAccount.AccountID).c_str());
        writer.Key("PreMortgage");
        writer.Double(local_pTradingAccount.PreMortgage);
        writer.Key("PreCredit");
        writer.Double(local_pTradingAccount.PreCredit);
        writer.Key("PreDeposit");
        writer.Double(local_pTradingAccount.PreDeposit);
        writer.Key("PreBalance");
        writer.Double(local_pTradingAccount.PreBalance);
        writer.Key("PreMargin");
        writer.Double(local_pTradingAccount.PreMargin);
        writer.Key("InterestBase");
        writer.Double(local_pTradingAccount.InterestBase);
        writer.Key("Interest");
        writer.Double(local_pTradingAccount.Interest);
        writer.Key("Deposit");
        writer.Double(local_pTradingAccount.Deposit);
        writer.Key("Withdraw");
        writer.Double(local_pTradingAccount.Withdraw);
        writer.Key("FrozenMargin");
        writer.Double(local_pTradingAccount.FrozenMargin);
        writer.Key("FrozenCash");
        writer.Double(local_pTradingAccount.FrozenCash);
        writer.Key("FrozenCommission");
        writer.Double(local_pTradingAccount.FrozenCommission);
        writer.Key("CurrMargin");
        writer.Double(local_pTradingAccount.CurrMargin);
        writer.Key("CashIn");
        writer.Double(local_pTradingAccount.CashIn);
        writer.Key("Commission");
        writer.Double(local_pTradingAccount.Commission);
        writer.Key("CloseProfit");
        writer.Double(local_pTradingAccount.CloseProfit);
        writer.Key("PositionProfit");
        writer.Double(local_pTradingAccount.PositionProfit);
        writer.Key("Balance");
        writer.Double(local_pTradingAccount.Balance);
        writer.Key("Available");
        writer.Double(local_pTradingAccount.Available);
        writer.Key("WithdrawQuota");
        writer.Double(local_pTradingAccount.WithdrawQuota);
        writer.Key("Reserve");
        writer.Double(local_pTradingAccount.Reserve);
        writer.Key("TradingDay");
        writer.String(g2u(local_pTradingAccount.TradingDay).c_str());
        writer.Key("SettlementID");
        writer.Int(local_pTradingAccount.SettlementID);
        writer.Key("Credit");
        writer.Double(local_pTradingAccount.Credit);
        writer.Key("Mortgage");
        writer.Double(local_pTradingAccount.Mortgage);
        writer.Key("ExchangeMargin");
        writer.Double(local_pTradingAccount.ExchangeMargin);
        writer.Key("DeliveryMargin");
        writer.Double(local_pTradingAccount.DeliveryMargin);
        writer.Key("ExchangeDeliveryMargin");
        writer.Double(local_pTradingAccount.ExchangeDeliveryMargin);
        writer.Key("ReserveBalance");
        writer.Double(local_pTradingAccount.ReserveBalance);
        writer.Key("CurrencyID");
        writer.String(g2u(local_pTradingAccount.CurrencyID).c_str());
        writer.Key("PreFundMortgageIn");
        writer.Double(local_pTradingAccount.PreFundMortgageIn);
        writer.Key("PreFundMortgageOut");
        writer.Double(local_pTradingAccount.PreFundMortgageOut);
        writer.Key("FundMortgageIn");
        writer.Double(local_pTradingAccount.FundMortgageIn);
        writer.Key("FundMortgageOut");
        writer.Double(local_pTradingAccount.FundMortgageOut);
        writer.Key("FundMortgageAvailable");
        writer.Double(local_pTradingAccount.FundMortgageAvailable);
        writer.Key("MortgageableFund");
        writer.Double(local_pTradingAccount.MortgageableFund);
        writer.Key("SpecProductMargin");
        writer.Double(local_pTradingAccount.SpecProductMargin);
        writer.Key("SpecProductFrozenMargin");
        writer.Double(local_pTradingAccount.SpecProductFrozenMargin);
        writer.Key("SpecProductCommission");
        writer.Double(local_pTradingAccount.SpecProductCommission);
        writer.Key("SpecProductFrozenCommission");
        writer.Double(local_pTradingAccount.SpecProductFrozenCommission);
        writer.Key("SpecProductPositionProfit");
        writer.Double(local_pTradingAccount.SpecProductPositionProfit);
        writer.Key("SpecProductCloseProfit");
        writer.Double(local_pTradingAccount.SpecProductCloseProfit);
        writer.Key("SpecProductPositionProfitByAlg");
        writer.Double(local_pTradingAccount.SpecProductPositionProfitByAlg);
        writer.Key("SpecProductExchangeMargin");
        writer.Double(local_pTradingAccount.SpecProductExchangeMargin);
        writer.Key("BizType");
        writer.Int(local_pTradingAccount.BizType);
        writer.Key("FrozenSwap");
        writer.Double(local_pTradingAccount.FrozenSwap);
        writer.Key("RemainSwap");
        writer.Double(local_pTradingAccount.RemainSwap);
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryInvestor(CThostFtdcInvestorField * pInvestor, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryInvestor");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcInvestorField local_pInvestor = { 0 };
        if(pInvestor)
        {
            memcpy(&local_pInvestor, pInvestor, sizeof(CThostFtdcInvestorField));
        }
        writer.Key("pInvestor");
        writer.StartObject();
        writer.Key("InvestorID");
        writer.String(g2u(local_pInvestor.InvestorID).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pInvestor.BrokerID).c_str());
        writer.Key("InvestorGroupID");
        writer.String(g2u(local_pInvestor.InvestorGroupID).c_str());
        writer.Key("InvestorName");
        writer.String(g2u(local_pInvestor.InvestorName).c_str());
        writer.Key("IdentifiedCardType");
        writer.Int(local_pInvestor.IdentifiedCardType);
        writer.Key("IdentifiedCardNo");
        writer.String(g2u(local_pInvestor.IdentifiedCardNo).c_str());
        writer.Key("IsActive");
        writer.Int(local_pInvestor.IsActive);
        writer.Key("Telephone");
        writer.String(g2u(local_pInvestor.Telephone).c_str());
        writer.Key("Address");
        writer.String(g2u(local_pInvestor.Address).c_str());
        writer.Key("OpenDate");
        writer.String(g2u(local_pInvestor.OpenDate).c_str());
        writer.Key("Mobile");
        writer.String(g2u(local_pInvestor.Mobile).c_str());
        writer.Key("CommModelID");
        writer.String(g2u(local_pInvestor.CommModelID).c_str());
        writer.Key("MarginModelID");
        writer.String(g2u(local_pInvestor.MarginModelID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryTradingCode(CThostFtdcTradingCodeField * pTradingCode, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryTradingCode");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcTradingCodeField local_pTradingCode = { 0 };
        if(pTradingCode)
        {
            memcpy(&local_pTradingCode, pTradingCode, sizeof(CThostFtdcTradingCodeField));
        }
        writer.Key("pTradingCode");
        writer.StartObject();
        writer.Key("InvestorID");
        writer.String(g2u(local_pTradingCode.InvestorID).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pTradingCode.BrokerID).c_str());
        writer.Key("ExchangeID");
        writer.String(g2u(local_pTradingCode.ExchangeID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pTradingCode.ClientID).c_str());
        writer.Key("IsActive");
        writer.Int(local_pTradingCode.IsActive);
        writer.Key("ClientIDType");
        writer.Int(local_pTradingCode.ClientIDType);
        writer.Key("BranchID");
        writer.String(g2u(local_pTradingCode.BranchID).c_str());
        writer.Key("BizType");
        writer.Int(local_pTradingCode.BizType);
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pTradingCode.InvestUnitID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryInstrumentMarginRate(CThostFtdcInstrumentMarginRateField * pInstrumentMarginRate, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryInstrumentMarginRate");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcInstrumentMarginRateField local_pInstrumentMarginRate = { 0 };
        if(pInstrumentMarginRate)
        {
            memcpy(&local_pInstrumentMarginRate, pInstrumentMarginRate, sizeof(CThostFtdcInstrumentMarginRateField));
        }
        writer.Key("pInstrumentMarginRate");
        writer.StartObject();
        writer.Key("reserve1");
        writer.String(g2u(local_pInstrumentMarginRate.reserve1).c_str());
        writer.Key("InvestorRange");
        writer.Int(local_pInstrumentMarginRate.InvestorRange);
        writer.Key("BrokerID");
        writer.String(g2u(local_pInstrumentMarginRate.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pInstrumentMarginRate.InvestorID).c_str());
        writer.Key("HedgeFlag");
        writer.Int(local_pInstrumentMarginRate.HedgeFlag);
        writer.Key("LongMarginRatioByMoney");
        writer.Double(local_pInstrumentMarginRate.LongMarginRatioByMoney);
        writer.Key("LongMarginRatioByVolume");
        writer.Double(local_pInstrumentMarginRate.LongMarginRatioByVolume);
        writer.Key("ShortMarginRatioByMoney");
        writer.Double(local_pInstrumentMarginRate.ShortMarginRatioByMoney);
        writer.Key("ShortMarginRatioByVolume");
        writer.Double(local_pInstrumentMarginRate.ShortMarginRatioByVolume);
        writer.Key("IsRelative");
        writer.Int(local_pInstrumentMarginRate.IsRelative);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pInstrumentMarginRate.ExchangeID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pInstrumentMarginRate.InvestUnitID).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pInstrumentMarginRate.InstrumentID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryInstrumentCommissionRate(CThostFtdcInstrumentCommissionRateField * pInstrumentCommissionRate, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryInstrumentCommissionRate");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcInstrumentCommissionRateField local_pInstrumentCommissionRate = { 0 };
        if(pInstrumentCommissionRate)
        {
            memcpy(&local_pInstrumentCommissionRate, pInstrumentCommissionRate, sizeof(CThostFtdcInstrumentCommissionRateField));
        }
        writer.Key("pInstrumentCommissionRate");
        writer.StartObject();
        writer.Key("reserve1");
        writer.String(g2u(local_pInstrumentCommissionRate.reserve1).c_str());
        writer.Key("InvestorRange");
        writer.Int(local_pInstrumentCommissionRate.InvestorRange);
        writer.Key("BrokerID");
        writer.String(g2u(local_pInstrumentCommissionRate.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pInstrumentCommissionRate.InvestorID).c_str());
        writer.Key("OpenRatioByMoney");
        writer.Double(local_pInstrumentCommissionRate.OpenRatioByMoney);
        writer.Key("OpenRatioByVolume");
        writer.Double(local_pInstrumentCommissionRate.OpenRatioByVolume);
        writer.Key("CloseRatioByMoney");
        writer.Double(local_pInstrumentCommissionRate.CloseRatioByMoney);
        writer.Key("CloseRatioByVolume");
        writer.Double(local_pInstrumentCommissionRate.CloseRatioByVolume);
        writer.Key("CloseTodayRatioByMoney");
        writer.Double(local_pInstrumentCommissionRate.CloseTodayRatioByMoney);
        writer.Key("CloseTodayRatioByVolume");
        writer.Double(local_pInstrumentCommissionRate.CloseTodayRatioByVolume);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pInstrumentCommissionRate.ExchangeID).c_str());
        writer.Key("BizType");
        writer.Int(local_pInstrumentCommissionRate.BizType);
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pInstrumentCommissionRate.InvestUnitID).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pInstrumentCommissionRate.InstrumentID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryExchange(CThostFtdcExchangeField * pExchange, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryExchange");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcExchangeField local_pExchange = { 0 };
        if(pExchange)
        {
            memcpy(&local_pExchange, pExchange, sizeof(CThostFtdcExchangeField));
        }
        writer.Key("pExchange");
        writer.StartObject();
        writer.Key("ExchangeID");
        writer.String(g2u(local_pExchange.ExchangeID).c_str());
        writer.Key("ExchangeName");
        writer.String(g2u(local_pExchange.ExchangeName).c_str());
        writer.Key("ExchangeProperty");
        writer.Int(local_pExchange.ExchangeProperty);
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryProduct(CThostFtdcProductField * pProduct, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryProduct");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcProductField local_pProduct = { 0 };
        if(pProduct)
        {
            memcpy(&local_pProduct, pProduct, sizeof(CThostFtdcProductField));
        }
        writer.Key("pProduct");
        writer.StartObject();
        writer.Key("reserve1");
        writer.String(g2u(local_pProduct.reserve1).c_str());
        writer.Key("ProductName");
        writer.String(g2u(local_pProduct.ProductName).c_str());
        writer.Key("ExchangeID");
        writer.String(g2u(local_pProduct.ExchangeID).c_str());
        writer.Key("ProductClass");
        writer.Int(local_pProduct.ProductClass);
        writer.Key("VolumeMultiple");
        writer.Int(local_pProduct.VolumeMultiple);
        writer.Key("PriceTick");
        writer.Double(local_pProduct.PriceTick);
        writer.Key("MaxMarketOrderVolume");
        writer.Int(local_pProduct.MaxMarketOrderVolume);
        writer.Key("MinMarketOrderVolume");
        writer.Int(local_pProduct.MinMarketOrderVolume);
        writer.Key("MaxLimitOrderVolume");
        writer.Int(local_pProduct.MaxLimitOrderVolume);
        writer.Key("MinLimitOrderVolume");
        writer.Int(local_pProduct.MinLimitOrderVolume);
        writer.Key("PositionType");
        writer.Int(local_pProduct.PositionType);
        writer.Key("PositionDateType");
        writer.Int(local_pProduct.PositionDateType);
        writer.Key("CloseDealType");
        writer.Int(local_pProduct.CloseDealType);
        writer.Key("TradeCurrencyID");
        writer.String(g2u(local_pProduct.TradeCurrencyID).c_str());
        writer.Key("MortgageFundUseRange");
        writer.Int(local_pProduct.MortgageFundUseRange);
        writer.Key("reserve2");
        writer.String(g2u(local_pProduct.reserve2).c_str());
        writer.Key("UnderlyingMultiple");
        writer.Double(local_pProduct.UnderlyingMultiple);
        writer.Key("ProductID");
        writer.String(g2u(local_pProduct.ProductID).c_str());
        writer.Key("ExchangeProductID");
        writer.String(g2u(local_pProduct.ExchangeProductID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryInstrument(CThostFtdcInstrumentField * pInstrument, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryInstrument");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcInstrumentField local_pInstrument = { 0 };
        if(pInstrument)
        {
            memcpy(&local_pInstrument, pInstrument, sizeof(CThostFtdcInstrumentField));
        }
        writer.Key("pInstrument");
        writer.StartObject();
        writer.Key("reserve1");
        writer.String(g2u(local_pInstrument.reserve1).c_str());
        writer.Key("ExchangeID");
        writer.String(g2u(local_pInstrument.ExchangeID).c_str());
        writer.Key("InstrumentName");
        writer.String(g2u(local_pInstrument.InstrumentName).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pInstrument.reserve2).c_str());
        writer.Key("reserve3");
        writer.String(g2u(local_pInstrument.reserve3).c_str());
        writer.Key("ProductClass");
        writer.Int(local_pInstrument.ProductClass);
        writer.Key("DeliveryYear");
        writer.Int(local_pInstrument.DeliveryYear);
        writer.Key("DeliveryMonth");
        writer.Int(local_pInstrument.DeliveryMonth);
        writer.Key("MaxMarketOrderVolume");
        writer.Int(local_pInstrument.MaxMarketOrderVolume);
        writer.Key("MinMarketOrderVolume");
        writer.Int(local_pInstrument.MinMarketOrderVolume);
        writer.Key("MaxLimitOrderVolume");
        writer.Int(local_pInstrument.MaxLimitOrderVolume);
        writer.Key("MinLimitOrderVolume");
        writer.Int(local_pInstrument.MinLimitOrderVolume);
        writer.Key("VolumeMultiple");
        writer.Int(local_pInstrument.VolumeMultiple);
        writer.Key("PriceTick");
        writer.Double(local_pInstrument.PriceTick);
        writer.Key("CreateDate");
        writer.String(g2u(local_pInstrument.CreateDate).c_str());
        writer.Key("OpenDate");
        writer.String(g2u(local_pInstrument.OpenDate).c_str());
        writer.Key("ExpireDate");
        writer.String(g2u(local_pInstrument.ExpireDate).c_str());
        writer.Key("StartDelivDate");
        writer.String(g2u(local_pInstrument.StartDelivDate).c_str());
        writer.Key("EndDelivDate");
        writer.String(g2u(local_pInstrument.EndDelivDate).c_str());
        writer.Key("InstLifePhase");
        writer.Int(local_pInstrument.InstLifePhase);
        writer.Key("IsTrading");
        writer.Int(local_pInstrument.IsTrading);
        writer.Key("PositionType");
        writer.Int(local_pInstrument.PositionType);
        writer.Key("PositionDateType");
        writer.Int(local_pInstrument.PositionDateType);
        writer.Key("LongMarginRatio");
        writer.Double(local_pInstrument.LongMarginRatio);
        writer.Key("ShortMarginRatio");
        writer.Double(local_pInstrument.ShortMarginRatio);
        writer.Key("MaxMarginSideAlgorithm");
        writer.Int(local_pInstrument.MaxMarginSideAlgorithm);
        writer.Key("reserve4");
        writer.String(g2u(local_pInstrument.reserve4).c_str());
        writer.Key("StrikePrice");
        writer.Double(local_pInstrument.StrikePrice);
        writer.Key("OptionsType");
        writer.Int(local_pInstrument.OptionsType);
        writer.Key("UnderlyingMultiple");
        writer.Double(local_pInstrument.UnderlyingMultiple);
        writer.Key("CombinationType");
        writer.Int(local_pInstrument.CombinationType);
        writer.Key("InstrumentID");
        writer.String(g2u(local_pInstrument.InstrumentID).c_str());
        writer.Key("ExchangeInstID");
        writer.String(g2u(local_pInstrument.ExchangeInstID).c_str());
        writer.Key("ProductID");
        writer.String(g2u(local_pInstrument.ProductID).c_str());
        writer.Key("UnderlyingInstrID");
        writer.String(g2u(local_pInstrument.UnderlyingInstrID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryDepthMarketData(CThostFtdcDepthMarketDataField * pDepthMarketData, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryDepthMarketData");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcDepthMarketDataField local_pDepthMarketData = { 0 };
        if(pDepthMarketData)
        {
            memcpy(&local_pDepthMarketData, pDepthMarketData, sizeof(CThostFtdcDepthMarketDataField));
        }
        writer.Key("pDepthMarketData");
        writer.StartObject();
        writer.Key("TradingDay");
        writer.String(g2u(local_pDepthMarketData.TradingDay).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pDepthMarketData.reserve1).c_str());
        writer.Key("ExchangeID");
        writer.String(g2u(local_pDepthMarketData.ExchangeID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pDepthMarketData.reserve2).c_str());
        writer.Key("LastPrice");
        writer.Double(local_pDepthMarketData.LastPrice);
        writer.Key("PreSettlementPrice");
        writer.Double(local_pDepthMarketData.PreSettlementPrice);
        writer.Key("PreClosePrice");
        writer.Double(local_pDepthMarketData.PreClosePrice);
        writer.Key("PreOpenInterest");
        writer.Double(local_pDepthMarketData.PreOpenInterest);
        writer.Key("OpenPrice");
        writer.Double(local_pDepthMarketData.OpenPrice);
        writer.Key("HighestPrice");
        writer.Double(local_pDepthMarketData.HighestPrice);
        writer.Key("LowestPrice");
        writer.Double(local_pDepthMarketData.LowestPrice);
        writer.Key("Volume");
        writer.Int(local_pDepthMarketData.Volume);
        writer.Key("Turnover");
        writer.Double(local_pDepthMarketData.Turnover);
        writer.Key("OpenInterest");
        writer.Double(local_pDepthMarketData.OpenInterest);
        writer.Key("ClosePrice");
        writer.Double(local_pDepthMarketData.ClosePrice);
        writer.Key("SettlementPrice");
        writer.Double(local_pDepthMarketData.SettlementPrice);
        writer.Key("UpperLimitPrice");
        writer.Double(local_pDepthMarketData.UpperLimitPrice);
        writer.Key("LowerLimitPrice");
        writer.Double(local_pDepthMarketData.LowerLimitPrice);
        writer.Key("PreDelta");
        writer.Double(local_pDepthMarketData.PreDelta);
        writer.Key("CurrDelta");
        writer.Double(local_pDepthMarketData.CurrDelta);
        writer.Key("UpdateTime");
        writer.String(g2u(local_pDepthMarketData.UpdateTime).c_str());
        writer.Key("UpdateMillisec");
        writer.Int(local_pDepthMarketData.UpdateMillisec);
        writer.Key("BidPrice1");
        writer.Double(local_pDepthMarketData.BidPrice1);
        writer.Key("BidVolume1");
        writer.Int(local_pDepthMarketData.BidVolume1);
        writer.Key("AskPrice1");
        writer.Double(local_pDepthMarketData.AskPrice1);
        writer.Key("AskVolume1");
        writer.Int(local_pDepthMarketData.AskVolume1);
        writer.Key("BidPrice2");
        writer.Double(local_pDepthMarketData.BidPrice2);
        writer.Key("BidVolume2");
        writer.Int(local_pDepthMarketData.BidVolume2);
        writer.Key("AskPrice2");
        writer.Double(local_pDepthMarketData.AskPrice2);
        writer.Key("AskVolume2");
        writer.Int(local_pDepthMarketData.AskVolume2);
        writer.Key("BidPrice3");
        writer.Double(local_pDepthMarketData.BidPrice3);
        writer.Key("BidVolume3");
        writer.Int(local_pDepthMarketData.BidVolume3);
        writer.Key("AskPrice3");
        writer.Double(local_pDepthMarketData.AskPrice3);
        writer.Key("AskVolume3");
        writer.Int(local_pDepthMarketData.AskVolume3);
        writer.Key("BidPrice4");
        writer.Double(local_pDepthMarketData.BidPrice4);
        writer.Key("BidVolume4");
        writer.Int(local_pDepthMarketData.BidVolume4);
        writer.Key("AskPrice4");
        writer.Double(local_pDepthMarketData.AskPrice4);
        writer.Key("AskVolume4");
        writer.Int(local_pDepthMarketData.AskVolume4);
        writer.Key("BidPrice5");
        writer.Double(local_pDepthMarketData.BidPrice5);
        writer.Key("BidVolume5");
        writer.Int(local_pDepthMarketData.BidVolume5);
        writer.Key("AskPrice5");
        writer.Double(local_pDepthMarketData.AskPrice5);
        writer.Key("AskVolume5");
        writer.Int(local_pDepthMarketData.AskVolume5);
        writer.Key("AveragePrice");
        writer.Double(local_pDepthMarketData.AveragePrice);
        writer.Key("ActionDay");
        writer.String(g2u(local_pDepthMarketData.ActionDay).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pDepthMarketData.InstrumentID).c_str());
        writer.Key("ExchangeInstID");
        writer.String(g2u(local_pDepthMarketData.ExchangeInstID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQrySettlementInfo(CThostFtdcSettlementInfoField * pSettlementInfo, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQrySettlementInfo");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcSettlementInfoField local_pSettlementInfo = { 0 };
        if(pSettlementInfo)
        {
            memcpy(&local_pSettlementInfo, pSettlementInfo, sizeof(CThostFtdcSettlementInfoField));
        }
        writer.Key("pSettlementInfo");
        writer.StartObject();
        writer.Key("TradingDay");
        writer.String(g2u(local_pSettlementInfo.TradingDay).c_str());
        writer.Key("SettlementID");
        writer.Int(local_pSettlementInfo.SettlementID);
        writer.Key("BrokerID");
        writer.String(g2u(local_pSettlementInfo.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pSettlementInfo.InvestorID).c_str());
        writer.Key("SequenceNo");
        writer.Int(local_pSettlementInfo.SequenceNo);
        writer.Key("Content");
        writer.String(g2u(local_pSettlementInfo.Content).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pSettlementInfo.AccountID).c_str());
        writer.Key("CurrencyID");
        writer.String(g2u(local_pSettlementInfo.CurrencyID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryTransferBank(CThostFtdcTransferBankField * pTransferBank, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryTransferBank");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcTransferBankField local_pTransferBank = { 0 };
        if(pTransferBank)
        {
            memcpy(&local_pTransferBank, pTransferBank, sizeof(CThostFtdcTransferBankField));
        }
        writer.Key("pTransferBank");
        writer.StartObject();
        writer.Key("BankID");
        writer.String(g2u(local_pTransferBank.BankID).c_str());
        writer.Key("BankBrchID");
        writer.String(g2u(local_pTransferBank.BankBrchID).c_str());
        writer.Key("BankName");
        writer.String(g2u(local_pTransferBank.BankName).c_str());
        writer.Key("IsActive");
        writer.Int(local_pTransferBank.IsActive);
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryInvestorPositionDetail(CThostFtdcInvestorPositionDetailField * pInvestorPositionDetail, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryInvestorPositionDetail");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcInvestorPositionDetailField local_pInvestorPositionDetail = { 0 };
        if(pInvestorPositionDetail)
        {
            memcpy(&local_pInvestorPositionDetail, pInvestorPositionDetail, sizeof(CThostFtdcInvestorPositionDetailField));
        }
        writer.Key("pInvestorPositionDetail");
        writer.StartObject();
        writer.Key("reserve1");
        writer.String(g2u(local_pInvestorPositionDetail.reserve1).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pInvestorPositionDetail.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pInvestorPositionDetail.InvestorID).c_str());
        writer.Key("HedgeFlag");
        writer.Int(local_pInvestorPositionDetail.HedgeFlag);
        writer.Key("Direction");
        writer.Int(local_pInvestorPositionDetail.Direction);
        writer.Key("OpenDate");
        writer.String(g2u(local_pInvestorPositionDetail.OpenDate).c_str());
        writer.Key("TradeID");
        writer.String(g2u(local_pInvestorPositionDetail.TradeID).c_str());
        writer.Key("Volume");
        writer.Int(local_pInvestorPositionDetail.Volume);
        writer.Key("OpenPrice");
        writer.Double(local_pInvestorPositionDetail.OpenPrice);
        writer.Key("TradingDay");
        writer.String(g2u(local_pInvestorPositionDetail.TradingDay).c_str());
        writer.Key("SettlementID");
        writer.Int(local_pInvestorPositionDetail.SettlementID);
        writer.Key("TradeType");
        writer.Int(local_pInvestorPositionDetail.TradeType);
        writer.Key("reserve2");
        writer.String(g2u(local_pInvestorPositionDetail.reserve2).c_str());
        writer.Key("ExchangeID");
        writer.String(g2u(local_pInvestorPositionDetail.ExchangeID).c_str());
        writer.Key("CloseProfitByDate");
        writer.Double(local_pInvestorPositionDetail.CloseProfitByDate);
        writer.Key("CloseProfitByTrade");
        writer.Double(local_pInvestorPositionDetail.CloseProfitByTrade);
        writer.Key("PositionProfitByDate");
        writer.Double(local_pInvestorPositionDetail.PositionProfitByDate);
        writer.Key("PositionProfitByTrade");
        writer.Double(local_pInvestorPositionDetail.PositionProfitByTrade);
        writer.Key("Margin");
        writer.Double(local_pInvestorPositionDetail.Margin);
        writer.Key("ExchMargin");
        writer.Double(local_pInvestorPositionDetail.ExchMargin);
        writer.Key("MarginRateByMoney");
        writer.Double(local_pInvestorPositionDetail.MarginRateByMoney);
        writer.Key("MarginRateByVolume");
        writer.Double(local_pInvestorPositionDetail.MarginRateByVolume);
        writer.Key("LastSettlementPrice");
        writer.Double(local_pInvestorPositionDetail.LastSettlementPrice);
        writer.Key("SettlementPrice");
        writer.Double(local_pInvestorPositionDetail.SettlementPrice);
        writer.Key("CloseVolume");
        writer.Int(local_pInvestorPositionDetail.CloseVolume);
        writer.Key("CloseAmount");
        writer.Double(local_pInvestorPositionDetail.CloseAmount);
        writer.Key("TimeFirstVolume");
        writer.Int(local_pInvestorPositionDetail.TimeFirstVolume);
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pInvestorPositionDetail.InvestUnitID).c_str());
        writer.Key("SpecPosiType");
        writer.Int(local_pInvestorPositionDetail.SpecPosiType);
        writer.Key("InstrumentID");
        writer.String(g2u(local_pInvestorPositionDetail.InstrumentID).c_str());
        writer.Key("CombInstrumentID");
        writer.String(g2u(local_pInvestorPositionDetail.CombInstrumentID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryNotice(CThostFtdcNoticeField * pNotice, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryNotice");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcNoticeField local_pNotice = { 0 };
        if(pNotice)
        {
            memcpy(&local_pNotice, pNotice, sizeof(CThostFtdcNoticeField));
        }
        writer.Key("pNotice");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pNotice.BrokerID).c_str());
        writer.Key("Content");
        writer.String(g2u(local_pNotice.Content).c_str());
        writer.Key("SequenceLabel");
        writer.String(g2u(local_pNotice.SequenceLabel).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQrySettlementInfoConfirm(CThostFtdcSettlementInfoConfirmField * pSettlementInfoConfirm, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQrySettlementInfoConfirm");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcSettlementInfoConfirmField local_pSettlementInfoConfirm = { 0 };
        if(pSettlementInfoConfirm)
        {
            memcpy(&local_pSettlementInfoConfirm, pSettlementInfoConfirm, sizeof(CThostFtdcSettlementInfoConfirmField));
        }
        writer.Key("pSettlementInfoConfirm");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pSettlementInfoConfirm.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pSettlementInfoConfirm.InvestorID).c_str());
        writer.Key("ConfirmDate");
        writer.String(g2u(local_pSettlementInfoConfirm.ConfirmDate).c_str());
        writer.Key("ConfirmTime");
        writer.String(g2u(local_pSettlementInfoConfirm.ConfirmTime).c_str());
        writer.Key("SettlementID");
        writer.Int(local_pSettlementInfoConfirm.SettlementID);
        writer.Key("AccountID");
        writer.String(g2u(local_pSettlementInfoConfirm.AccountID).c_str());
        writer.Key("CurrencyID");
        writer.String(g2u(local_pSettlementInfoConfirm.CurrencyID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryInvestorPositionCombineDetail(CThostFtdcInvestorPositionCombineDetailField * pInvestorPositionCombineDetail, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryInvestorPositionCombineDetail");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcInvestorPositionCombineDetailField local_pInvestorPositionCombineDetail = { 0 };
        if(pInvestorPositionCombineDetail)
        {
            memcpy(&local_pInvestorPositionCombineDetail, pInvestorPositionCombineDetail, sizeof(CThostFtdcInvestorPositionCombineDetailField));
        }
        writer.Key("pInvestorPositionCombineDetail");
        writer.StartObject();
        writer.Key("TradingDay");
        writer.String(g2u(local_pInvestorPositionCombineDetail.TradingDay).c_str());
        writer.Key("OpenDate");
        writer.String(g2u(local_pInvestorPositionCombineDetail.OpenDate).c_str());
        writer.Key("ExchangeID");
        writer.String(g2u(local_pInvestorPositionCombineDetail.ExchangeID).c_str());
        writer.Key("SettlementID");
        writer.Int(local_pInvestorPositionCombineDetail.SettlementID);
        writer.Key("BrokerID");
        writer.String(g2u(local_pInvestorPositionCombineDetail.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pInvestorPositionCombineDetail.InvestorID).c_str());
        writer.Key("ComTradeID");
        writer.String(g2u(local_pInvestorPositionCombineDetail.ComTradeID).c_str());
        writer.Key("TradeID");
        writer.String(g2u(local_pInvestorPositionCombineDetail.TradeID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pInvestorPositionCombineDetail.reserve1).c_str());
        writer.Key("HedgeFlag");
        writer.Int(local_pInvestorPositionCombineDetail.HedgeFlag);
        writer.Key("Direction");
        writer.Int(local_pInvestorPositionCombineDetail.Direction);
        writer.Key("TotalAmt");
        writer.Int(local_pInvestorPositionCombineDetail.TotalAmt);
        writer.Key("Margin");
        writer.Double(local_pInvestorPositionCombineDetail.Margin);
        writer.Key("ExchMargin");
        writer.Double(local_pInvestorPositionCombineDetail.ExchMargin);
        writer.Key("MarginRateByMoney");
        writer.Double(local_pInvestorPositionCombineDetail.MarginRateByMoney);
        writer.Key("MarginRateByVolume");
        writer.Double(local_pInvestorPositionCombineDetail.MarginRateByVolume);
        writer.Key("LegID");
        writer.Int(local_pInvestorPositionCombineDetail.LegID);
        writer.Key("LegMultiple");
        writer.Int(local_pInvestorPositionCombineDetail.LegMultiple);
        writer.Key("reserve2");
        writer.String(g2u(local_pInvestorPositionCombineDetail.reserve2).c_str());
        writer.Key("TradeGroupID");
        writer.Int(local_pInvestorPositionCombineDetail.TradeGroupID);
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pInvestorPositionCombineDetail.InvestUnitID).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pInvestorPositionCombineDetail.InstrumentID).c_str());
        writer.Key("CombInstrumentID");
        writer.String(g2u(local_pInvestorPositionCombineDetail.CombInstrumentID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryCFMMCTradingAccountKey(CThostFtdcCFMMCTradingAccountKeyField * pCFMMCTradingAccountKey, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryCFMMCTradingAccountKey");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcCFMMCTradingAccountKeyField local_pCFMMCTradingAccountKey = { 0 };
        if(pCFMMCTradingAccountKey)
        {
            memcpy(&local_pCFMMCTradingAccountKey, pCFMMCTradingAccountKey, sizeof(CThostFtdcCFMMCTradingAccountKeyField));
        }
        writer.Key("pCFMMCTradingAccountKey");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pCFMMCTradingAccountKey.BrokerID).c_str());
        writer.Key("ParticipantID");
        writer.String(g2u(local_pCFMMCTradingAccountKey.ParticipantID).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pCFMMCTradingAccountKey.AccountID).c_str());
        writer.Key("KeyID");
        writer.Int(local_pCFMMCTradingAccountKey.KeyID);
        writer.Key("CurrentKey");
        writer.String(g2u(local_pCFMMCTradingAccountKey.CurrentKey).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryEWarrantOffset(CThostFtdcEWarrantOffsetField * pEWarrantOffset, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryEWarrantOffset");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcEWarrantOffsetField local_pEWarrantOffset = { 0 };
        if(pEWarrantOffset)
        {
            memcpy(&local_pEWarrantOffset, pEWarrantOffset, sizeof(CThostFtdcEWarrantOffsetField));
        }
        writer.Key("pEWarrantOffset");
        writer.StartObject();
        writer.Key("TradingDay");
        writer.String(g2u(local_pEWarrantOffset.TradingDay).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pEWarrantOffset.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pEWarrantOffset.InvestorID).c_str());
        writer.Key("ExchangeID");
        writer.String(g2u(local_pEWarrantOffset.ExchangeID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pEWarrantOffset.reserve1).c_str());
        writer.Key("Direction");
        writer.Int(local_pEWarrantOffset.Direction);
        writer.Key("HedgeFlag");
        writer.Int(local_pEWarrantOffset.HedgeFlag);
        writer.Key("Volume");
        writer.Int(local_pEWarrantOffset.Volume);
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pEWarrantOffset.InvestUnitID).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pEWarrantOffset.InstrumentID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryInvestorProductGroupMargin(CThostFtdcInvestorProductGroupMarginField * pInvestorProductGroupMargin, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryInvestorProductGroupMargin");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcInvestorProductGroupMarginField local_pInvestorProductGroupMargin = { 0 };
        if(pInvestorProductGroupMargin)
        {
            memcpy(&local_pInvestorProductGroupMargin, pInvestorProductGroupMargin, sizeof(CThostFtdcInvestorProductGroupMarginField));
        }
        writer.Key("pInvestorProductGroupMargin");
        writer.StartObject();
        writer.Key("reserve1");
        writer.String(g2u(local_pInvestorProductGroupMargin.reserve1).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pInvestorProductGroupMargin.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pInvestorProductGroupMargin.InvestorID).c_str());
        writer.Key("TradingDay");
        writer.String(g2u(local_pInvestorProductGroupMargin.TradingDay).c_str());
        writer.Key("SettlementID");
        writer.Int(local_pInvestorProductGroupMargin.SettlementID);
        writer.Key("FrozenMargin");
        writer.Double(local_pInvestorProductGroupMargin.FrozenMargin);
        writer.Key("LongFrozenMargin");
        writer.Double(local_pInvestorProductGroupMargin.LongFrozenMargin);
        writer.Key("ShortFrozenMargin");
        writer.Double(local_pInvestorProductGroupMargin.ShortFrozenMargin);
        writer.Key("UseMargin");
        writer.Double(local_pInvestorProductGroupMargin.UseMargin);
        writer.Key("LongUseMargin");
        writer.Double(local_pInvestorProductGroupMargin.LongUseMargin);
        writer.Key("ShortUseMargin");
        writer.Double(local_pInvestorProductGroupMargin.ShortUseMargin);
        writer.Key("ExchMargin");
        writer.Double(local_pInvestorProductGroupMargin.ExchMargin);
        writer.Key("LongExchMargin");
        writer.Double(local_pInvestorProductGroupMargin.LongExchMargin);
        writer.Key("ShortExchMargin");
        writer.Double(local_pInvestorProductGroupMargin.ShortExchMargin);
        writer.Key("CloseProfit");
        writer.Double(local_pInvestorProductGroupMargin.CloseProfit);
        writer.Key("FrozenCommission");
        writer.Double(local_pInvestorProductGroupMargin.FrozenCommission);
        writer.Key("Commission");
        writer.Double(local_pInvestorProductGroupMargin.Commission);
        writer.Key("FrozenCash");
        writer.Double(local_pInvestorProductGroupMargin.FrozenCash);
        writer.Key("CashIn");
        writer.Double(local_pInvestorProductGroupMargin.CashIn);
        writer.Key("PositionProfit");
        writer.Double(local_pInvestorProductGroupMargin.PositionProfit);
        writer.Key("OffsetAmount");
        writer.Double(local_pInvestorProductGroupMargin.OffsetAmount);
        writer.Key("LongOffsetAmount");
        writer.Double(local_pInvestorProductGroupMargin.LongOffsetAmount);
        writer.Key("ShortOffsetAmount");
        writer.Double(local_pInvestorProductGroupMargin.ShortOffsetAmount);
        writer.Key("ExchOffsetAmount");
        writer.Double(local_pInvestorProductGroupMargin.ExchOffsetAmount);
        writer.Key("LongExchOffsetAmount");
        writer.Double(local_pInvestorProductGroupMargin.LongExchOffsetAmount);
        writer.Key("ShortExchOffsetAmount");
        writer.Double(local_pInvestorProductGroupMargin.ShortExchOffsetAmount);
        writer.Key("HedgeFlag");
        writer.Int(local_pInvestorProductGroupMargin.HedgeFlag);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pInvestorProductGroupMargin.ExchangeID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pInvestorProductGroupMargin.InvestUnitID).c_str());
        writer.Key("ProductGroupID");
        writer.String(g2u(local_pInvestorProductGroupMargin.ProductGroupID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryExchangeMarginRate(CThostFtdcExchangeMarginRateField * pExchangeMarginRate, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryExchangeMarginRate");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcExchangeMarginRateField local_pExchangeMarginRate = { 0 };
        if(pExchangeMarginRate)
        {
            memcpy(&local_pExchangeMarginRate, pExchangeMarginRate, sizeof(CThostFtdcExchangeMarginRateField));
        }
        writer.Key("pExchangeMarginRate");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pExchangeMarginRate.BrokerID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pExchangeMarginRate.reserve1).c_str());
        writer.Key("HedgeFlag");
        writer.Int(local_pExchangeMarginRate.HedgeFlag);
        writer.Key("LongMarginRatioByMoney");
        writer.Double(local_pExchangeMarginRate.LongMarginRatioByMoney);
        writer.Key("LongMarginRatioByVolume");
        writer.Double(local_pExchangeMarginRate.LongMarginRatioByVolume);
        writer.Key("ShortMarginRatioByMoney");
        writer.Double(local_pExchangeMarginRate.ShortMarginRatioByMoney);
        writer.Key("ShortMarginRatioByVolume");
        writer.Double(local_pExchangeMarginRate.ShortMarginRatioByVolume);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pExchangeMarginRate.ExchangeID).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pExchangeMarginRate.InstrumentID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryExchangeMarginRateAdjust(CThostFtdcExchangeMarginRateAdjustField * pExchangeMarginRateAdjust, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryExchangeMarginRateAdjust");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcExchangeMarginRateAdjustField local_pExchangeMarginRateAdjust = { 0 };
        if(pExchangeMarginRateAdjust)
        {
            memcpy(&local_pExchangeMarginRateAdjust, pExchangeMarginRateAdjust, sizeof(CThostFtdcExchangeMarginRateAdjustField));
        }
        writer.Key("pExchangeMarginRateAdjust");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pExchangeMarginRateAdjust.BrokerID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pExchangeMarginRateAdjust.reserve1).c_str());
        writer.Key("HedgeFlag");
        writer.Int(local_pExchangeMarginRateAdjust.HedgeFlag);
        writer.Key("LongMarginRatioByMoney");
        writer.Double(local_pExchangeMarginRateAdjust.LongMarginRatioByMoney);
        writer.Key("LongMarginRatioByVolume");
        writer.Double(local_pExchangeMarginRateAdjust.LongMarginRatioByVolume);
        writer.Key("ShortMarginRatioByMoney");
        writer.Double(local_pExchangeMarginRateAdjust.ShortMarginRatioByMoney);
        writer.Key("ShortMarginRatioByVolume");
        writer.Double(local_pExchangeMarginRateAdjust.ShortMarginRatioByVolume);
        writer.Key("ExchLongMarginRatioByMoney");
        writer.Double(local_pExchangeMarginRateAdjust.ExchLongMarginRatioByMoney);
        writer.Key("ExchLongMarginRatioByVolume");
        writer.Double(local_pExchangeMarginRateAdjust.ExchLongMarginRatioByVolume);
        writer.Key("ExchShortMarginRatioByMoney");
        writer.Double(local_pExchangeMarginRateAdjust.ExchShortMarginRatioByMoney);
        writer.Key("ExchShortMarginRatioByVolume");
        writer.Double(local_pExchangeMarginRateAdjust.ExchShortMarginRatioByVolume);
        writer.Key("NoLongMarginRatioByMoney");
        writer.Double(local_pExchangeMarginRateAdjust.NoLongMarginRatioByMoney);
        writer.Key("NoLongMarginRatioByVolume");
        writer.Double(local_pExchangeMarginRateAdjust.NoLongMarginRatioByVolume);
        writer.Key("NoShortMarginRatioByMoney");
        writer.Double(local_pExchangeMarginRateAdjust.NoShortMarginRatioByMoney);
        writer.Key("NoShortMarginRatioByVolume");
        writer.Double(local_pExchangeMarginRateAdjust.NoShortMarginRatioByVolume);
        writer.Key("InstrumentID");
        writer.String(g2u(local_pExchangeMarginRateAdjust.InstrumentID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryExchangeRate(CThostFtdcExchangeRateField * pExchangeRate, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryExchangeRate");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcExchangeRateField local_pExchangeRate = { 0 };
        if(pExchangeRate)
        {
            memcpy(&local_pExchangeRate, pExchangeRate, sizeof(CThostFtdcExchangeRateField));
        }
        writer.Key("pExchangeRate");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pExchangeRate.BrokerID).c_str());
        writer.Key("FromCurrencyID");
        writer.String(g2u(local_pExchangeRate.FromCurrencyID).c_str());
        writer.Key("FromCurrencyUnit");
        writer.Double(local_pExchangeRate.FromCurrencyUnit);
        writer.Key("ToCurrencyID");
        writer.String(g2u(local_pExchangeRate.ToCurrencyID).c_str());
        writer.Key("ExchangeRate");
        writer.Double(local_pExchangeRate.ExchangeRate);
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQrySecAgentACIDMap(CThostFtdcSecAgentACIDMapField * pSecAgentACIDMap, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQrySecAgentACIDMap");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcSecAgentACIDMapField local_pSecAgentACIDMap = { 0 };
        if(pSecAgentACIDMap)
        {
            memcpy(&local_pSecAgentACIDMap, pSecAgentACIDMap, sizeof(CThostFtdcSecAgentACIDMapField));
        }
        writer.Key("pSecAgentACIDMap");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pSecAgentACIDMap.BrokerID).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pSecAgentACIDMap.UserID).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pSecAgentACIDMap.AccountID).c_str());
        writer.Key("CurrencyID");
        writer.String(g2u(local_pSecAgentACIDMap.CurrencyID).c_str());
        writer.Key("BrokerSecAgentID");
        writer.String(g2u(local_pSecAgentACIDMap.BrokerSecAgentID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryProductExchRate(CThostFtdcProductExchRateField * pProductExchRate, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryProductExchRate");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcProductExchRateField local_pProductExchRate = { 0 };
        if(pProductExchRate)
        {
            memcpy(&local_pProductExchRate, pProductExchRate, sizeof(CThostFtdcProductExchRateField));
        }
        writer.Key("pProductExchRate");
        writer.StartObject();
        writer.Key("reserve1");
        writer.String(g2u(local_pProductExchRate.reserve1).c_str());
        writer.Key("QuoteCurrencyID");
        writer.String(g2u(local_pProductExchRate.QuoteCurrencyID).c_str());
        writer.Key("ExchangeRate");
        writer.Double(local_pProductExchRate.ExchangeRate);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pProductExchRate.ExchangeID).c_str());
        writer.Key("ProductID");
        writer.String(g2u(local_pProductExchRate.ProductID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryProductGroup(CThostFtdcProductGroupField * pProductGroup, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryProductGroup");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcProductGroupField local_pProductGroup = { 0 };
        if(pProductGroup)
        {
            memcpy(&local_pProductGroup, pProductGroup, sizeof(CThostFtdcProductGroupField));
        }
        writer.Key("pProductGroup");
        writer.StartObject();
        writer.Key("reserve1");
        writer.String(g2u(local_pProductGroup.reserve1).c_str());
        writer.Key("ExchangeID");
        writer.String(g2u(local_pProductGroup.ExchangeID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pProductGroup.reserve2).c_str());
        writer.Key("ProductID");
        writer.String(g2u(local_pProductGroup.ProductID).c_str());
        writer.Key("ProductGroupID");
        writer.String(g2u(local_pProductGroup.ProductGroupID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryMMInstrumentCommissionRate(CThostFtdcMMInstrumentCommissionRateField * pMMInstrumentCommissionRate, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryMMInstrumentCommissionRate");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcMMInstrumentCommissionRateField local_pMMInstrumentCommissionRate = { 0 };
        if(pMMInstrumentCommissionRate)
        {
            memcpy(&local_pMMInstrumentCommissionRate, pMMInstrumentCommissionRate, sizeof(CThostFtdcMMInstrumentCommissionRateField));
        }
        writer.Key("pMMInstrumentCommissionRate");
        writer.StartObject();
        writer.Key("reserve1");
        writer.String(g2u(local_pMMInstrumentCommissionRate.reserve1).c_str());
        writer.Key("InvestorRange");
        writer.Int(local_pMMInstrumentCommissionRate.InvestorRange);
        writer.Key("BrokerID");
        writer.String(g2u(local_pMMInstrumentCommissionRate.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pMMInstrumentCommissionRate.InvestorID).c_str());
        writer.Key("OpenRatioByMoney");
        writer.Double(local_pMMInstrumentCommissionRate.OpenRatioByMoney);
        writer.Key("OpenRatioByVolume");
        writer.Double(local_pMMInstrumentCommissionRate.OpenRatioByVolume);
        writer.Key("CloseRatioByMoney");
        writer.Double(local_pMMInstrumentCommissionRate.CloseRatioByMoney);
        writer.Key("CloseRatioByVolume");
        writer.Double(local_pMMInstrumentCommissionRate.CloseRatioByVolume);
        writer.Key("CloseTodayRatioByMoney");
        writer.Double(local_pMMInstrumentCommissionRate.CloseTodayRatioByMoney);
        writer.Key("CloseTodayRatioByVolume");
        writer.Double(local_pMMInstrumentCommissionRate.CloseTodayRatioByVolume);
        writer.Key("InstrumentID");
        writer.String(g2u(local_pMMInstrumentCommissionRate.InstrumentID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryMMOptionInstrCommRate(CThostFtdcMMOptionInstrCommRateField * pMMOptionInstrCommRate, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryMMOptionInstrCommRate");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcMMOptionInstrCommRateField local_pMMOptionInstrCommRate = { 0 };
        if(pMMOptionInstrCommRate)
        {
            memcpy(&local_pMMOptionInstrCommRate, pMMOptionInstrCommRate, sizeof(CThostFtdcMMOptionInstrCommRateField));
        }
        writer.Key("pMMOptionInstrCommRate");
        writer.StartObject();
        writer.Key("reserve1");
        writer.String(g2u(local_pMMOptionInstrCommRate.reserve1).c_str());
        writer.Key("InvestorRange");
        writer.Int(local_pMMOptionInstrCommRate.InvestorRange);
        writer.Key("BrokerID");
        writer.String(g2u(local_pMMOptionInstrCommRate.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pMMOptionInstrCommRate.InvestorID).c_str());
        writer.Key("OpenRatioByMoney");
        writer.Double(local_pMMOptionInstrCommRate.OpenRatioByMoney);
        writer.Key("OpenRatioByVolume");
        writer.Double(local_pMMOptionInstrCommRate.OpenRatioByVolume);
        writer.Key("CloseRatioByMoney");
        writer.Double(local_pMMOptionInstrCommRate.CloseRatioByMoney);
        writer.Key("CloseRatioByVolume");
        writer.Double(local_pMMOptionInstrCommRate.CloseRatioByVolume);
        writer.Key("CloseTodayRatioByMoney");
        writer.Double(local_pMMOptionInstrCommRate.CloseTodayRatioByMoney);
        writer.Key("CloseTodayRatioByVolume");
        writer.Double(local_pMMOptionInstrCommRate.CloseTodayRatioByVolume);
        writer.Key("StrikeRatioByMoney");
        writer.Double(local_pMMOptionInstrCommRate.StrikeRatioByMoney);
        writer.Key("StrikeRatioByVolume");
        writer.Double(local_pMMOptionInstrCommRate.StrikeRatioByVolume);
        writer.Key("InstrumentID");
        writer.String(g2u(local_pMMOptionInstrCommRate.InstrumentID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryInstrumentOrderCommRate(CThostFtdcInstrumentOrderCommRateField * pInstrumentOrderCommRate, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryInstrumentOrderCommRate");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcInstrumentOrderCommRateField local_pInstrumentOrderCommRate = { 0 };
        if(pInstrumentOrderCommRate)
        {
            memcpy(&local_pInstrumentOrderCommRate, pInstrumentOrderCommRate, sizeof(CThostFtdcInstrumentOrderCommRateField));
        }
        writer.Key("pInstrumentOrderCommRate");
        writer.StartObject();
        writer.Key("reserve1");
        writer.String(g2u(local_pInstrumentOrderCommRate.reserve1).c_str());
        writer.Key("InvestorRange");
        writer.Int(local_pInstrumentOrderCommRate.InvestorRange);
        writer.Key("BrokerID");
        writer.String(g2u(local_pInstrumentOrderCommRate.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pInstrumentOrderCommRate.InvestorID).c_str());
        writer.Key("HedgeFlag");
        writer.Int(local_pInstrumentOrderCommRate.HedgeFlag);
        writer.Key("OrderCommByVolume");
        writer.Double(local_pInstrumentOrderCommRate.OrderCommByVolume);
        writer.Key("OrderActionCommByVolume");
        writer.Double(local_pInstrumentOrderCommRate.OrderActionCommByVolume);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pInstrumentOrderCommRate.ExchangeID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pInstrumentOrderCommRate.InvestUnitID).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pInstrumentOrderCommRate.InstrumentID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQrySecAgentTradingAccount(CThostFtdcTradingAccountField * pTradingAccount, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQrySecAgentTradingAccount");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcTradingAccountField local_pTradingAccount = { 0 };
        if(pTradingAccount)
        {
            memcpy(&local_pTradingAccount, pTradingAccount, sizeof(CThostFtdcTradingAccountField));
        }
        writer.Key("pTradingAccount");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pTradingAccount.BrokerID).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pTradingAccount.AccountID).c_str());
        writer.Key("PreMortgage");
        writer.Double(local_pTradingAccount.PreMortgage);
        writer.Key("PreCredit");
        writer.Double(local_pTradingAccount.PreCredit);
        writer.Key("PreDeposit");
        writer.Double(local_pTradingAccount.PreDeposit);
        writer.Key("PreBalance");
        writer.Double(local_pTradingAccount.PreBalance);
        writer.Key("PreMargin");
        writer.Double(local_pTradingAccount.PreMargin);
        writer.Key("InterestBase");
        writer.Double(local_pTradingAccount.InterestBase);
        writer.Key("Interest");
        writer.Double(local_pTradingAccount.Interest);
        writer.Key("Deposit");
        writer.Double(local_pTradingAccount.Deposit);
        writer.Key("Withdraw");
        writer.Double(local_pTradingAccount.Withdraw);
        writer.Key("FrozenMargin");
        writer.Double(local_pTradingAccount.FrozenMargin);
        writer.Key("FrozenCash");
        writer.Double(local_pTradingAccount.FrozenCash);
        writer.Key("FrozenCommission");
        writer.Double(local_pTradingAccount.FrozenCommission);
        writer.Key("CurrMargin");
        writer.Double(local_pTradingAccount.CurrMargin);
        writer.Key("CashIn");
        writer.Double(local_pTradingAccount.CashIn);
        writer.Key("Commission");
        writer.Double(local_pTradingAccount.Commission);
        writer.Key("CloseProfit");
        writer.Double(local_pTradingAccount.CloseProfit);
        writer.Key("PositionProfit");
        writer.Double(local_pTradingAccount.PositionProfit);
        writer.Key("Balance");
        writer.Double(local_pTradingAccount.Balance);
        writer.Key("Available");
        writer.Double(local_pTradingAccount.Available);
        writer.Key("WithdrawQuota");
        writer.Double(local_pTradingAccount.WithdrawQuota);
        writer.Key("Reserve");
        writer.Double(local_pTradingAccount.Reserve);
        writer.Key("TradingDay");
        writer.String(g2u(local_pTradingAccount.TradingDay).c_str());
        writer.Key("SettlementID");
        writer.Int(local_pTradingAccount.SettlementID);
        writer.Key("Credit");
        writer.Double(local_pTradingAccount.Credit);
        writer.Key("Mortgage");
        writer.Double(local_pTradingAccount.Mortgage);
        writer.Key("ExchangeMargin");
        writer.Double(local_pTradingAccount.ExchangeMargin);
        writer.Key("DeliveryMargin");
        writer.Double(local_pTradingAccount.DeliveryMargin);
        writer.Key("ExchangeDeliveryMargin");
        writer.Double(local_pTradingAccount.ExchangeDeliveryMargin);
        writer.Key("ReserveBalance");
        writer.Double(local_pTradingAccount.ReserveBalance);
        writer.Key("CurrencyID");
        writer.String(g2u(local_pTradingAccount.CurrencyID).c_str());
        writer.Key("PreFundMortgageIn");
        writer.Double(local_pTradingAccount.PreFundMortgageIn);
        writer.Key("PreFundMortgageOut");
        writer.Double(local_pTradingAccount.PreFundMortgageOut);
        writer.Key("FundMortgageIn");
        writer.Double(local_pTradingAccount.FundMortgageIn);
        writer.Key("FundMortgageOut");
        writer.Double(local_pTradingAccount.FundMortgageOut);
        writer.Key("FundMortgageAvailable");
        writer.Double(local_pTradingAccount.FundMortgageAvailable);
        writer.Key("MortgageableFund");
        writer.Double(local_pTradingAccount.MortgageableFund);
        writer.Key("SpecProductMargin");
        writer.Double(local_pTradingAccount.SpecProductMargin);
        writer.Key("SpecProductFrozenMargin");
        writer.Double(local_pTradingAccount.SpecProductFrozenMargin);
        writer.Key("SpecProductCommission");
        writer.Double(local_pTradingAccount.SpecProductCommission);
        writer.Key("SpecProductFrozenCommission");
        writer.Double(local_pTradingAccount.SpecProductFrozenCommission);
        writer.Key("SpecProductPositionProfit");
        writer.Double(local_pTradingAccount.SpecProductPositionProfit);
        writer.Key("SpecProductCloseProfit");
        writer.Double(local_pTradingAccount.SpecProductCloseProfit);
        writer.Key("SpecProductPositionProfitByAlg");
        writer.Double(local_pTradingAccount.SpecProductPositionProfitByAlg);
        writer.Key("SpecProductExchangeMargin");
        writer.Double(local_pTradingAccount.SpecProductExchangeMargin);
        writer.Key("BizType");
        writer.Int(local_pTradingAccount.BizType);
        writer.Key("FrozenSwap");
        writer.Double(local_pTradingAccount.FrozenSwap);
        writer.Key("RemainSwap");
        writer.Double(local_pTradingAccount.RemainSwap);
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQrySecAgentCheckMode(CThostFtdcSecAgentCheckModeField * pSecAgentCheckMode, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQrySecAgentCheckMode");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcSecAgentCheckModeField local_pSecAgentCheckMode = { 0 };
        if(pSecAgentCheckMode)
        {
            memcpy(&local_pSecAgentCheckMode, pSecAgentCheckMode, sizeof(CThostFtdcSecAgentCheckModeField));
        }
        writer.Key("pSecAgentCheckMode");
        writer.StartObject();
        writer.Key("InvestorID");
        writer.String(g2u(local_pSecAgentCheckMode.InvestorID).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pSecAgentCheckMode.BrokerID).c_str());
        writer.Key("CurrencyID");
        writer.String(g2u(local_pSecAgentCheckMode.CurrencyID).c_str());
        writer.Key("BrokerSecAgentID");
        writer.String(g2u(local_pSecAgentCheckMode.BrokerSecAgentID).c_str());
        writer.Key("CheckSelfAccount");
        writer.Int(local_pSecAgentCheckMode.CheckSelfAccount);
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQrySecAgentTradeInfo(CThostFtdcSecAgentTradeInfoField * pSecAgentTradeInfo, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQrySecAgentTradeInfo");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcSecAgentTradeInfoField local_pSecAgentTradeInfo = { 0 };
        if(pSecAgentTradeInfo)
        {
            memcpy(&local_pSecAgentTradeInfo, pSecAgentTradeInfo, sizeof(CThostFtdcSecAgentTradeInfoField));
        }
        writer.Key("pSecAgentTradeInfo");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pSecAgentTradeInfo.BrokerID).c_str());
        writer.Key("BrokerSecAgentID");
        writer.String(g2u(local_pSecAgentTradeInfo.BrokerSecAgentID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pSecAgentTradeInfo.InvestorID).c_str());
        writer.Key("LongCustomerName");
        writer.String(g2u(local_pSecAgentTradeInfo.LongCustomerName).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryOptionInstrTradeCost(CThostFtdcOptionInstrTradeCostField * pOptionInstrTradeCost, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryOptionInstrTradeCost");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcOptionInstrTradeCostField local_pOptionInstrTradeCost = { 0 };
        if(pOptionInstrTradeCost)
        {
            memcpy(&local_pOptionInstrTradeCost, pOptionInstrTradeCost, sizeof(CThostFtdcOptionInstrTradeCostField));
        }
        writer.Key("pOptionInstrTradeCost");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pOptionInstrTradeCost.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pOptionInstrTradeCost.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pOptionInstrTradeCost.reserve1).c_str());
        writer.Key("HedgeFlag");
        writer.Int(local_pOptionInstrTradeCost.HedgeFlag);
        writer.Key("FixedMargin");
        writer.Double(local_pOptionInstrTradeCost.FixedMargin);
        writer.Key("MiniMargin");
        writer.Double(local_pOptionInstrTradeCost.MiniMargin);
        writer.Key("Royalty");
        writer.Double(local_pOptionInstrTradeCost.Royalty);
        writer.Key("ExchFixedMargin");
        writer.Double(local_pOptionInstrTradeCost.ExchFixedMargin);
        writer.Key("ExchMiniMargin");
        writer.Double(local_pOptionInstrTradeCost.ExchMiniMargin);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pOptionInstrTradeCost.ExchangeID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pOptionInstrTradeCost.InvestUnitID).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pOptionInstrTradeCost.InstrumentID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryOptionInstrCommRate(CThostFtdcOptionInstrCommRateField * pOptionInstrCommRate, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryOptionInstrCommRate");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcOptionInstrCommRateField local_pOptionInstrCommRate = { 0 };
        if(pOptionInstrCommRate)
        {
            memcpy(&local_pOptionInstrCommRate, pOptionInstrCommRate, sizeof(CThostFtdcOptionInstrCommRateField));
        }
        writer.Key("pOptionInstrCommRate");
        writer.StartObject();
        writer.Key("reserve1");
        writer.String(g2u(local_pOptionInstrCommRate.reserve1).c_str());
        writer.Key("InvestorRange");
        writer.Int(local_pOptionInstrCommRate.InvestorRange);
        writer.Key("BrokerID");
        writer.String(g2u(local_pOptionInstrCommRate.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pOptionInstrCommRate.InvestorID).c_str());
        writer.Key("OpenRatioByMoney");
        writer.Double(local_pOptionInstrCommRate.OpenRatioByMoney);
        writer.Key("OpenRatioByVolume");
        writer.Double(local_pOptionInstrCommRate.OpenRatioByVolume);
        writer.Key("CloseRatioByMoney");
        writer.Double(local_pOptionInstrCommRate.CloseRatioByMoney);
        writer.Key("CloseRatioByVolume");
        writer.Double(local_pOptionInstrCommRate.CloseRatioByVolume);
        writer.Key("CloseTodayRatioByMoney");
        writer.Double(local_pOptionInstrCommRate.CloseTodayRatioByMoney);
        writer.Key("CloseTodayRatioByVolume");
        writer.Double(local_pOptionInstrCommRate.CloseTodayRatioByVolume);
        writer.Key("StrikeRatioByMoney");
        writer.Double(local_pOptionInstrCommRate.StrikeRatioByMoney);
        writer.Key("StrikeRatioByVolume");
        writer.Double(local_pOptionInstrCommRate.StrikeRatioByVolume);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pOptionInstrCommRate.ExchangeID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pOptionInstrCommRate.InvestUnitID).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pOptionInstrCommRate.InstrumentID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryExecOrder(CThostFtdcExecOrderField * pExecOrder, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryExecOrder");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcExecOrderField local_pExecOrder = { 0 };
        if(pExecOrder)
        {
            memcpy(&local_pExecOrder, pExecOrder, sizeof(CThostFtdcExecOrderField));
        }
        writer.Key("pExecOrder");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pExecOrder.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pExecOrder.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pExecOrder.reserve1).c_str());
        writer.Key("ExecOrderRef");
        writer.String(g2u(local_pExecOrder.ExecOrderRef).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pExecOrder.UserID).c_str());
        writer.Key("Volume");
        writer.Int(local_pExecOrder.Volume);
        writer.Key("RequestID");
        writer.Int(local_pExecOrder.RequestID);
        writer.Key("BusinessUnit");
        writer.String(g2u(local_pExecOrder.BusinessUnit).c_str());
        writer.Key("OffsetFlag");
        writer.Int(local_pExecOrder.OffsetFlag);
        writer.Key("HedgeFlag");
        writer.Int(local_pExecOrder.HedgeFlag);
        writer.Key("ActionType");
        writer.Int(local_pExecOrder.ActionType);
        writer.Key("PosiDirection");
        writer.Int(local_pExecOrder.PosiDirection);
        writer.Key("ReservePositionFlag");
        writer.Int(local_pExecOrder.ReservePositionFlag);
        writer.Key("CloseFlag");
        writer.Int(local_pExecOrder.CloseFlag);
        writer.Key("ExecOrderLocalID");
        writer.String(g2u(local_pExecOrder.ExecOrderLocalID).c_str());
        writer.Key("ExchangeID");
        writer.String(g2u(local_pExecOrder.ExchangeID).c_str());
        writer.Key("ParticipantID");
        writer.String(g2u(local_pExecOrder.ParticipantID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pExecOrder.ClientID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pExecOrder.reserve2).c_str());
        writer.Key("TraderID");
        writer.String(g2u(local_pExecOrder.TraderID).c_str());
        writer.Key("InstallID");
        writer.Int(local_pExecOrder.InstallID);
        writer.Key("OrderSubmitStatus");
        writer.Int(local_pExecOrder.OrderSubmitStatus);
        writer.Key("NotifySequence");
        writer.Int(local_pExecOrder.NotifySequence);
        writer.Key("TradingDay");
        writer.String(g2u(local_pExecOrder.TradingDay).c_str());
        writer.Key("SettlementID");
        writer.Int(local_pExecOrder.SettlementID);
        writer.Key("ExecOrderSysID");
        writer.String(g2u(local_pExecOrder.ExecOrderSysID).c_str());
        writer.Key("InsertDate");
        writer.String(g2u(local_pExecOrder.InsertDate).c_str());
        writer.Key("InsertTime");
        writer.String(g2u(local_pExecOrder.InsertTime).c_str());
        writer.Key("CancelTime");
        writer.String(g2u(local_pExecOrder.CancelTime).c_str());
        writer.Key("ExecResult");
        writer.Int(local_pExecOrder.ExecResult);
        writer.Key("ClearingPartID");
        writer.String(g2u(local_pExecOrder.ClearingPartID).c_str());
        writer.Key("SequenceNo");
        writer.Int(local_pExecOrder.SequenceNo);
        writer.Key("FrontID");
        writer.Int(local_pExecOrder.FrontID);
        writer.Key("SessionID");
        writer.Int(local_pExecOrder.SessionID);
        writer.Key("UserProductInfo");
        writer.String(g2u(local_pExecOrder.UserProductInfo).c_str());
        writer.Key("StatusMsg");
        writer.String(g2u(local_pExecOrder.StatusMsg).c_str());
        writer.Key("ActiveUserID");
        writer.String(g2u(local_pExecOrder.ActiveUserID).c_str());
        writer.Key("BrokerExecOrderSeq");
        writer.Int(local_pExecOrder.BrokerExecOrderSeq);
        writer.Key("BranchID");
        writer.String(g2u(local_pExecOrder.BranchID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pExecOrder.InvestUnitID).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pExecOrder.AccountID).c_str());
        writer.Key("CurrencyID");
        writer.String(g2u(local_pExecOrder.CurrencyID).c_str());
        writer.Key("reserve3");
        writer.String(g2u(local_pExecOrder.reserve3).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pExecOrder.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pExecOrder.InstrumentID).c_str());
        writer.Key("ExchangeInstID");
        writer.String(g2u(local_pExecOrder.ExchangeInstID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pExecOrder.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryForQuote(CThostFtdcForQuoteField * pForQuote, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryForQuote");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcForQuoteField local_pForQuote = { 0 };
        if(pForQuote)
        {
            memcpy(&local_pForQuote, pForQuote, sizeof(CThostFtdcForQuoteField));
        }
        writer.Key("pForQuote");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pForQuote.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pForQuote.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pForQuote.reserve1).c_str());
        writer.Key("ForQuoteRef");
        writer.String(g2u(local_pForQuote.ForQuoteRef).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pForQuote.UserID).c_str());
        writer.Key("ForQuoteLocalID");
        writer.String(g2u(local_pForQuote.ForQuoteLocalID).c_str());
        writer.Key("ExchangeID");
        writer.String(g2u(local_pForQuote.ExchangeID).c_str());
        writer.Key("ParticipantID");
        writer.String(g2u(local_pForQuote.ParticipantID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pForQuote.ClientID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pForQuote.reserve2).c_str());
        writer.Key("TraderID");
        writer.String(g2u(local_pForQuote.TraderID).c_str());
        writer.Key("InstallID");
        writer.Int(local_pForQuote.InstallID);
        writer.Key("InsertDate");
        writer.String(g2u(local_pForQuote.InsertDate).c_str());
        writer.Key("InsertTime");
        writer.String(g2u(local_pForQuote.InsertTime).c_str());
        writer.Key("ForQuoteStatus");
        writer.Int(local_pForQuote.ForQuoteStatus);
        writer.Key("FrontID");
        writer.Int(local_pForQuote.FrontID);
        writer.Key("SessionID");
        writer.Int(local_pForQuote.SessionID);
        writer.Key("StatusMsg");
        writer.String(g2u(local_pForQuote.StatusMsg).c_str());
        writer.Key("ActiveUserID");
        writer.String(g2u(local_pForQuote.ActiveUserID).c_str());
        writer.Key("BrokerForQutoSeq");
        writer.Int(local_pForQuote.BrokerForQutoSeq);
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pForQuote.InvestUnitID).c_str());
        writer.Key("reserve3");
        writer.String(g2u(local_pForQuote.reserve3).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pForQuote.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pForQuote.InstrumentID).c_str());
        writer.Key("ExchangeInstID");
        writer.String(g2u(local_pForQuote.ExchangeInstID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pForQuote.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryQuote(CThostFtdcQuoteField * pQuote, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryQuote");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcQuoteField local_pQuote = { 0 };
        if(pQuote)
        {
            memcpy(&local_pQuote, pQuote, sizeof(CThostFtdcQuoteField));
        }
        writer.Key("pQuote");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pQuote.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pQuote.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pQuote.reserve1).c_str());
        writer.Key("QuoteRef");
        writer.String(g2u(local_pQuote.QuoteRef).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pQuote.UserID).c_str());
        writer.Key("AskPrice");
        writer.Double(local_pQuote.AskPrice);
        writer.Key("BidPrice");
        writer.Double(local_pQuote.BidPrice);
        writer.Key("AskVolume");
        writer.Int(local_pQuote.AskVolume);
        writer.Key("BidVolume");
        writer.Int(local_pQuote.BidVolume);
        writer.Key("RequestID");
        writer.Int(local_pQuote.RequestID);
        writer.Key("BusinessUnit");
        writer.String(g2u(local_pQuote.BusinessUnit).c_str());
        writer.Key("AskOffsetFlag");
        writer.Int(local_pQuote.AskOffsetFlag);
        writer.Key("BidOffsetFlag");
        writer.Int(local_pQuote.BidOffsetFlag);
        writer.Key("AskHedgeFlag");
        writer.Int(local_pQuote.AskHedgeFlag);
        writer.Key("BidHedgeFlag");
        writer.Int(local_pQuote.BidHedgeFlag);
        writer.Key("QuoteLocalID");
        writer.String(g2u(local_pQuote.QuoteLocalID).c_str());
        writer.Key("ExchangeID");
        writer.String(g2u(local_pQuote.ExchangeID).c_str());
        writer.Key("ParticipantID");
        writer.String(g2u(local_pQuote.ParticipantID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pQuote.ClientID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pQuote.reserve2).c_str());
        writer.Key("TraderID");
        writer.String(g2u(local_pQuote.TraderID).c_str());
        writer.Key("InstallID");
        writer.Int(local_pQuote.InstallID);
        writer.Key("NotifySequence");
        writer.Int(local_pQuote.NotifySequence);
        writer.Key("OrderSubmitStatus");
        writer.Int(local_pQuote.OrderSubmitStatus);
        writer.Key("TradingDay");
        writer.String(g2u(local_pQuote.TradingDay).c_str());
        writer.Key("SettlementID");
        writer.Int(local_pQuote.SettlementID);
        writer.Key("QuoteSysID");
        writer.String(g2u(local_pQuote.QuoteSysID).c_str());
        writer.Key("InsertDate");
        writer.String(g2u(local_pQuote.InsertDate).c_str());
        writer.Key("InsertTime");
        writer.String(g2u(local_pQuote.InsertTime).c_str());
        writer.Key("CancelTime");
        writer.String(g2u(local_pQuote.CancelTime).c_str());
        writer.Key("QuoteStatus");
        writer.Int(local_pQuote.QuoteStatus);
        writer.Key("ClearingPartID");
        writer.String(g2u(local_pQuote.ClearingPartID).c_str());
        writer.Key("SequenceNo");
        writer.Int(local_pQuote.SequenceNo);
        writer.Key("AskOrderSysID");
        writer.String(g2u(local_pQuote.AskOrderSysID).c_str());
        writer.Key("BidOrderSysID");
        writer.String(g2u(local_pQuote.BidOrderSysID).c_str());
        writer.Key("FrontID");
        writer.Int(local_pQuote.FrontID);
        writer.Key("SessionID");
        writer.Int(local_pQuote.SessionID);
        writer.Key("UserProductInfo");
        writer.String(g2u(local_pQuote.UserProductInfo).c_str());
        writer.Key("StatusMsg");
        writer.String(g2u(local_pQuote.StatusMsg).c_str());
        writer.Key("ActiveUserID");
        writer.String(g2u(local_pQuote.ActiveUserID).c_str());
        writer.Key("BrokerQuoteSeq");
        writer.Int(local_pQuote.BrokerQuoteSeq);
        writer.Key("AskOrderRef");
        writer.String(g2u(local_pQuote.AskOrderRef).c_str());
        writer.Key("BidOrderRef");
        writer.String(g2u(local_pQuote.BidOrderRef).c_str());
        writer.Key("ForQuoteSysID");
        writer.String(g2u(local_pQuote.ForQuoteSysID).c_str());
        writer.Key("BranchID");
        writer.String(g2u(local_pQuote.BranchID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pQuote.InvestUnitID).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pQuote.AccountID).c_str());
        writer.Key("CurrencyID");
        writer.String(g2u(local_pQuote.CurrencyID).c_str());
        writer.Key("reserve3");
        writer.String(g2u(local_pQuote.reserve3).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pQuote.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pQuote.InstrumentID).c_str());
        writer.Key("ExchangeInstID");
        writer.String(g2u(local_pQuote.ExchangeInstID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pQuote.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryOptionSelfClose(CThostFtdcOptionSelfCloseField * pOptionSelfClose, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryOptionSelfClose");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcOptionSelfCloseField local_pOptionSelfClose = { 0 };
        if(pOptionSelfClose)
        {
            memcpy(&local_pOptionSelfClose, pOptionSelfClose, sizeof(CThostFtdcOptionSelfCloseField));
        }
        writer.Key("pOptionSelfClose");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pOptionSelfClose.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pOptionSelfClose.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pOptionSelfClose.reserve1).c_str());
        writer.Key("OptionSelfCloseRef");
        writer.String(g2u(local_pOptionSelfClose.OptionSelfCloseRef).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pOptionSelfClose.UserID).c_str());
        writer.Key("Volume");
        writer.Int(local_pOptionSelfClose.Volume);
        writer.Key("RequestID");
        writer.Int(local_pOptionSelfClose.RequestID);
        writer.Key("BusinessUnit");
        writer.String(g2u(local_pOptionSelfClose.BusinessUnit).c_str());
        writer.Key("HedgeFlag");
        writer.Int(local_pOptionSelfClose.HedgeFlag);
        writer.Key("OptSelfCloseFlag");
        writer.Int(local_pOptionSelfClose.OptSelfCloseFlag);
        writer.Key("OptionSelfCloseLocalID");
        writer.String(g2u(local_pOptionSelfClose.OptionSelfCloseLocalID).c_str());
        writer.Key("ExchangeID");
        writer.String(g2u(local_pOptionSelfClose.ExchangeID).c_str());
        writer.Key("ParticipantID");
        writer.String(g2u(local_pOptionSelfClose.ParticipantID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pOptionSelfClose.ClientID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pOptionSelfClose.reserve2).c_str());
        writer.Key("TraderID");
        writer.String(g2u(local_pOptionSelfClose.TraderID).c_str());
        writer.Key("InstallID");
        writer.Int(local_pOptionSelfClose.InstallID);
        writer.Key("OrderSubmitStatus");
        writer.Int(local_pOptionSelfClose.OrderSubmitStatus);
        writer.Key("NotifySequence");
        writer.Int(local_pOptionSelfClose.NotifySequence);
        writer.Key("TradingDay");
        writer.String(g2u(local_pOptionSelfClose.TradingDay).c_str());
        writer.Key("SettlementID");
        writer.Int(local_pOptionSelfClose.SettlementID);
        writer.Key("OptionSelfCloseSysID");
        writer.String(g2u(local_pOptionSelfClose.OptionSelfCloseSysID).c_str());
        writer.Key("InsertDate");
        writer.String(g2u(local_pOptionSelfClose.InsertDate).c_str());
        writer.Key("InsertTime");
        writer.String(g2u(local_pOptionSelfClose.InsertTime).c_str());
        writer.Key("CancelTime");
        writer.String(g2u(local_pOptionSelfClose.CancelTime).c_str());
        writer.Key("ExecResult");
        writer.Int(local_pOptionSelfClose.ExecResult);
        writer.Key("ClearingPartID");
        writer.String(g2u(local_pOptionSelfClose.ClearingPartID).c_str());
        writer.Key("SequenceNo");
        writer.Int(local_pOptionSelfClose.SequenceNo);
        writer.Key("FrontID");
        writer.Int(local_pOptionSelfClose.FrontID);
        writer.Key("SessionID");
        writer.Int(local_pOptionSelfClose.SessionID);
        writer.Key("UserProductInfo");
        writer.String(g2u(local_pOptionSelfClose.UserProductInfo).c_str());
        writer.Key("StatusMsg");
        writer.String(g2u(local_pOptionSelfClose.StatusMsg).c_str());
        writer.Key("ActiveUserID");
        writer.String(g2u(local_pOptionSelfClose.ActiveUserID).c_str());
        writer.Key("BrokerOptionSelfCloseSeq");
        writer.Int(local_pOptionSelfClose.BrokerOptionSelfCloseSeq);
        writer.Key("BranchID");
        writer.String(g2u(local_pOptionSelfClose.BranchID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pOptionSelfClose.InvestUnitID).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pOptionSelfClose.AccountID).c_str());
        writer.Key("CurrencyID");
        writer.String(g2u(local_pOptionSelfClose.CurrencyID).c_str());
        writer.Key("reserve3");
        writer.String(g2u(local_pOptionSelfClose.reserve3).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pOptionSelfClose.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pOptionSelfClose.InstrumentID).c_str());
        writer.Key("ExchangeInstID");
        writer.String(g2u(local_pOptionSelfClose.ExchangeInstID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pOptionSelfClose.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryInvestUnit(CThostFtdcInvestUnitField * pInvestUnit, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryInvestUnit");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcInvestUnitField local_pInvestUnit = { 0 };
        if(pInvestUnit)
        {
            memcpy(&local_pInvestUnit, pInvestUnit, sizeof(CThostFtdcInvestUnitField));
        }
        writer.Key("pInvestUnit");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pInvestUnit.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pInvestUnit.InvestorID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pInvestUnit.InvestUnitID).c_str());
        writer.Key("InvestorUnitName");
        writer.String(g2u(local_pInvestUnit.InvestorUnitName).c_str());
        writer.Key("InvestorGroupID");
        writer.String(g2u(local_pInvestUnit.InvestorGroupID).c_str());
        writer.Key("CommModelID");
        writer.String(g2u(local_pInvestUnit.CommModelID).c_str());
        writer.Key("MarginModelID");
        writer.String(g2u(local_pInvestUnit.MarginModelID).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pInvestUnit.AccountID).c_str());
        writer.Key("CurrencyID");
        writer.String(g2u(local_pInvestUnit.CurrencyID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryCombInstrumentGuard(CThostFtdcCombInstrumentGuardField * pCombInstrumentGuard, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryCombInstrumentGuard");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcCombInstrumentGuardField local_pCombInstrumentGuard = { 0 };
        if(pCombInstrumentGuard)
        {
            memcpy(&local_pCombInstrumentGuard, pCombInstrumentGuard, sizeof(CThostFtdcCombInstrumentGuardField));
        }
        writer.Key("pCombInstrumentGuard");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pCombInstrumentGuard.BrokerID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pCombInstrumentGuard.reserve1).c_str());
        writer.Key("GuarantRatio");
        writer.Double(local_pCombInstrumentGuard.GuarantRatio);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pCombInstrumentGuard.ExchangeID).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pCombInstrumentGuard.InstrumentID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryCombAction(CThostFtdcCombActionField * pCombAction, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryCombAction");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcCombActionField local_pCombAction = { 0 };
        if(pCombAction)
        {
            memcpy(&local_pCombAction, pCombAction, sizeof(CThostFtdcCombActionField));
        }
        writer.Key("pCombAction");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pCombAction.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pCombAction.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pCombAction.reserve1).c_str());
        writer.Key("CombActionRef");
        writer.String(g2u(local_pCombAction.CombActionRef).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pCombAction.UserID).c_str());
        writer.Key("Direction");
        writer.Int(local_pCombAction.Direction);
        writer.Key("Volume");
        writer.Int(local_pCombAction.Volume);
        writer.Key("CombDirection");
        writer.Int(local_pCombAction.CombDirection);
        writer.Key("HedgeFlag");
        writer.Int(local_pCombAction.HedgeFlag);
        writer.Key("ActionLocalID");
        writer.String(g2u(local_pCombAction.ActionLocalID).c_str());
        writer.Key("ExchangeID");
        writer.String(g2u(local_pCombAction.ExchangeID).c_str());
        writer.Key("ParticipantID");
        writer.String(g2u(local_pCombAction.ParticipantID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pCombAction.ClientID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pCombAction.reserve2).c_str());
        writer.Key("TraderID");
        writer.String(g2u(local_pCombAction.TraderID).c_str());
        writer.Key("InstallID");
        writer.Int(local_pCombAction.InstallID);
        writer.Key("ActionStatus");
        writer.Int(local_pCombAction.ActionStatus);
        writer.Key("NotifySequence");
        writer.Int(local_pCombAction.NotifySequence);
        writer.Key("TradingDay");
        writer.String(g2u(local_pCombAction.TradingDay).c_str());
        writer.Key("SettlementID");
        writer.Int(local_pCombAction.SettlementID);
        writer.Key("SequenceNo");
        writer.Int(local_pCombAction.SequenceNo);
        writer.Key("FrontID");
        writer.Int(local_pCombAction.FrontID);
        writer.Key("SessionID");
        writer.Int(local_pCombAction.SessionID);
        writer.Key("UserProductInfo");
        writer.String(g2u(local_pCombAction.UserProductInfo).c_str());
        writer.Key("StatusMsg");
        writer.String(g2u(local_pCombAction.StatusMsg).c_str());
        writer.Key("reserve3");
        writer.String(g2u(local_pCombAction.reserve3).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pCombAction.MacAddress).c_str());
        writer.Key("ComTradeID");
        writer.String(g2u(local_pCombAction.ComTradeID).c_str());
        writer.Key("BranchID");
        writer.String(g2u(local_pCombAction.BranchID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pCombAction.InvestUnitID).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pCombAction.InstrumentID).c_str());
        writer.Key("ExchangeInstID");
        writer.String(g2u(local_pCombAction.ExchangeInstID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pCombAction.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryTransferSerial(CThostFtdcTransferSerialField * pTransferSerial, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryTransferSerial");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcTransferSerialField local_pTransferSerial = { 0 };
        if(pTransferSerial)
        {
            memcpy(&local_pTransferSerial, pTransferSerial, sizeof(CThostFtdcTransferSerialField));
        }
        writer.Key("pTransferSerial");
        writer.StartObject();
        writer.Key("PlateSerial");
        writer.Int(local_pTransferSerial.PlateSerial);
        writer.Key("TradeDate");
        writer.String(g2u(local_pTransferSerial.TradeDate).c_str());
        writer.Key("TradingDay");
        writer.String(g2u(local_pTransferSerial.TradingDay).c_str());
        writer.Key("TradeTime");
        writer.String(g2u(local_pTransferSerial.TradeTime).c_str());
        writer.Key("TradeCode");
        writer.String(g2u(local_pTransferSerial.TradeCode).c_str());
        writer.Key("SessionID");
        writer.Int(local_pTransferSerial.SessionID);
        writer.Key("BankID");
        writer.String(g2u(local_pTransferSerial.BankID).c_str());
        writer.Key("BankBranchID");
        writer.String(g2u(local_pTransferSerial.BankBranchID).c_str());
        writer.Key("BankAccType");
        writer.Int(local_pTransferSerial.BankAccType);
        writer.Key("BankAccount");
        writer.String(g2u(local_pTransferSerial.BankAccount).c_str());
        writer.Key("BankSerial");
        writer.String(g2u(local_pTransferSerial.BankSerial).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pTransferSerial.BrokerID).c_str());
        writer.Key("BrokerBranchID");
        writer.String(g2u(local_pTransferSerial.BrokerBranchID).c_str());
        writer.Key("FutureAccType");
        writer.Int(local_pTransferSerial.FutureAccType);
        writer.Key("AccountID");
        writer.String(g2u(local_pTransferSerial.AccountID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pTransferSerial.InvestorID).c_str());
        writer.Key("FutureSerial");
        writer.Int(local_pTransferSerial.FutureSerial);
        writer.Key("IdCardType");
        writer.Int(local_pTransferSerial.IdCardType);
        writer.Key("IdentifiedCardNo");
        writer.String(g2u(local_pTransferSerial.IdentifiedCardNo).c_str());
        writer.Key("CurrencyID");
        writer.String(g2u(local_pTransferSerial.CurrencyID).c_str());
        writer.Key("TradeAmount");
        writer.Double(local_pTransferSerial.TradeAmount);
        writer.Key("CustFee");
        writer.Double(local_pTransferSerial.CustFee);
        writer.Key("BrokerFee");
        writer.Double(local_pTransferSerial.BrokerFee);
        writer.Key("AvailabilityFlag");
        writer.Int(local_pTransferSerial.AvailabilityFlag);
        writer.Key("OperatorCode");
        writer.String(g2u(local_pTransferSerial.OperatorCode).c_str());
        writer.Key("BankNewAccount");
        writer.String(g2u(local_pTransferSerial.BankNewAccount).c_str());
        writer.Key("ErrorID");
        writer.Int(local_pTransferSerial.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pTransferSerial.ErrorMsg).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryAccountregister(CThostFtdcAccountregisterField * pAccountregister, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryAccountregister");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcAccountregisterField local_pAccountregister = { 0 };
        if(pAccountregister)
        {
            memcpy(&local_pAccountregister, pAccountregister, sizeof(CThostFtdcAccountregisterField));
        }
        writer.Key("pAccountregister");
        writer.StartObject();
        writer.Key("TradeDay");
        writer.String(g2u(local_pAccountregister.TradeDay).c_str());
        writer.Key("BankID");
        writer.String(g2u(local_pAccountregister.BankID).c_str());
        writer.Key("BankBranchID");
        writer.String(g2u(local_pAccountregister.BankBranchID).c_str());
        writer.Key("BankAccount");
        writer.String(g2u(local_pAccountregister.BankAccount).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pAccountregister.BrokerID).c_str());
        writer.Key("BrokerBranchID");
        writer.String(g2u(local_pAccountregister.BrokerBranchID).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pAccountregister.AccountID).c_str());
        writer.Key("IdCardType");
        writer.Int(local_pAccountregister.IdCardType);
        writer.Key("IdentifiedCardNo");
        writer.String(g2u(local_pAccountregister.IdentifiedCardNo).c_str());
        writer.Key("CustomerName");
        writer.String(g2u(local_pAccountregister.CustomerName).c_str());
        writer.Key("CurrencyID");
        writer.String(g2u(local_pAccountregister.CurrencyID).c_str());
        writer.Key("OpenOrDestroy");
        writer.Int(local_pAccountregister.OpenOrDestroy);
        writer.Key("RegDate");
        writer.String(g2u(local_pAccountregister.RegDate).c_str());
        writer.Key("OutDate");
        writer.String(g2u(local_pAccountregister.OutDate).c_str());
        writer.Key("TID");
        writer.Int(local_pAccountregister.TID);
        writer.Key("CustType");
        writer.Int(local_pAccountregister.CustType);
        writer.Key("BankAccType");
        writer.Int(local_pAccountregister.BankAccType);
        writer.Key("LongCustomerName");
        writer.String(g2u(local_pAccountregister.LongCustomerName).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspError(CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspError");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRtnOrder(CThostFtdcOrderField * pOrder)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRtnOrder");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcOrderField local_pOrder = { 0 };
        if(pOrder)
        {
            memcpy(&local_pOrder, pOrder, sizeof(CThostFtdcOrderField));
        }
        writer.Key("pOrder");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pOrder.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pOrder.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pOrder.reserve1).c_str());
        writer.Key("OrderRef");
        writer.String(g2u(local_pOrder.OrderRef).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pOrder.UserID).c_str());
        writer.Key("OrderPriceType");
        writer.Int(local_pOrder.OrderPriceType);
        writer.Key("Direction");
        writer.Int(local_pOrder.Direction);
        writer.Key("CombOffsetFlag");
        writer.String(g2u(local_pOrder.CombOffsetFlag).c_str());
        writer.Key("CombHedgeFlag");
        writer.String(g2u(local_pOrder.CombHedgeFlag).c_str());
        writer.Key("LimitPrice");
        writer.Double(local_pOrder.LimitPrice);
        writer.Key("VolumeTotalOriginal");
        writer.Int(local_pOrder.VolumeTotalOriginal);
        writer.Key("TimeCondition");
        writer.Int(local_pOrder.TimeCondition);
        writer.Key("GTDDate");
        writer.String(g2u(local_pOrder.GTDDate).c_str());
        writer.Key("VolumeCondition");
        writer.Int(local_pOrder.VolumeCondition);
        writer.Key("MinVolume");
        writer.Int(local_pOrder.MinVolume);
        writer.Key("ContingentCondition");
        writer.Int(local_pOrder.ContingentCondition);
        writer.Key("StopPrice");
        writer.Double(local_pOrder.StopPrice);
        writer.Key("ForceCloseReason");
        writer.Int(local_pOrder.ForceCloseReason);
        writer.Key("IsAutoSuspend");
        writer.Int(local_pOrder.IsAutoSuspend);
        writer.Key("BusinessUnit");
        writer.String(g2u(local_pOrder.BusinessUnit).c_str());
        writer.Key("RequestID");
        writer.Int(local_pOrder.RequestID);
        writer.Key("OrderLocalID");
        writer.String(g2u(local_pOrder.OrderLocalID).c_str());
        writer.Key("ExchangeID");
        writer.String(g2u(local_pOrder.ExchangeID).c_str());
        writer.Key("ParticipantID");
        writer.String(g2u(local_pOrder.ParticipantID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pOrder.ClientID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pOrder.reserve2).c_str());
        writer.Key("TraderID");
        writer.String(g2u(local_pOrder.TraderID).c_str());
        writer.Key("InstallID");
        writer.Int(local_pOrder.InstallID);
        writer.Key("OrderSubmitStatus");
        writer.Int(local_pOrder.OrderSubmitStatus);
        writer.Key("NotifySequence");
        writer.Int(local_pOrder.NotifySequence);
        writer.Key("TradingDay");
        writer.String(g2u(local_pOrder.TradingDay).c_str());
        writer.Key("SettlementID");
        writer.Int(local_pOrder.SettlementID);
        writer.Key("OrderSysID");
        writer.String(g2u(local_pOrder.OrderSysID).c_str());
        writer.Key("OrderSource");
        writer.Int(local_pOrder.OrderSource);
        writer.Key("OrderStatus");
        writer.Int(local_pOrder.OrderStatus);
        writer.Key("OrderType");
        writer.Int(local_pOrder.OrderType);
        writer.Key("VolumeTraded");
        writer.Int(local_pOrder.VolumeTraded);
        writer.Key("VolumeTotal");
        writer.Int(local_pOrder.VolumeTotal);
        writer.Key("InsertDate");
        writer.String(g2u(local_pOrder.InsertDate).c_str());
        writer.Key("InsertTime");
        writer.String(g2u(local_pOrder.InsertTime).c_str());
        writer.Key("ActiveTime");
        writer.String(g2u(local_pOrder.ActiveTime).c_str());
        writer.Key("SuspendTime");
        writer.String(g2u(local_pOrder.SuspendTime).c_str());
        writer.Key("UpdateTime");
        writer.String(g2u(local_pOrder.UpdateTime).c_str());
        writer.Key("CancelTime");
        writer.String(g2u(local_pOrder.CancelTime).c_str());
        writer.Key("ActiveTraderID");
        writer.String(g2u(local_pOrder.ActiveTraderID).c_str());
        writer.Key("ClearingPartID");
        writer.String(g2u(local_pOrder.ClearingPartID).c_str());
        writer.Key("SequenceNo");
        writer.Int(local_pOrder.SequenceNo);
        writer.Key("FrontID");
        writer.Int(local_pOrder.FrontID);
        writer.Key("SessionID");
        writer.Int(local_pOrder.SessionID);
        writer.Key("UserProductInfo");
        writer.String(g2u(local_pOrder.UserProductInfo).c_str());
        writer.Key("StatusMsg");
        writer.String(g2u(local_pOrder.StatusMsg).c_str());
        writer.Key("UserForceClose");
        writer.Int(local_pOrder.UserForceClose);
        writer.Key("ActiveUserID");
        writer.String(g2u(local_pOrder.ActiveUserID).c_str());
        writer.Key("BrokerOrderSeq");
        writer.Int(local_pOrder.BrokerOrderSeq);
        writer.Key("RelativeOrderSysID");
        writer.String(g2u(local_pOrder.RelativeOrderSysID).c_str());
        writer.Key("ZCETotalTradedVolume");
        writer.Int(local_pOrder.ZCETotalTradedVolume);
        writer.Key("IsSwapOrder");
        writer.Int(local_pOrder.IsSwapOrder);
        writer.Key("BranchID");
        writer.String(g2u(local_pOrder.BranchID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pOrder.InvestUnitID).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pOrder.AccountID).c_str());
        writer.Key("CurrencyID");
        writer.String(g2u(local_pOrder.CurrencyID).c_str());
        writer.Key("reserve3");
        writer.String(g2u(local_pOrder.reserve3).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pOrder.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pOrder.InstrumentID).c_str());
        writer.Key("ExchangeInstID");
        writer.String(g2u(local_pOrder.ExchangeInstID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pOrder.IPAddress).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRtnTrade(CThostFtdcTradeField * pTrade)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRtnTrade");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcTradeField local_pTrade = { 0 };
        if(pTrade)
        {
            memcpy(&local_pTrade, pTrade, sizeof(CThostFtdcTradeField));
        }
        writer.Key("pTrade");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pTrade.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pTrade.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pTrade.reserve1).c_str());
        writer.Key("OrderRef");
        writer.String(g2u(local_pTrade.OrderRef).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pTrade.UserID).c_str());
        writer.Key("ExchangeID");
        writer.String(g2u(local_pTrade.ExchangeID).c_str());
        writer.Key("TradeID");
        writer.String(g2u(local_pTrade.TradeID).c_str());
        writer.Key("Direction");
        writer.Int(local_pTrade.Direction);
        writer.Key("OrderSysID");
        writer.String(g2u(local_pTrade.OrderSysID).c_str());
        writer.Key("ParticipantID");
        writer.String(g2u(local_pTrade.ParticipantID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pTrade.ClientID).c_str());
        writer.Key("TradingRole");
        writer.Int(local_pTrade.TradingRole);
        writer.Key("reserve2");
        writer.String(g2u(local_pTrade.reserve2).c_str());
        writer.Key("OffsetFlag");
        writer.Int(local_pTrade.OffsetFlag);
        writer.Key("HedgeFlag");
        writer.Int(local_pTrade.HedgeFlag);
        writer.Key("Price");
        writer.Double(local_pTrade.Price);
        writer.Key("Volume");
        writer.Int(local_pTrade.Volume);
        writer.Key("TradeDate");
        writer.String(g2u(local_pTrade.TradeDate).c_str());
        writer.Key("TradeTime");
        writer.String(g2u(local_pTrade.TradeTime).c_str());
        writer.Key("TradeType");
        writer.Int(local_pTrade.TradeType);
        writer.Key("PriceSource");
        writer.Int(local_pTrade.PriceSource);
        writer.Key("TraderID");
        writer.String(g2u(local_pTrade.TraderID).c_str());
        writer.Key("OrderLocalID");
        writer.String(g2u(local_pTrade.OrderLocalID).c_str());
        writer.Key("ClearingPartID");
        writer.String(g2u(local_pTrade.ClearingPartID).c_str());
        writer.Key("BusinessUnit");
        writer.String(g2u(local_pTrade.BusinessUnit).c_str());
        writer.Key("SequenceNo");
        writer.Int(local_pTrade.SequenceNo);
        writer.Key("TradingDay");
        writer.String(g2u(local_pTrade.TradingDay).c_str());
        writer.Key("SettlementID");
        writer.Int(local_pTrade.SettlementID);
        writer.Key("BrokerOrderSeq");
        writer.Int(local_pTrade.BrokerOrderSeq);
        writer.Key("TradeSource");
        writer.Int(local_pTrade.TradeSource);
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pTrade.InvestUnitID).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pTrade.InstrumentID).c_str());
        writer.Key("ExchangeInstID");
        writer.String(g2u(local_pTrade.ExchangeInstID).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnErrRtnOrderInsert(CThostFtdcInputOrderField * pInputOrder, CThostFtdcRspInfoField * pRspInfo)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnErrRtnOrderInsert");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcInputOrderField local_pInputOrder = { 0 };
        if(pInputOrder)
        {
            memcpy(&local_pInputOrder, pInputOrder, sizeof(CThostFtdcInputOrderField));
        }
        writer.Key("pInputOrder");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pInputOrder.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pInputOrder.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pInputOrder.reserve1).c_str());
        writer.Key("OrderRef");
        writer.String(g2u(local_pInputOrder.OrderRef).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pInputOrder.UserID).c_str());
        writer.Key("OrderPriceType");
        writer.Int(local_pInputOrder.OrderPriceType);
        writer.Key("Direction");
        writer.Int(local_pInputOrder.Direction);
        writer.Key("CombOffsetFlag");
        writer.String(g2u(local_pInputOrder.CombOffsetFlag).c_str());
        writer.Key("CombHedgeFlag");
        writer.String(g2u(local_pInputOrder.CombHedgeFlag).c_str());
        writer.Key("LimitPrice");
        writer.Double(local_pInputOrder.LimitPrice);
        writer.Key("VolumeTotalOriginal");
        writer.Int(local_pInputOrder.VolumeTotalOriginal);
        writer.Key("TimeCondition");
        writer.Int(local_pInputOrder.TimeCondition);
        writer.Key("GTDDate");
        writer.String(g2u(local_pInputOrder.GTDDate).c_str());
        writer.Key("VolumeCondition");
        writer.Int(local_pInputOrder.VolumeCondition);
        writer.Key("MinVolume");
        writer.Int(local_pInputOrder.MinVolume);
        writer.Key("ContingentCondition");
        writer.Int(local_pInputOrder.ContingentCondition);
        writer.Key("StopPrice");
        writer.Double(local_pInputOrder.StopPrice);
        writer.Key("ForceCloseReason");
        writer.Int(local_pInputOrder.ForceCloseReason);
        writer.Key("IsAutoSuspend");
        writer.Int(local_pInputOrder.IsAutoSuspend);
        writer.Key("BusinessUnit");
        writer.String(g2u(local_pInputOrder.BusinessUnit).c_str());
        writer.Key("RequestID");
        writer.Int(local_pInputOrder.RequestID);
        writer.Key("UserForceClose");
        writer.Int(local_pInputOrder.UserForceClose);
        writer.Key("IsSwapOrder");
        writer.Int(local_pInputOrder.IsSwapOrder);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pInputOrder.ExchangeID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pInputOrder.InvestUnitID).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pInputOrder.AccountID).c_str());
        writer.Key("CurrencyID");
        writer.String(g2u(local_pInputOrder.CurrencyID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pInputOrder.ClientID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pInputOrder.reserve2).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pInputOrder.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pInputOrder.InstrumentID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pInputOrder.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnErrRtnOrderAction(CThostFtdcOrderActionField * pOrderAction, CThostFtdcRspInfoField * pRspInfo)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnErrRtnOrderAction");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcOrderActionField local_pOrderAction = { 0 };
        if(pOrderAction)
        {
            memcpy(&local_pOrderAction, pOrderAction, sizeof(CThostFtdcOrderActionField));
        }
        writer.Key("pOrderAction");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pOrderAction.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pOrderAction.InvestorID).c_str());
        writer.Key("OrderActionRef");
        writer.Int(local_pOrderAction.OrderActionRef);
        writer.Key("OrderRef");
        writer.String(g2u(local_pOrderAction.OrderRef).c_str());
        writer.Key("RequestID");
        writer.Int(local_pOrderAction.RequestID);
        writer.Key("FrontID");
        writer.Int(local_pOrderAction.FrontID);
        writer.Key("SessionID");
        writer.Int(local_pOrderAction.SessionID);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pOrderAction.ExchangeID).c_str());
        writer.Key("OrderSysID");
        writer.String(g2u(local_pOrderAction.OrderSysID).c_str());
        writer.Key("ActionFlag");
        writer.Int(local_pOrderAction.ActionFlag);
        writer.Key("LimitPrice");
        writer.Double(local_pOrderAction.LimitPrice);
        writer.Key("VolumeChange");
        writer.Int(local_pOrderAction.VolumeChange);
        writer.Key("ActionDate");
        writer.String(g2u(local_pOrderAction.ActionDate).c_str());
        writer.Key("ActionTime");
        writer.String(g2u(local_pOrderAction.ActionTime).c_str());
        writer.Key("TraderID");
        writer.String(g2u(local_pOrderAction.TraderID).c_str());
        writer.Key("InstallID");
        writer.Int(local_pOrderAction.InstallID);
        writer.Key("OrderLocalID");
        writer.String(g2u(local_pOrderAction.OrderLocalID).c_str());
        writer.Key("ActionLocalID");
        writer.String(g2u(local_pOrderAction.ActionLocalID).c_str());
        writer.Key("ParticipantID");
        writer.String(g2u(local_pOrderAction.ParticipantID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pOrderAction.ClientID).c_str());
        writer.Key("BusinessUnit");
        writer.String(g2u(local_pOrderAction.BusinessUnit).c_str());
        writer.Key("OrderActionStatus");
        writer.Int(local_pOrderAction.OrderActionStatus);
        writer.Key("UserID");
        writer.String(g2u(local_pOrderAction.UserID).c_str());
        writer.Key("StatusMsg");
        writer.String(g2u(local_pOrderAction.StatusMsg).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pOrderAction.reserve1).c_str());
        writer.Key("BranchID");
        writer.String(g2u(local_pOrderAction.BranchID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pOrderAction.InvestUnitID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pOrderAction.reserve2).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pOrderAction.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pOrderAction.InstrumentID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pOrderAction.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRtnInstrumentStatus(CThostFtdcInstrumentStatusField * pInstrumentStatus)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRtnInstrumentStatus");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcInstrumentStatusField local_pInstrumentStatus = { 0 };
        if(pInstrumentStatus)
        {
            memcpy(&local_pInstrumentStatus, pInstrumentStatus, sizeof(CThostFtdcInstrumentStatusField));
        }
        writer.Key("pInstrumentStatus");
        writer.StartObject();
        writer.Key("ExchangeID");
        writer.String(g2u(local_pInstrumentStatus.ExchangeID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pInstrumentStatus.reserve1).c_str());
        writer.Key("SettlementGroupID");
        writer.String(g2u(local_pInstrumentStatus.SettlementGroupID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pInstrumentStatus.reserve2).c_str());
        writer.Key("InstrumentStatus");
        writer.Int(local_pInstrumentStatus.InstrumentStatus);
        writer.Key("TradingSegmentSN");
        writer.Int(local_pInstrumentStatus.TradingSegmentSN);
        writer.Key("EnterTime");
        writer.String(g2u(local_pInstrumentStatus.EnterTime).c_str());
        writer.Key("EnterReason");
        writer.Int(local_pInstrumentStatus.EnterReason);
        writer.Key("ExchangeInstID");
        writer.String(g2u(local_pInstrumentStatus.ExchangeInstID).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pInstrumentStatus.InstrumentID).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRtnBulletin(CThostFtdcBulletinField * pBulletin)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRtnBulletin");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcBulletinField local_pBulletin = { 0 };
        if(pBulletin)
        {
            memcpy(&local_pBulletin, pBulletin, sizeof(CThostFtdcBulletinField));
        }
        writer.Key("pBulletin");
        writer.StartObject();
        writer.Key("ExchangeID");
        writer.String(g2u(local_pBulletin.ExchangeID).c_str());
        writer.Key("TradingDay");
        writer.String(g2u(local_pBulletin.TradingDay).c_str());
        writer.Key("BulletinID");
        writer.Int(local_pBulletin.BulletinID);
        writer.Key("SequenceNo");
        writer.Int(local_pBulletin.SequenceNo);
        writer.Key("NewsType");
        writer.String(g2u(local_pBulletin.NewsType).c_str());
        writer.Key("NewsUrgency");
        writer.Int(local_pBulletin.NewsUrgency);
        writer.Key("SendTime");
        writer.String(g2u(local_pBulletin.SendTime).c_str());
        writer.Key("Abstract");
        writer.String(g2u(local_pBulletin.Abstract).c_str());
        writer.Key("ComeFrom");
        writer.String(g2u(local_pBulletin.ComeFrom).c_str());
        writer.Key("Content");
        writer.String(g2u(local_pBulletin.Content).c_str());
        writer.Key("URLLink");
        writer.String(g2u(local_pBulletin.URLLink).c_str());
        writer.Key("MarketID");
        writer.String(g2u(local_pBulletin.MarketID).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRtnTradingNotice(CThostFtdcTradingNoticeInfoField * pTradingNoticeInfo)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRtnTradingNotice");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcTradingNoticeInfoField local_pTradingNoticeInfo = { 0 };
        if(pTradingNoticeInfo)
        {
            memcpy(&local_pTradingNoticeInfo, pTradingNoticeInfo, sizeof(CThostFtdcTradingNoticeInfoField));
        }
        writer.Key("pTradingNoticeInfo");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pTradingNoticeInfo.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pTradingNoticeInfo.InvestorID).c_str());
        writer.Key("SendTime");
        writer.String(g2u(local_pTradingNoticeInfo.SendTime).c_str());
        writer.Key("FieldContent");
        writer.String(g2u(local_pTradingNoticeInfo.FieldContent).c_str());
        writer.Key("SequenceSeries");
        writer.Int(local_pTradingNoticeInfo.SequenceSeries);
        writer.Key("SequenceNo");
        writer.Int(local_pTradingNoticeInfo.SequenceNo);
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pTradingNoticeInfo.InvestUnitID).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRtnErrorConditionalOrder(CThostFtdcErrorConditionalOrderField * pErrorConditionalOrder)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRtnErrorConditionalOrder");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcErrorConditionalOrderField local_pErrorConditionalOrder = { 0 };
        if(pErrorConditionalOrder)
        {
            memcpy(&local_pErrorConditionalOrder, pErrorConditionalOrder, sizeof(CThostFtdcErrorConditionalOrderField));
        }
        writer.Key("pErrorConditionalOrder");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pErrorConditionalOrder.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pErrorConditionalOrder.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pErrorConditionalOrder.reserve1).c_str());
        writer.Key("OrderRef");
        writer.String(g2u(local_pErrorConditionalOrder.OrderRef).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pErrorConditionalOrder.UserID).c_str());
        writer.Key("OrderPriceType");
        writer.Int(local_pErrorConditionalOrder.OrderPriceType);
        writer.Key("Direction");
        writer.Int(local_pErrorConditionalOrder.Direction);
        writer.Key("CombOffsetFlag");
        writer.String(g2u(local_pErrorConditionalOrder.CombOffsetFlag).c_str());
        writer.Key("CombHedgeFlag");
        writer.String(g2u(local_pErrorConditionalOrder.CombHedgeFlag).c_str());
        writer.Key("LimitPrice");
        writer.Double(local_pErrorConditionalOrder.LimitPrice);
        writer.Key("VolumeTotalOriginal");
        writer.Int(local_pErrorConditionalOrder.VolumeTotalOriginal);
        writer.Key("TimeCondition");
        writer.Int(local_pErrorConditionalOrder.TimeCondition);
        writer.Key("GTDDate");
        writer.String(g2u(local_pErrorConditionalOrder.GTDDate).c_str());
        writer.Key("VolumeCondition");
        writer.Int(local_pErrorConditionalOrder.VolumeCondition);
        writer.Key("MinVolume");
        writer.Int(local_pErrorConditionalOrder.MinVolume);
        writer.Key("ContingentCondition");
        writer.Int(local_pErrorConditionalOrder.ContingentCondition);
        writer.Key("StopPrice");
        writer.Double(local_pErrorConditionalOrder.StopPrice);
        writer.Key("ForceCloseReason");
        writer.Int(local_pErrorConditionalOrder.ForceCloseReason);
        writer.Key("IsAutoSuspend");
        writer.Int(local_pErrorConditionalOrder.IsAutoSuspend);
        writer.Key("BusinessUnit");
        writer.String(g2u(local_pErrorConditionalOrder.BusinessUnit).c_str());
        writer.Key("RequestID");
        writer.Int(local_pErrorConditionalOrder.RequestID);
        writer.Key("OrderLocalID");
        writer.String(g2u(local_pErrorConditionalOrder.OrderLocalID).c_str());
        writer.Key("ExchangeID");
        writer.String(g2u(local_pErrorConditionalOrder.ExchangeID).c_str());
        writer.Key("ParticipantID");
        writer.String(g2u(local_pErrorConditionalOrder.ParticipantID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pErrorConditionalOrder.ClientID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pErrorConditionalOrder.reserve2).c_str());
        writer.Key("TraderID");
        writer.String(g2u(local_pErrorConditionalOrder.TraderID).c_str());
        writer.Key("InstallID");
        writer.Int(local_pErrorConditionalOrder.InstallID);
        writer.Key("OrderSubmitStatus");
        writer.Int(local_pErrorConditionalOrder.OrderSubmitStatus);
        writer.Key("NotifySequence");
        writer.Int(local_pErrorConditionalOrder.NotifySequence);
        writer.Key("TradingDay");
        writer.String(g2u(local_pErrorConditionalOrder.TradingDay).c_str());
        writer.Key("SettlementID");
        writer.Int(local_pErrorConditionalOrder.SettlementID);
        writer.Key("OrderSysID");
        writer.String(g2u(local_pErrorConditionalOrder.OrderSysID).c_str());
        writer.Key("OrderSource");
        writer.Int(local_pErrorConditionalOrder.OrderSource);
        writer.Key("OrderStatus");
        writer.Int(local_pErrorConditionalOrder.OrderStatus);
        writer.Key("OrderType");
        writer.Int(local_pErrorConditionalOrder.OrderType);
        writer.Key("VolumeTraded");
        writer.Int(local_pErrorConditionalOrder.VolumeTraded);
        writer.Key("VolumeTotal");
        writer.Int(local_pErrorConditionalOrder.VolumeTotal);
        writer.Key("InsertDate");
        writer.String(g2u(local_pErrorConditionalOrder.InsertDate).c_str());
        writer.Key("InsertTime");
        writer.String(g2u(local_pErrorConditionalOrder.InsertTime).c_str());
        writer.Key("ActiveTime");
        writer.String(g2u(local_pErrorConditionalOrder.ActiveTime).c_str());
        writer.Key("SuspendTime");
        writer.String(g2u(local_pErrorConditionalOrder.SuspendTime).c_str());
        writer.Key("UpdateTime");
        writer.String(g2u(local_pErrorConditionalOrder.UpdateTime).c_str());
        writer.Key("CancelTime");
        writer.String(g2u(local_pErrorConditionalOrder.CancelTime).c_str());
        writer.Key("ActiveTraderID");
        writer.String(g2u(local_pErrorConditionalOrder.ActiveTraderID).c_str());
        writer.Key("ClearingPartID");
        writer.String(g2u(local_pErrorConditionalOrder.ClearingPartID).c_str());
        writer.Key("SequenceNo");
        writer.Int(local_pErrorConditionalOrder.SequenceNo);
        writer.Key("FrontID");
        writer.Int(local_pErrorConditionalOrder.FrontID);
        writer.Key("SessionID");
        writer.Int(local_pErrorConditionalOrder.SessionID);
        writer.Key("UserProductInfo");
        writer.String(g2u(local_pErrorConditionalOrder.UserProductInfo).c_str());
        writer.Key("StatusMsg");
        writer.String(g2u(local_pErrorConditionalOrder.StatusMsg).c_str());
        writer.Key("UserForceClose");
        writer.Int(local_pErrorConditionalOrder.UserForceClose);
        writer.Key("ActiveUserID");
        writer.String(g2u(local_pErrorConditionalOrder.ActiveUserID).c_str());
        writer.Key("BrokerOrderSeq");
        writer.Int(local_pErrorConditionalOrder.BrokerOrderSeq);
        writer.Key("RelativeOrderSysID");
        writer.String(g2u(local_pErrorConditionalOrder.RelativeOrderSysID).c_str());
        writer.Key("ZCETotalTradedVolume");
        writer.Int(local_pErrorConditionalOrder.ZCETotalTradedVolume);
        writer.Key("ErrorID");
        writer.Int(local_pErrorConditionalOrder.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pErrorConditionalOrder.ErrorMsg).c_str());
        writer.Key("IsSwapOrder");
        writer.Int(local_pErrorConditionalOrder.IsSwapOrder);
        writer.Key("BranchID");
        writer.String(g2u(local_pErrorConditionalOrder.BranchID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pErrorConditionalOrder.InvestUnitID).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pErrorConditionalOrder.AccountID).c_str());
        writer.Key("CurrencyID");
        writer.String(g2u(local_pErrorConditionalOrder.CurrencyID).c_str());
        writer.Key("reserve3");
        writer.String(g2u(local_pErrorConditionalOrder.reserve3).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pErrorConditionalOrder.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pErrorConditionalOrder.InstrumentID).c_str());
        writer.Key("ExchangeInstID");
        writer.String(g2u(local_pErrorConditionalOrder.ExchangeInstID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pErrorConditionalOrder.IPAddress).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRtnExecOrder(CThostFtdcExecOrderField * pExecOrder)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRtnExecOrder");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcExecOrderField local_pExecOrder = { 0 };
        if(pExecOrder)
        {
            memcpy(&local_pExecOrder, pExecOrder, sizeof(CThostFtdcExecOrderField));
        }
        writer.Key("pExecOrder");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pExecOrder.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pExecOrder.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pExecOrder.reserve1).c_str());
        writer.Key("ExecOrderRef");
        writer.String(g2u(local_pExecOrder.ExecOrderRef).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pExecOrder.UserID).c_str());
        writer.Key("Volume");
        writer.Int(local_pExecOrder.Volume);
        writer.Key("RequestID");
        writer.Int(local_pExecOrder.RequestID);
        writer.Key("BusinessUnit");
        writer.String(g2u(local_pExecOrder.BusinessUnit).c_str());
        writer.Key("OffsetFlag");
        writer.Int(local_pExecOrder.OffsetFlag);
        writer.Key("HedgeFlag");
        writer.Int(local_pExecOrder.HedgeFlag);
        writer.Key("ActionType");
        writer.Int(local_pExecOrder.ActionType);
        writer.Key("PosiDirection");
        writer.Int(local_pExecOrder.PosiDirection);
        writer.Key("ReservePositionFlag");
        writer.Int(local_pExecOrder.ReservePositionFlag);
        writer.Key("CloseFlag");
        writer.Int(local_pExecOrder.CloseFlag);
        writer.Key("ExecOrderLocalID");
        writer.String(g2u(local_pExecOrder.ExecOrderLocalID).c_str());
        writer.Key("ExchangeID");
        writer.String(g2u(local_pExecOrder.ExchangeID).c_str());
        writer.Key("ParticipantID");
        writer.String(g2u(local_pExecOrder.ParticipantID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pExecOrder.ClientID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pExecOrder.reserve2).c_str());
        writer.Key("TraderID");
        writer.String(g2u(local_pExecOrder.TraderID).c_str());
        writer.Key("InstallID");
        writer.Int(local_pExecOrder.InstallID);
        writer.Key("OrderSubmitStatus");
        writer.Int(local_pExecOrder.OrderSubmitStatus);
        writer.Key("NotifySequence");
        writer.Int(local_pExecOrder.NotifySequence);
        writer.Key("TradingDay");
        writer.String(g2u(local_pExecOrder.TradingDay).c_str());
        writer.Key("SettlementID");
        writer.Int(local_pExecOrder.SettlementID);
        writer.Key("ExecOrderSysID");
        writer.String(g2u(local_pExecOrder.ExecOrderSysID).c_str());
        writer.Key("InsertDate");
        writer.String(g2u(local_pExecOrder.InsertDate).c_str());
        writer.Key("InsertTime");
        writer.String(g2u(local_pExecOrder.InsertTime).c_str());
        writer.Key("CancelTime");
        writer.String(g2u(local_pExecOrder.CancelTime).c_str());
        writer.Key("ExecResult");
        writer.Int(local_pExecOrder.ExecResult);
        writer.Key("ClearingPartID");
        writer.String(g2u(local_pExecOrder.ClearingPartID).c_str());
        writer.Key("SequenceNo");
        writer.Int(local_pExecOrder.SequenceNo);
        writer.Key("FrontID");
        writer.Int(local_pExecOrder.FrontID);
        writer.Key("SessionID");
        writer.Int(local_pExecOrder.SessionID);
        writer.Key("UserProductInfo");
        writer.String(g2u(local_pExecOrder.UserProductInfo).c_str());
        writer.Key("StatusMsg");
        writer.String(g2u(local_pExecOrder.StatusMsg).c_str());
        writer.Key("ActiveUserID");
        writer.String(g2u(local_pExecOrder.ActiveUserID).c_str());
        writer.Key("BrokerExecOrderSeq");
        writer.Int(local_pExecOrder.BrokerExecOrderSeq);
        writer.Key("BranchID");
        writer.String(g2u(local_pExecOrder.BranchID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pExecOrder.InvestUnitID).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pExecOrder.AccountID).c_str());
        writer.Key("CurrencyID");
        writer.String(g2u(local_pExecOrder.CurrencyID).c_str());
        writer.Key("reserve3");
        writer.String(g2u(local_pExecOrder.reserve3).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pExecOrder.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pExecOrder.InstrumentID).c_str());
        writer.Key("ExchangeInstID");
        writer.String(g2u(local_pExecOrder.ExchangeInstID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pExecOrder.IPAddress).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnErrRtnExecOrderInsert(CThostFtdcInputExecOrderField * pInputExecOrder, CThostFtdcRspInfoField * pRspInfo)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnErrRtnExecOrderInsert");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcInputExecOrderField local_pInputExecOrder = { 0 };
        if(pInputExecOrder)
        {
            memcpy(&local_pInputExecOrder, pInputExecOrder, sizeof(CThostFtdcInputExecOrderField));
        }
        writer.Key("pInputExecOrder");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pInputExecOrder.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pInputExecOrder.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pInputExecOrder.reserve1).c_str());
        writer.Key("ExecOrderRef");
        writer.String(g2u(local_pInputExecOrder.ExecOrderRef).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pInputExecOrder.UserID).c_str());
        writer.Key("Volume");
        writer.Int(local_pInputExecOrder.Volume);
        writer.Key("RequestID");
        writer.Int(local_pInputExecOrder.RequestID);
        writer.Key("BusinessUnit");
        writer.String(g2u(local_pInputExecOrder.BusinessUnit).c_str());
        writer.Key("OffsetFlag");
        writer.Int(local_pInputExecOrder.OffsetFlag);
        writer.Key("HedgeFlag");
        writer.Int(local_pInputExecOrder.HedgeFlag);
        writer.Key("ActionType");
        writer.Int(local_pInputExecOrder.ActionType);
        writer.Key("PosiDirection");
        writer.Int(local_pInputExecOrder.PosiDirection);
        writer.Key("ReservePositionFlag");
        writer.Int(local_pInputExecOrder.ReservePositionFlag);
        writer.Key("CloseFlag");
        writer.Int(local_pInputExecOrder.CloseFlag);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pInputExecOrder.ExchangeID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pInputExecOrder.InvestUnitID).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pInputExecOrder.AccountID).c_str());
        writer.Key("CurrencyID");
        writer.String(g2u(local_pInputExecOrder.CurrencyID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pInputExecOrder.ClientID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pInputExecOrder.reserve2).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pInputExecOrder.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pInputExecOrder.InstrumentID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pInputExecOrder.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnErrRtnExecOrderAction(CThostFtdcExecOrderActionField * pExecOrderAction, CThostFtdcRspInfoField * pRspInfo)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnErrRtnExecOrderAction");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcExecOrderActionField local_pExecOrderAction = { 0 };
        if(pExecOrderAction)
        {
            memcpy(&local_pExecOrderAction, pExecOrderAction, sizeof(CThostFtdcExecOrderActionField));
        }
        writer.Key("pExecOrderAction");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pExecOrderAction.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pExecOrderAction.InvestorID).c_str());
        writer.Key("ExecOrderActionRef");
        writer.Int(local_pExecOrderAction.ExecOrderActionRef);
        writer.Key("ExecOrderRef");
        writer.String(g2u(local_pExecOrderAction.ExecOrderRef).c_str());
        writer.Key("RequestID");
        writer.Int(local_pExecOrderAction.RequestID);
        writer.Key("FrontID");
        writer.Int(local_pExecOrderAction.FrontID);
        writer.Key("SessionID");
        writer.Int(local_pExecOrderAction.SessionID);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pExecOrderAction.ExchangeID).c_str());
        writer.Key("ExecOrderSysID");
        writer.String(g2u(local_pExecOrderAction.ExecOrderSysID).c_str());
        writer.Key("ActionFlag");
        writer.Int(local_pExecOrderAction.ActionFlag);
        writer.Key("ActionDate");
        writer.String(g2u(local_pExecOrderAction.ActionDate).c_str());
        writer.Key("ActionTime");
        writer.String(g2u(local_pExecOrderAction.ActionTime).c_str());
        writer.Key("TraderID");
        writer.String(g2u(local_pExecOrderAction.TraderID).c_str());
        writer.Key("InstallID");
        writer.Int(local_pExecOrderAction.InstallID);
        writer.Key("ExecOrderLocalID");
        writer.String(g2u(local_pExecOrderAction.ExecOrderLocalID).c_str());
        writer.Key("ActionLocalID");
        writer.String(g2u(local_pExecOrderAction.ActionLocalID).c_str());
        writer.Key("ParticipantID");
        writer.String(g2u(local_pExecOrderAction.ParticipantID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pExecOrderAction.ClientID).c_str());
        writer.Key("BusinessUnit");
        writer.String(g2u(local_pExecOrderAction.BusinessUnit).c_str());
        writer.Key("OrderActionStatus");
        writer.Int(local_pExecOrderAction.OrderActionStatus);
        writer.Key("UserID");
        writer.String(g2u(local_pExecOrderAction.UserID).c_str());
        writer.Key("ActionType");
        writer.Int(local_pExecOrderAction.ActionType);
        writer.Key("StatusMsg");
        writer.String(g2u(local_pExecOrderAction.StatusMsg).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pExecOrderAction.reserve1).c_str());
        writer.Key("BranchID");
        writer.String(g2u(local_pExecOrderAction.BranchID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pExecOrderAction.InvestUnitID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pExecOrderAction.reserve2).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pExecOrderAction.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pExecOrderAction.InstrumentID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pExecOrderAction.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnErrRtnForQuoteInsert(CThostFtdcInputForQuoteField * pInputForQuote, CThostFtdcRspInfoField * pRspInfo)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnErrRtnForQuoteInsert");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcInputForQuoteField local_pInputForQuote = { 0 };
        if(pInputForQuote)
        {
            memcpy(&local_pInputForQuote, pInputForQuote, sizeof(CThostFtdcInputForQuoteField));
        }
        writer.Key("pInputForQuote");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pInputForQuote.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pInputForQuote.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pInputForQuote.reserve1).c_str());
        writer.Key("ForQuoteRef");
        writer.String(g2u(local_pInputForQuote.ForQuoteRef).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pInputForQuote.UserID).c_str());
        writer.Key("ExchangeID");
        writer.String(g2u(local_pInputForQuote.ExchangeID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pInputForQuote.InvestUnitID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pInputForQuote.reserve2).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pInputForQuote.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pInputForQuote.InstrumentID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pInputForQuote.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRtnQuote(CThostFtdcQuoteField * pQuote)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRtnQuote");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcQuoteField local_pQuote = { 0 };
        if(pQuote)
        {
            memcpy(&local_pQuote, pQuote, sizeof(CThostFtdcQuoteField));
        }
        writer.Key("pQuote");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pQuote.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pQuote.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pQuote.reserve1).c_str());
        writer.Key("QuoteRef");
        writer.String(g2u(local_pQuote.QuoteRef).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pQuote.UserID).c_str());
        writer.Key("AskPrice");
        writer.Double(local_pQuote.AskPrice);
        writer.Key("BidPrice");
        writer.Double(local_pQuote.BidPrice);
        writer.Key("AskVolume");
        writer.Int(local_pQuote.AskVolume);
        writer.Key("BidVolume");
        writer.Int(local_pQuote.BidVolume);
        writer.Key("RequestID");
        writer.Int(local_pQuote.RequestID);
        writer.Key("BusinessUnit");
        writer.String(g2u(local_pQuote.BusinessUnit).c_str());
        writer.Key("AskOffsetFlag");
        writer.Int(local_pQuote.AskOffsetFlag);
        writer.Key("BidOffsetFlag");
        writer.Int(local_pQuote.BidOffsetFlag);
        writer.Key("AskHedgeFlag");
        writer.Int(local_pQuote.AskHedgeFlag);
        writer.Key("BidHedgeFlag");
        writer.Int(local_pQuote.BidHedgeFlag);
        writer.Key("QuoteLocalID");
        writer.String(g2u(local_pQuote.QuoteLocalID).c_str());
        writer.Key("ExchangeID");
        writer.String(g2u(local_pQuote.ExchangeID).c_str());
        writer.Key("ParticipantID");
        writer.String(g2u(local_pQuote.ParticipantID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pQuote.ClientID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pQuote.reserve2).c_str());
        writer.Key("TraderID");
        writer.String(g2u(local_pQuote.TraderID).c_str());
        writer.Key("InstallID");
        writer.Int(local_pQuote.InstallID);
        writer.Key("NotifySequence");
        writer.Int(local_pQuote.NotifySequence);
        writer.Key("OrderSubmitStatus");
        writer.Int(local_pQuote.OrderSubmitStatus);
        writer.Key("TradingDay");
        writer.String(g2u(local_pQuote.TradingDay).c_str());
        writer.Key("SettlementID");
        writer.Int(local_pQuote.SettlementID);
        writer.Key("QuoteSysID");
        writer.String(g2u(local_pQuote.QuoteSysID).c_str());
        writer.Key("InsertDate");
        writer.String(g2u(local_pQuote.InsertDate).c_str());
        writer.Key("InsertTime");
        writer.String(g2u(local_pQuote.InsertTime).c_str());
        writer.Key("CancelTime");
        writer.String(g2u(local_pQuote.CancelTime).c_str());
        writer.Key("QuoteStatus");
        writer.Int(local_pQuote.QuoteStatus);
        writer.Key("ClearingPartID");
        writer.String(g2u(local_pQuote.ClearingPartID).c_str());
        writer.Key("SequenceNo");
        writer.Int(local_pQuote.SequenceNo);
        writer.Key("AskOrderSysID");
        writer.String(g2u(local_pQuote.AskOrderSysID).c_str());
        writer.Key("BidOrderSysID");
        writer.String(g2u(local_pQuote.BidOrderSysID).c_str());
        writer.Key("FrontID");
        writer.Int(local_pQuote.FrontID);
        writer.Key("SessionID");
        writer.Int(local_pQuote.SessionID);
        writer.Key("UserProductInfo");
        writer.String(g2u(local_pQuote.UserProductInfo).c_str());
        writer.Key("StatusMsg");
        writer.String(g2u(local_pQuote.StatusMsg).c_str());
        writer.Key("ActiveUserID");
        writer.String(g2u(local_pQuote.ActiveUserID).c_str());
        writer.Key("BrokerQuoteSeq");
        writer.Int(local_pQuote.BrokerQuoteSeq);
        writer.Key("AskOrderRef");
        writer.String(g2u(local_pQuote.AskOrderRef).c_str());
        writer.Key("BidOrderRef");
        writer.String(g2u(local_pQuote.BidOrderRef).c_str());
        writer.Key("ForQuoteSysID");
        writer.String(g2u(local_pQuote.ForQuoteSysID).c_str());
        writer.Key("BranchID");
        writer.String(g2u(local_pQuote.BranchID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pQuote.InvestUnitID).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pQuote.AccountID).c_str());
        writer.Key("CurrencyID");
        writer.String(g2u(local_pQuote.CurrencyID).c_str());
        writer.Key("reserve3");
        writer.String(g2u(local_pQuote.reserve3).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pQuote.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pQuote.InstrumentID).c_str());
        writer.Key("ExchangeInstID");
        writer.String(g2u(local_pQuote.ExchangeInstID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pQuote.IPAddress).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnErrRtnQuoteInsert(CThostFtdcInputQuoteField * pInputQuote, CThostFtdcRspInfoField * pRspInfo)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnErrRtnQuoteInsert");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcInputQuoteField local_pInputQuote = { 0 };
        if(pInputQuote)
        {
            memcpy(&local_pInputQuote, pInputQuote, sizeof(CThostFtdcInputQuoteField));
        }
        writer.Key("pInputQuote");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pInputQuote.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pInputQuote.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pInputQuote.reserve1).c_str());
        writer.Key("QuoteRef");
        writer.String(g2u(local_pInputQuote.QuoteRef).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pInputQuote.UserID).c_str());
        writer.Key("AskPrice");
        writer.Double(local_pInputQuote.AskPrice);
        writer.Key("BidPrice");
        writer.Double(local_pInputQuote.BidPrice);
        writer.Key("AskVolume");
        writer.Int(local_pInputQuote.AskVolume);
        writer.Key("BidVolume");
        writer.Int(local_pInputQuote.BidVolume);
        writer.Key("RequestID");
        writer.Int(local_pInputQuote.RequestID);
        writer.Key("BusinessUnit");
        writer.String(g2u(local_pInputQuote.BusinessUnit).c_str());
        writer.Key("AskOffsetFlag");
        writer.Int(local_pInputQuote.AskOffsetFlag);
        writer.Key("BidOffsetFlag");
        writer.Int(local_pInputQuote.BidOffsetFlag);
        writer.Key("AskHedgeFlag");
        writer.Int(local_pInputQuote.AskHedgeFlag);
        writer.Key("BidHedgeFlag");
        writer.Int(local_pInputQuote.BidHedgeFlag);
        writer.Key("AskOrderRef");
        writer.String(g2u(local_pInputQuote.AskOrderRef).c_str());
        writer.Key("BidOrderRef");
        writer.String(g2u(local_pInputQuote.BidOrderRef).c_str());
        writer.Key("ForQuoteSysID");
        writer.String(g2u(local_pInputQuote.ForQuoteSysID).c_str());
        writer.Key("ExchangeID");
        writer.String(g2u(local_pInputQuote.ExchangeID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pInputQuote.InvestUnitID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pInputQuote.ClientID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pInputQuote.reserve2).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pInputQuote.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pInputQuote.InstrumentID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pInputQuote.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnErrRtnQuoteAction(CThostFtdcQuoteActionField * pQuoteAction, CThostFtdcRspInfoField * pRspInfo)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnErrRtnQuoteAction");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcQuoteActionField local_pQuoteAction = { 0 };
        if(pQuoteAction)
        {
            memcpy(&local_pQuoteAction, pQuoteAction, sizeof(CThostFtdcQuoteActionField));
        }
        writer.Key("pQuoteAction");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pQuoteAction.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pQuoteAction.InvestorID).c_str());
        writer.Key("QuoteActionRef");
        writer.Int(local_pQuoteAction.QuoteActionRef);
        writer.Key("QuoteRef");
        writer.String(g2u(local_pQuoteAction.QuoteRef).c_str());
        writer.Key("RequestID");
        writer.Int(local_pQuoteAction.RequestID);
        writer.Key("FrontID");
        writer.Int(local_pQuoteAction.FrontID);
        writer.Key("SessionID");
        writer.Int(local_pQuoteAction.SessionID);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pQuoteAction.ExchangeID).c_str());
        writer.Key("QuoteSysID");
        writer.String(g2u(local_pQuoteAction.QuoteSysID).c_str());
        writer.Key("ActionFlag");
        writer.Int(local_pQuoteAction.ActionFlag);
        writer.Key("ActionDate");
        writer.String(g2u(local_pQuoteAction.ActionDate).c_str());
        writer.Key("ActionTime");
        writer.String(g2u(local_pQuoteAction.ActionTime).c_str());
        writer.Key("TraderID");
        writer.String(g2u(local_pQuoteAction.TraderID).c_str());
        writer.Key("InstallID");
        writer.Int(local_pQuoteAction.InstallID);
        writer.Key("QuoteLocalID");
        writer.String(g2u(local_pQuoteAction.QuoteLocalID).c_str());
        writer.Key("ActionLocalID");
        writer.String(g2u(local_pQuoteAction.ActionLocalID).c_str());
        writer.Key("ParticipantID");
        writer.String(g2u(local_pQuoteAction.ParticipantID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pQuoteAction.ClientID).c_str());
        writer.Key("BusinessUnit");
        writer.String(g2u(local_pQuoteAction.BusinessUnit).c_str());
        writer.Key("OrderActionStatus");
        writer.Int(local_pQuoteAction.OrderActionStatus);
        writer.Key("UserID");
        writer.String(g2u(local_pQuoteAction.UserID).c_str());
        writer.Key("StatusMsg");
        writer.String(g2u(local_pQuoteAction.StatusMsg).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pQuoteAction.reserve1).c_str());
        writer.Key("BranchID");
        writer.String(g2u(local_pQuoteAction.BranchID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pQuoteAction.InvestUnitID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pQuoteAction.reserve2).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pQuoteAction.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pQuoteAction.InstrumentID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pQuoteAction.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRtnForQuoteRsp(CThostFtdcForQuoteRspField * pForQuoteRsp)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRtnForQuoteRsp");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcForQuoteRspField local_pForQuoteRsp = { 0 };
        if(pForQuoteRsp)
        {
            memcpy(&local_pForQuoteRsp, pForQuoteRsp, sizeof(CThostFtdcForQuoteRspField));
        }
        writer.Key("pForQuoteRsp");
        writer.StartObject();
        writer.Key("TradingDay");
        writer.String(g2u(local_pForQuoteRsp.TradingDay).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pForQuoteRsp.reserve1).c_str());
        writer.Key("ForQuoteSysID");
        writer.String(g2u(local_pForQuoteRsp.ForQuoteSysID).c_str());
        writer.Key("ForQuoteTime");
        writer.String(g2u(local_pForQuoteRsp.ForQuoteTime).c_str());
        writer.Key("ActionDay");
        writer.String(g2u(local_pForQuoteRsp.ActionDay).c_str());
        writer.Key("ExchangeID");
        writer.String(g2u(local_pForQuoteRsp.ExchangeID).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pForQuoteRsp.InstrumentID).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRtnCFMMCTradingAccountToken(CThostFtdcCFMMCTradingAccountTokenField * pCFMMCTradingAccountToken)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRtnCFMMCTradingAccountToken");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcCFMMCTradingAccountTokenField local_pCFMMCTradingAccountToken = { 0 };
        if(pCFMMCTradingAccountToken)
        {
            memcpy(&local_pCFMMCTradingAccountToken, pCFMMCTradingAccountToken, sizeof(CThostFtdcCFMMCTradingAccountTokenField));
        }
        writer.Key("pCFMMCTradingAccountToken");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pCFMMCTradingAccountToken.BrokerID).c_str());
        writer.Key("ParticipantID");
        writer.String(g2u(local_pCFMMCTradingAccountToken.ParticipantID).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pCFMMCTradingAccountToken.AccountID).c_str());
        writer.Key("KeyID");
        writer.Int(local_pCFMMCTradingAccountToken.KeyID);
        writer.Key("Token");
        writer.String(g2u(local_pCFMMCTradingAccountToken.Token).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnErrRtnBatchOrderAction(CThostFtdcBatchOrderActionField * pBatchOrderAction, CThostFtdcRspInfoField * pRspInfo)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnErrRtnBatchOrderAction");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcBatchOrderActionField local_pBatchOrderAction = { 0 };
        if(pBatchOrderAction)
        {
            memcpy(&local_pBatchOrderAction, pBatchOrderAction, sizeof(CThostFtdcBatchOrderActionField));
        }
        writer.Key("pBatchOrderAction");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pBatchOrderAction.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pBatchOrderAction.InvestorID).c_str());
        writer.Key("OrderActionRef");
        writer.Int(local_pBatchOrderAction.OrderActionRef);
        writer.Key("RequestID");
        writer.Int(local_pBatchOrderAction.RequestID);
        writer.Key("FrontID");
        writer.Int(local_pBatchOrderAction.FrontID);
        writer.Key("SessionID");
        writer.Int(local_pBatchOrderAction.SessionID);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pBatchOrderAction.ExchangeID).c_str());
        writer.Key("ActionDate");
        writer.String(g2u(local_pBatchOrderAction.ActionDate).c_str());
        writer.Key("ActionTime");
        writer.String(g2u(local_pBatchOrderAction.ActionTime).c_str());
        writer.Key("TraderID");
        writer.String(g2u(local_pBatchOrderAction.TraderID).c_str());
        writer.Key("InstallID");
        writer.Int(local_pBatchOrderAction.InstallID);
        writer.Key("ActionLocalID");
        writer.String(g2u(local_pBatchOrderAction.ActionLocalID).c_str());
        writer.Key("ParticipantID");
        writer.String(g2u(local_pBatchOrderAction.ParticipantID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pBatchOrderAction.ClientID).c_str());
        writer.Key("BusinessUnit");
        writer.String(g2u(local_pBatchOrderAction.BusinessUnit).c_str());
        writer.Key("OrderActionStatus");
        writer.Int(local_pBatchOrderAction.OrderActionStatus);
        writer.Key("UserID");
        writer.String(g2u(local_pBatchOrderAction.UserID).c_str());
        writer.Key("StatusMsg");
        writer.String(g2u(local_pBatchOrderAction.StatusMsg).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pBatchOrderAction.InvestUnitID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pBatchOrderAction.reserve1).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pBatchOrderAction.MacAddress).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pBatchOrderAction.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRtnOptionSelfClose(CThostFtdcOptionSelfCloseField * pOptionSelfClose)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRtnOptionSelfClose");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcOptionSelfCloseField local_pOptionSelfClose = { 0 };
        if(pOptionSelfClose)
        {
            memcpy(&local_pOptionSelfClose, pOptionSelfClose, sizeof(CThostFtdcOptionSelfCloseField));
        }
        writer.Key("pOptionSelfClose");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pOptionSelfClose.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pOptionSelfClose.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pOptionSelfClose.reserve1).c_str());
        writer.Key("OptionSelfCloseRef");
        writer.String(g2u(local_pOptionSelfClose.OptionSelfCloseRef).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pOptionSelfClose.UserID).c_str());
        writer.Key("Volume");
        writer.Int(local_pOptionSelfClose.Volume);
        writer.Key("RequestID");
        writer.Int(local_pOptionSelfClose.RequestID);
        writer.Key("BusinessUnit");
        writer.String(g2u(local_pOptionSelfClose.BusinessUnit).c_str());
        writer.Key("HedgeFlag");
        writer.Int(local_pOptionSelfClose.HedgeFlag);
        writer.Key("OptSelfCloseFlag");
        writer.Int(local_pOptionSelfClose.OptSelfCloseFlag);
        writer.Key("OptionSelfCloseLocalID");
        writer.String(g2u(local_pOptionSelfClose.OptionSelfCloseLocalID).c_str());
        writer.Key("ExchangeID");
        writer.String(g2u(local_pOptionSelfClose.ExchangeID).c_str());
        writer.Key("ParticipantID");
        writer.String(g2u(local_pOptionSelfClose.ParticipantID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pOptionSelfClose.ClientID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pOptionSelfClose.reserve2).c_str());
        writer.Key("TraderID");
        writer.String(g2u(local_pOptionSelfClose.TraderID).c_str());
        writer.Key("InstallID");
        writer.Int(local_pOptionSelfClose.InstallID);
        writer.Key("OrderSubmitStatus");
        writer.Int(local_pOptionSelfClose.OrderSubmitStatus);
        writer.Key("NotifySequence");
        writer.Int(local_pOptionSelfClose.NotifySequence);
        writer.Key("TradingDay");
        writer.String(g2u(local_pOptionSelfClose.TradingDay).c_str());
        writer.Key("SettlementID");
        writer.Int(local_pOptionSelfClose.SettlementID);
        writer.Key("OptionSelfCloseSysID");
        writer.String(g2u(local_pOptionSelfClose.OptionSelfCloseSysID).c_str());
        writer.Key("InsertDate");
        writer.String(g2u(local_pOptionSelfClose.InsertDate).c_str());
        writer.Key("InsertTime");
        writer.String(g2u(local_pOptionSelfClose.InsertTime).c_str());
        writer.Key("CancelTime");
        writer.String(g2u(local_pOptionSelfClose.CancelTime).c_str());
        writer.Key("ExecResult");
        writer.Int(local_pOptionSelfClose.ExecResult);
        writer.Key("ClearingPartID");
        writer.String(g2u(local_pOptionSelfClose.ClearingPartID).c_str());
        writer.Key("SequenceNo");
        writer.Int(local_pOptionSelfClose.SequenceNo);
        writer.Key("FrontID");
        writer.Int(local_pOptionSelfClose.FrontID);
        writer.Key("SessionID");
        writer.Int(local_pOptionSelfClose.SessionID);
        writer.Key("UserProductInfo");
        writer.String(g2u(local_pOptionSelfClose.UserProductInfo).c_str());
        writer.Key("StatusMsg");
        writer.String(g2u(local_pOptionSelfClose.StatusMsg).c_str());
        writer.Key("ActiveUserID");
        writer.String(g2u(local_pOptionSelfClose.ActiveUserID).c_str());
        writer.Key("BrokerOptionSelfCloseSeq");
        writer.Int(local_pOptionSelfClose.BrokerOptionSelfCloseSeq);
        writer.Key("BranchID");
        writer.String(g2u(local_pOptionSelfClose.BranchID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pOptionSelfClose.InvestUnitID).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pOptionSelfClose.AccountID).c_str());
        writer.Key("CurrencyID");
        writer.String(g2u(local_pOptionSelfClose.CurrencyID).c_str());
        writer.Key("reserve3");
        writer.String(g2u(local_pOptionSelfClose.reserve3).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pOptionSelfClose.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pOptionSelfClose.InstrumentID).c_str());
        writer.Key("ExchangeInstID");
        writer.String(g2u(local_pOptionSelfClose.ExchangeInstID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pOptionSelfClose.IPAddress).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnErrRtnOptionSelfCloseInsert(CThostFtdcInputOptionSelfCloseField * pInputOptionSelfClose, CThostFtdcRspInfoField * pRspInfo)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnErrRtnOptionSelfCloseInsert");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcInputOptionSelfCloseField local_pInputOptionSelfClose = { 0 };
        if(pInputOptionSelfClose)
        {
            memcpy(&local_pInputOptionSelfClose, pInputOptionSelfClose, sizeof(CThostFtdcInputOptionSelfCloseField));
        }
        writer.Key("pInputOptionSelfClose");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pInputOptionSelfClose.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pInputOptionSelfClose.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pInputOptionSelfClose.reserve1).c_str());
        writer.Key("OptionSelfCloseRef");
        writer.String(g2u(local_pInputOptionSelfClose.OptionSelfCloseRef).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pInputOptionSelfClose.UserID).c_str());
        writer.Key("Volume");
        writer.Int(local_pInputOptionSelfClose.Volume);
        writer.Key("RequestID");
        writer.Int(local_pInputOptionSelfClose.RequestID);
        writer.Key("BusinessUnit");
        writer.String(g2u(local_pInputOptionSelfClose.BusinessUnit).c_str());
        writer.Key("HedgeFlag");
        writer.Int(local_pInputOptionSelfClose.HedgeFlag);
        writer.Key("OptSelfCloseFlag");
        writer.Int(local_pInputOptionSelfClose.OptSelfCloseFlag);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pInputOptionSelfClose.ExchangeID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pInputOptionSelfClose.InvestUnitID).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pInputOptionSelfClose.AccountID).c_str());
        writer.Key("CurrencyID");
        writer.String(g2u(local_pInputOptionSelfClose.CurrencyID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pInputOptionSelfClose.ClientID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pInputOptionSelfClose.reserve2).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pInputOptionSelfClose.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pInputOptionSelfClose.InstrumentID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pInputOptionSelfClose.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnErrRtnOptionSelfCloseAction(CThostFtdcOptionSelfCloseActionField * pOptionSelfCloseAction, CThostFtdcRspInfoField * pRspInfo)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnErrRtnOptionSelfCloseAction");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcOptionSelfCloseActionField local_pOptionSelfCloseAction = { 0 };
        if(pOptionSelfCloseAction)
        {
            memcpy(&local_pOptionSelfCloseAction, pOptionSelfCloseAction, sizeof(CThostFtdcOptionSelfCloseActionField));
        }
        writer.Key("pOptionSelfCloseAction");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pOptionSelfCloseAction.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pOptionSelfCloseAction.InvestorID).c_str());
        writer.Key("OptionSelfCloseActionRef");
        writer.Int(local_pOptionSelfCloseAction.OptionSelfCloseActionRef);
        writer.Key("OptionSelfCloseRef");
        writer.String(g2u(local_pOptionSelfCloseAction.OptionSelfCloseRef).c_str());
        writer.Key("RequestID");
        writer.Int(local_pOptionSelfCloseAction.RequestID);
        writer.Key("FrontID");
        writer.Int(local_pOptionSelfCloseAction.FrontID);
        writer.Key("SessionID");
        writer.Int(local_pOptionSelfCloseAction.SessionID);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pOptionSelfCloseAction.ExchangeID).c_str());
        writer.Key("OptionSelfCloseSysID");
        writer.String(g2u(local_pOptionSelfCloseAction.OptionSelfCloseSysID).c_str());
        writer.Key("ActionFlag");
        writer.Int(local_pOptionSelfCloseAction.ActionFlag);
        writer.Key("ActionDate");
        writer.String(g2u(local_pOptionSelfCloseAction.ActionDate).c_str());
        writer.Key("ActionTime");
        writer.String(g2u(local_pOptionSelfCloseAction.ActionTime).c_str());
        writer.Key("TraderID");
        writer.String(g2u(local_pOptionSelfCloseAction.TraderID).c_str());
        writer.Key("InstallID");
        writer.Int(local_pOptionSelfCloseAction.InstallID);
        writer.Key("OptionSelfCloseLocalID");
        writer.String(g2u(local_pOptionSelfCloseAction.OptionSelfCloseLocalID).c_str());
        writer.Key("ActionLocalID");
        writer.String(g2u(local_pOptionSelfCloseAction.ActionLocalID).c_str());
        writer.Key("ParticipantID");
        writer.String(g2u(local_pOptionSelfCloseAction.ParticipantID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pOptionSelfCloseAction.ClientID).c_str());
        writer.Key("BusinessUnit");
        writer.String(g2u(local_pOptionSelfCloseAction.BusinessUnit).c_str());
        writer.Key("OrderActionStatus");
        writer.Int(local_pOptionSelfCloseAction.OrderActionStatus);
        writer.Key("UserID");
        writer.String(g2u(local_pOptionSelfCloseAction.UserID).c_str());
        writer.Key("StatusMsg");
        writer.String(g2u(local_pOptionSelfCloseAction.StatusMsg).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pOptionSelfCloseAction.reserve1).c_str());
        writer.Key("BranchID");
        writer.String(g2u(local_pOptionSelfCloseAction.BranchID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pOptionSelfCloseAction.InvestUnitID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pOptionSelfCloseAction.reserve2).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pOptionSelfCloseAction.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pOptionSelfCloseAction.InstrumentID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pOptionSelfCloseAction.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRtnCombAction(CThostFtdcCombActionField * pCombAction)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRtnCombAction");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcCombActionField local_pCombAction = { 0 };
        if(pCombAction)
        {
            memcpy(&local_pCombAction, pCombAction, sizeof(CThostFtdcCombActionField));
        }
        writer.Key("pCombAction");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pCombAction.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pCombAction.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pCombAction.reserve1).c_str());
        writer.Key("CombActionRef");
        writer.String(g2u(local_pCombAction.CombActionRef).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pCombAction.UserID).c_str());
        writer.Key("Direction");
        writer.Int(local_pCombAction.Direction);
        writer.Key("Volume");
        writer.Int(local_pCombAction.Volume);
        writer.Key("CombDirection");
        writer.Int(local_pCombAction.CombDirection);
        writer.Key("HedgeFlag");
        writer.Int(local_pCombAction.HedgeFlag);
        writer.Key("ActionLocalID");
        writer.String(g2u(local_pCombAction.ActionLocalID).c_str());
        writer.Key("ExchangeID");
        writer.String(g2u(local_pCombAction.ExchangeID).c_str());
        writer.Key("ParticipantID");
        writer.String(g2u(local_pCombAction.ParticipantID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pCombAction.ClientID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pCombAction.reserve2).c_str());
        writer.Key("TraderID");
        writer.String(g2u(local_pCombAction.TraderID).c_str());
        writer.Key("InstallID");
        writer.Int(local_pCombAction.InstallID);
        writer.Key("ActionStatus");
        writer.Int(local_pCombAction.ActionStatus);
        writer.Key("NotifySequence");
        writer.Int(local_pCombAction.NotifySequence);
        writer.Key("TradingDay");
        writer.String(g2u(local_pCombAction.TradingDay).c_str());
        writer.Key("SettlementID");
        writer.Int(local_pCombAction.SettlementID);
        writer.Key("SequenceNo");
        writer.Int(local_pCombAction.SequenceNo);
        writer.Key("FrontID");
        writer.Int(local_pCombAction.FrontID);
        writer.Key("SessionID");
        writer.Int(local_pCombAction.SessionID);
        writer.Key("UserProductInfo");
        writer.String(g2u(local_pCombAction.UserProductInfo).c_str());
        writer.Key("StatusMsg");
        writer.String(g2u(local_pCombAction.StatusMsg).c_str());
        writer.Key("reserve3");
        writer.String(g2u(local_pCombAction.reserve3).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pCombAction.MacAddress).c_str());
        writer.Key("ComTradeID");
        writer.String(g2u(local_pCombAction.ComTradeID).c_str());
        writer.Key("BranchID");
        writer.String(g2u(local_pCombAction.BranchID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pCombAction.InvestUnitID).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pCombAction.InstrumentID).c_str());
        writer.Key("ExchangeInstID");
        writer.String(g2u(local_pCombAction.ExchangeInstID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pCombAction.IPAddress).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnErrRtnCombActionInsert(CThostFtdcInputCombActionField * pInputCombAction, CThostFtdcRspInfoField * pRspInfo)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnErrRtnCombActionInsert");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcInputCombActionField local_pInputCombAction = { 0 };
        if(pInputCombAction)
        {
            memcpy(&local_pInputCombAction, pInputCombAction, sizeof(CThostFtdcInputCombActionField));
        }
        writer.Key("pInputCombAction");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pInputCombAction.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pInputCombAction.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pInputCombAction.reserve1).c_str());
        writer.Key("CombActionRef");
        writer.String(g2u(local_pInputCombAction.CombActionRef).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pInputCombAction.UserID).c_str());
        writer.Key("Direction");
        writer.Int(local_pInputCombAction.Direction);
        writer.Key("Volume");
        writer.Int(local_pInputCombAction.Volume);
        writer.Key("CombDirection");
        writer.Int(local_pInputCombAction.CombDirection);
        writer.Key("HedgeFlag");
        writer.Int(local_pInputCombAction.HedgeFlag);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pInputCombAction.ExchangeID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pInputCombAction.reserve2).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pInputCombAction.MacAddress).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pInputCombAction.InvestUnitID).c_str());
        writer.Key("FrontID");
        writer.Int(local_pInputCombAction.FrontID);
        writer.Key("SessionID");
        writer.Int(local_pInputCombAction.SessionID);
        writer.Key("InstrumentID");
        writer.String(g2u(local_pInputCombAction.InstrumentID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pInputCombAction.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryContractBank(CThostFtdcContractBankField * pContractBank, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryContractBank");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcContractBankField local_pContractBank = { 0 };
        if(pContractBank)
        {
            memcpy(&local_pContractBank, pContractBank, sizeof(CThostFtdcContractBankField));
        }
        writer.Key("pContractBank");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pContractBank.BrokerID).c_str());
        writer.Key("BankID");
        writer.String(g2u(local_pContractBank.BankID).c_str());
        writer.Key("BankBrchID");
        writer.String(g2u(local_pContractBank.BankBrchID).c_str());
        writer.Key("BankName");
        writer.String(g2u(local_pContractBank.BankName).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryParkedOrder(CThostFtdcParkedOrderField * pParkedOrder, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryParkedOrder");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcParkedOrderField local_pParkedOrder = { 0 };
        if(pParkedOrder)
        {
            memcpy(&local_pParkedOrder, pParkedOrder, sizeof(CThostFtdcParkedOrderField));
        }
        writer.Key("pParkedOrder");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pParkedOrder.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pParkedOrder.InvestorID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pParkedOrder.reserve1).c_str());
        writer.Key("OrderRef");
        writer.String(g2u(local_pParkedOrder.OrderRef).c_str());
        writer.Key("UserID");
        writer.String(g2u(local_pParkedOrder.UserID).c_str());
        writer.Key("OrderPriceType");
        writer.Int(local_pParkedOrder.OrderPriceType);
        writer.Key("Direction");
        writer.Int(local_pParkedOrder.Direction);
        writer.Key("CombOffsetFlag");
        writer.String(g2u(local_pParkedOrder.CombOffsetFlag).c_str());
        writer.Key("CombHedgeFlag");
        writer.String(g2u(local_pParkedOrder.CombHedgeFlag).c_str());
        writer.Key("LimitPrice");
        writer.Double(local_pParkedOrder.LimitPrice);
        writer.Key("VolumeTotalOriginal");
        writer.Int(local_pParkedOrder.VolumeTotalOriginal);
        writer.Key("TimeCondition");
        writer.Int(local_pParkedOrder.TimeCondition);
        writer.Key("GTDDate");
        writer.String(g2u(local_pParkedOrder.GTDDate).c_str());
        writer.Key("VolumeCondition");
        writer.Int(local_pParkedOrder.VolumeCondition);
        writer.Key("MinVolume");
        writer.Int(local_pParkedOrder.MinVolume);
        writer.Key("ContingentCondition");
        writer.Int(local_pParkedOrder.ContingentCondition);
        writer.Key("StopPrice");
        writer.Double(local_pParkedOrder.StopPrice);
        writer.Key("ForceCloseReason");
        writer.Int(local_pParkedOrder.ForceCloseReason);
        writer.Key("IsAutoSuspend");
        writer.Int(local_pParkedOrder.IsAutoSuspend);
        writer.Key("BusinessUnit");
        writer.String(g2u(local_pParkedOrder.BusinessUnit).c_str());
        writer.Key("RequestID");
        writer.Int(local_pParkedOrder.RequestID);
        writer.Key("UserForceClose");
        writer.Int(local_pParkedOrder.UserForceClose);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pParkedOrder.ExchangeID).c_str());
        writer.Key("ParkedOrderID");
        writer.String(g2u(local_pParkedOrder.ParkedOrderID).c_str());
        writer.Key("UserType");
        writer.Int(local_pParkedOrder.UserType);
        writer.Key("Status");
        writer.Int(local_pParkedOrder.Status);
        writer.Key("ErrorID");
        writer.Int(local_pParkedOrder.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pParkedOrder.ErrorMsg).c_str());
        writer.Key("IsSwapOrder");
        writer.Int(local_pParkedOrder.IsSwapOrder);
        writer.Key("AccountID");
        writer.String(g2u(local_pParkedOrder.AccountID).c_str());
        writer.Key("CurrencyID");
        writer.String(g2u(local_pParkedOrder.CurrencyID).c_str());
        writer.Key("ClientID");
        writer.String(g2u(local_pParkedOrder.ClientID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pParkedOrder.InvestUnitID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pParkedOrder.reserve2).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pParkedOrder.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pParkedOrder.InstrumentID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pParkedOrder.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryParkedOrderAction(CThostFtdcParkedOrderActionField * pParkedOrderAction, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryParkedOrderAction");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcParkedOrderActionField local_pParkedOrderAction = { 0 };
        if(pParkedOrderAction)
        {
            memcpy(&local_pParkedOrderAction, pParkedOrderAction, sizeof(CThostFtdcParkedOrderActionField));
        }
        writer.Key("pParkedOrderAction");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pParkedOrderAction.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pParkedOrderAction.InvestorID).c_str());
        writer.Key("OrderActionRef");
        writer.Int(local_pParkedOrderAction.OrderActionRef);
        writer.Key("OrderRef");
        writer.String(g2u(local_pParkedOrderAction.OrderRef).c_str());
        writer.Key("RequestID");
        writer.Int(local_pParkedOrderAction.RequestID);
        writer.Key("FrontID");
        writer.Int(local_pParkedOrderAction.FrontID);
        writer.Key("SessionID");
        writer.Int(local_pParkedOrderAction.SessionID);
        writer.Key("ExchangeID");
        writer.String(g2u(local_pParkedOrderAction.ExchangeID).c_str());
        writer.Key("OrderSysID");
        writer.String(g2u(local_pParkedOrderAction.OrderSysID).c_str());
        writer.Key("ActionFlag");
        writer.Int(local_pParkedOrderAction.ActionFlag);
        writer.Key("LimitPrice");
        writer.Double(local_pParkedOrderAction.LimitPrice);
        writer.Key("VolumeChange");
        writer.Int(local_pParkedOrderAction.VolumeChange);
        writer.Key("UserID");
        writer.String(g2u(local_pParkedOrderAction.UserID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pParkedOrderAction.reserve1).c_str());
        writer.Key("ParkedOrderActionID");
        writer.String(g2u(local_pParkedOrderAction.ParkedOrderActionID).c_str());
        writer.Key("UserType");
        writer.Int(local_pParkedOrderAction.UserType);
        writer.Key("Status");
        writer.Int(local_pParkedOrderAction.Status);
        writer.Key("ErrorID");
        writer.Int(local_pParkedOrderAction.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pParkedOrderAction.ErrorMsg).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pParkedOrderAction.InvestUnitID).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pParkedOrderAction.reserve2).c_str());
        writer.Key("MacAddress");
        writer.String(g2u(local_pParkedOrderAction.MacAddress).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pParkedOrderAction.InstrumentID).c_str());
        writer.Key("IPAddress");
        writer.String(g2u(local_pParkedOrderAction.IPAddress).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryTradingNotice(CThostFtdcTradingNoticeField * pTradingNotice, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryTradingNotice");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcTradingNoticeField local_pTradingNotice = { 0 };
        if(pTradingNotice)
        {
            memcpy(&local_pTradingNotice, pTradingNotice, sizeof(CThostFtdcTradingNoticeField));
        }
        writer.Key("pTradingNotice");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pTradingNotice.BrokerID).c_str());
        writer.Key("InvestorRange");
        writer.Int(local_pTradingNotice.InvestorRange);
        writer.Key("InvestorID");
        writer.String(g2u(local_pTradingNotice.InvestorID).c_str());
        writer.Key("SequenceSeries");
        writer.Int(local_pTradingNotice.SequenceSeries);
        writer.Key("UserID");
        writer.String(g2u(local_pTradingNotice.UserID).c_str());
        writer.Key("SendTime");
        writer.String(g2u(local_pTradingNotice.SendTime).c_str());
        writer.Key("SequenceNo");
        writer.Int(local_pTradingNotice.SequenceNo);
        writer.Key("FieldContent");
        writer.String(g2u(local_pTradingNotice.FieldContent).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pTradingNotice.InvestUnitID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryBrokerTradingParams(CThostFtdcBrokerTradingParamsField * pBrokerTradingParams, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryBrokerTradingParams");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcBrokerTradingParamsField local_pBrokerTradingParams = { 0 };
        if(pBrokerTradingParams)
        {
            memcpy(&local_pBrokerTradingParams, pBrokerTradingParams, sizeof(CThostFtdcBrokerTradingParamsField));
        }
        writer.Key("pBrokerTradingParams");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pBrokerTradingParams.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pBrokerTradingParams.InvestorID).c_str());
        writer.Key("MarginPriceType");
        writer.Int(local_pBrokerTradingParams.MarginPriceType);
        writer.Key("Algorithm");
        writer.Int(local_pBrokerTradingParams.Algorithm);
        writer.Key("AvailIncludeCloseProfit");
        writer.Int(local_pBrokerTradingParams.AvailIncludeCloseProfit);
        writer.Key("CurrencyID");
        writer.String(g2u(local_pBrokerTradingParams.CurrencyID).c_str());
        writer.Key("OptionRoyaltyPriceType");
        writer.Int(local_pBrokerTradingParams.OptionRoyaltyPriceType);
        writer.Key("AccountID");
        writer.String(g2u(local_pBrokerTradingParams.AccountID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryBrokerTradingAlgos(CThostFtdcBrokerTradingAlgosField * pBrokerTradingAlgos, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryBrokerTradingAlgos");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcBrokerTradingAlgosField local_pBrokerTradingAlgos = { 0 };
        if(pBrokerTradingAlgos)
        {
            memcpy(&local_pBrokerTradingAlgos, pBrokerTradingAlgos, sizeof(CThostFtdcBrokerTradingAlgosField));
        }
        writer.Key("pBrokerTradingAlgos");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pBrokerTradingAlgos.BrokerID).c_str());
        writer.Key("ExchangeID");
        writer.String(g2u(local_pBrokerTradingAlgos.ExchangeID).c_str());
        writer.Key("reserve1");
        writer.String(g2u(local_pBrokerTradingAlgos.reserve1).c_str());
        writer.Key("HandlePositionAlgoID");
        writer.Int(local_pBrokerTradingAlgos.HandlePositionAlgoID);
        writer.Key("FindMarginRateAlgoID");
        writer.Int(local_pBrokerTradingAlgos.FindMarginRateAlgoID);
        writer.Key("HandleTradingAccountAlgoID");
        writer.Int(local_pBrokerTradingAlgos.HandleTradingAccountAlgoID);
        writer.Key("InstrumentID");
        writer.String(g2u(local_pBrokerTradingAlgos.InstrumentID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQueryCFMMCTradingAccountToken(CThostFtdcQueryCFMMCTradingAccountTokenField * pQueryCFMMCTradingAccountToken, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQueryCFMMCTradingAccountToken");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcQueryCFMMCTradingAccountTokenField local_pQueryCFMMCTradingAccountToken = { 0 };
        if(pQueryCFMMCTradingAccountToken)
        {
            memcpy(&local_pQueryCFMMCTradingAccountToken, pQueryCFMMCTradingAccountToken, sizeof(CThostFtdcQueryCFMMCTradingAccountTokenField));
        }
        writer.Key("pQueryCFMMCTradingAccountToken");
        writer.StartObject();
        writer.Key("BrokerID");
        writer.String(g2u(local_pQueryCFMMCTradingAccountToken.BrokerID).c_str());
        writer.Key("InvestorID");
        writer.String(g2u(local_pQueryCFMMCTradingAccountToken.InvestorID).c_str());
        writer.Key("InvestUnitID");
        writer.String(g2u(local_pQueryCFMMCTradingAccountToken.InvestUnitID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRtnFromBankToFutureByBank(CThostFtdcRspTransferField * pRspTransfer)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRtnFromBankToFutureByBank");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcRspTransferField local_pRspTransfer = { 0 };
        if(pRspTransfer)
        {
            memcpy(&local_pRspTransfer, pRspTransfer, sizeof(CThostFtdcRspTransferField));
        }
        writer.Key("pRspTransfer");
        writer.StartObject();
        writer.Key("TradeCode");
        writer.String(g2u(local_pRspTransfer.TradeCode).c_str());
        writer.Key("BankID");
        writer.String(g2u(local_pRspTransfer.BankID).c_str());
        writer.Key("BankBranchID");
        writer.String(g2u(local_pRspTransfer.BankBranchID).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pRspTransfer.BrokerID).c_str());
        writer.Key("BrokerBranchID");
        writer.String(g2u(local_pRspTransfer.BrokerBranchID).c_str());
        writer.Key("TradeDate");
        writer.String(g2u(local_pRspTransfer.TradeDate).c_str());
        writer.Key("TradeTime");
        writer.String(g2u(local_pRspTransfer.TradeTime).c_str());
        writer.Key("BankSerial");
        writer.String(g2u(local_pRspTransfer.BankSerial).c_str());
        writer.Key("TradingDay");
        writer.String(g2u(local_pRspTransfer.TradingDay).c_str());
        writer.Key("PlateSerial");
        writer.Int(local_pRspTransfer.PlateSerial);
        writer.Key("LastFragment");
        writer.Int(local_pRspTransfer.LastFragment);
        writer.Key("SessionID");
        writer.Int(local_pRspTransfer.SessionID);
        writer.Key("CustomerName");
        writer.String(g2u(local_pRspTransfer.CustomerName).c_str());
        writer.Key("IdCardType");
        writer.Int(local_pRspTransfer.IdCardType);
        writer.Key("IdentifiedCardNo");
        writer.String(g2u(local_pRspTransfer.IdentifiedCardNo).c_str());
        writer.Key("CustType");
        writer.Int(local_pRspTransfer.CustType);
        writer.Key("BankAccount");
        writer.String(g2u(local_pRspTransfer.BankAccount).c_str());
        writer.Key("BankPassWord");
        writer.String(g2u(local_pRspTransfer.BankPassWord).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pRspTransfer.AccountID).c_str());
        writer.Key("Password");
        writer.String(g2u(local_pRspTransfer.Password).c_str());
        writer.Key("InstallID");
        writer.Int(local_pRspTransfer.InstallID);
        writer.Key("FutureSerial");
        writer.Int(local_pRspTransfer.FutureSerial);
        writer.Key("UserID");
        writer.String(g2u(local_pRspTransfer.UserID).c_str());
        writer.Key("VerifyCertNoFlag");
        writer.Int(local_pRspTransfer.VerifyCertNoFlag);
        writer.Key("CurrencyID");
        writer.String(g2u(local_pRspTransfer.CurrencyID).c_str());
        writer.Key("TradeAmount");
        writer.Double(local_pRspTransfer.TradeAmount);
        writer.Key("FutureFetchAmount");
        writer.Double(local_pRspTransfer.FutureFetchAmount);
        writer.Key("FeePayFlag");
        writer.Int(local_pRspTransfer.FeePayFlag);
        writer.Key("CustFee");
        writer.Double(local_pRspTransfer.CustFee);
        writer.Key("BrokerFee");
        writer.Double(local_pRspTransfer.BrokerFee);
        writer.Key("Message");
        writer.String(g2u(local_pRspTransfer.Message).c_str());
        writer.Key("Digest");
        writer.String(g2u(local_pRspTransfer.Digest).c_str());
        writer.Key("BankAccType");
        writer.Int(local_pRspTransfer.BankAccType);
        writer.Key("DeviceID");
        writer.String(g2u(local_pRspTransfer.DeviceID).c_str());
        writer.Key("BankSecuAccType");
        writer.Int(local_pRspTransfer.BankSecuAccType);
        writer.Key("BrokerIDByBank");
        writer.String(g2u(local_pRspTransfer.BrokerIDByBank).c_str());
        writer.Key("BankSecuAcc");
        writer.String(g2u(local_pRspTransfer.BankSecuAcc).c_str());
        writer.Key("BankPwdFlag");
        writer.Int(local_pRspTransfer.BankPwdFlag);
        writer.Key("SecuPwdFlag");
        writer.Int(local_pRspTransfer.SecuPwdFlag);
        writer.Key("OperNo");
        writer.String(g2u(local_pRspTransfer.OperNo).c_str());
        writer.Key("RequestID");
        writer.Int(local_pRspTransfer.RequestID);
        writer.Key("TID");
        writer.Int(local_pRspTransfer.TID);
        writer.Key("TransferStatus");
        writer.Int(local_pRspTransfer.TransferStatus);
        writer.Key("ErrorID");
        writer.Int(local_pRspTransfer.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspTransfer.ErrorMsg).c_str());
        writer.Key("LongCustomerName");
        writer.String(g2u(local_pRspTransfer.LongCustomerName).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRtnFromFutureToBankByBank(CThostFtdcRspTransferField * pRspTransfer)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRtnFromFutureToBankByBank");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcRspTransferField local_pRspTransfer = { 0 };
        if(pRspTransfer)
        {
            memcpy(&local_pRspTransfer, pRspTransfer, sizeof(CThostFtdcRspTransferField));
        }
        writer.Key("pRspTransfer");
        writer.StartObject();
        writer.Key("TradeCode");
        writer.String(g2u(local_pRspTransfer.TradeCode).c_str());
        writer.Key("BankID");
        writer.String(g2u(local_pRspTransfer.BankID).c_str());
        writer.Key("BankBranchID");
        writer.String(g2u(local_pRspTransfer.BankBranchID).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pRspTransfer.BrokerID).c_str());
        writer.Key("BrokerBranchID");
        writer.String(g2u(local_pRspTransfer.BrokerBranchID).c_str());
        writer.Key("TradeDate");
        writer.String(g2u(local_pRspTransfer.TradeDate).c_str());
        writer.Key("TradeTime");
        writer.String(g2u(local_pRspTransfer.TradeTime).c_str());
        writer.Key("BankSerial");
        writer.String(g2u(local_pRspTransfer.BankSerial).c_str());
        writer.Key("TradingDay");
        writer.String(g2u(local_pRspTransfer.TradingDay).c_str());
        writer.Key("PlateSerial");
        writer.Int(local_pRspTransfer.PlateSerial);
        writer.Key("LastFragment");
        writer.Int(local_pRspTransfer.LastFragment);
        writer.Key("SessionID");
        writer.Int(local_pRspTransfer.SessionID);
        writer.Key("CustomerName");
        writer.String(g2u(local_pRspTransfer.CustomerName).c_str());
        writer.Key("IdCardType");
        writer.Int(local_pRspTransfer.IdCardType);
        writer.Key("IdentifiedCardNo");
        writer.String(g2u(local_pRspTransfer.IdentifiedCardNo).c_str());
        writer.Key("CustType");
        writer.Int(local_pRspTransfer.CustType);
        writer.Key("BankAccount");
        writer.String(g2u(local_pRspTransfer.BankAccount).c_str());
        writer.Key("BankPassWord");
        writer.String(g2u(local_pRspTransfer.BankPassWord).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pRspTransfer.AccountID).c_str());
        writer.Key("Password");
        writer.String(g2u(local_pRspTransfer.Password).c_str());
        writer.Key("InstallID");
        writer.Int(local_pRspTransfer.InstallID);
        writer.Key("FutureSerial");
        writer.Int(local_pRspTransfer.FutureSerial);
        writer.Key("UserID");
        writer.String(g2u(local_pRspTransfer.UserID).c_str());
        writer.Key("VerifyCertNoFlag");
        writer.Int(local_pRspTransfer.VerifyCertNoFlag);
        writer.Key("CurrencyID");
        writer.String(g2u(local_pRspTransfer.CurrencyID).c_str());
        writer.Key("TradeAmount");
        writer.Double(local_pRspTransfer.TradeAmount);
        writer.Key("FutureFetchAmount");
        writer.Double(local_pRspTransfer.FutureFetchAmount);
        writer.Key("FeePayFlag");
        writer.Int(local_pRspTransfer.FeePayFlag);
        writer.Key("CustFee");
        writer.Double(local_pRspTransfer.CustFee);
        writer.Key("BrokerFee");
        writer.Double(local_pRspTransfer.BrokerFee);
        writer.Key("Message");
        writer.String(g2u(local_pRspTransfer.Message).c_str());
        writer.Key("Digest");
        writer.String(g2u(local_pRspTransfer.Digest).c_str());
        writer.Key("BankAccType");
        writer.Int(local_pRspTransfer.BankAccType);
        writer.Key("DeviceID");
        writer.String(g2u(local_pRspTransfer.DeviceID).c_str());
        writer.Key("BankSecuAccType");
        writer.Int(local_pRspTransfer.BankSecuAccType);
        writer.Key("BrokerIDByBank");
        writer.String(g2u(local_pRspTransfer.BrokerIDByBank).c_str());
        writer.Key("BankSecuAcc");
        writer.String(g2u(local_pRspTransfer.BankSecuAcc).c_str());
        writer.Key("BankPwdFlag");
        writer.Int(local_pRspTransfer.BankPwdFlag);
        writer.Key("SecuPwdFlag");
        writer.Int(local_pRspTransfer.SecuPwdFlag);
        writer.Key("OperNo");
        writer.String(g2u(local_pRspTransfer.OperNo).c_str());
        writer.Key("RequestID");
        writer.Int(local_pRspTransfer.RequestID);
        writer.Key("TID");
        writer.Int(local_pRspTransfer.TID);
        writer.Key("TransferStatus");
        writer.Int(local_pRspTransfer.TransferStatus);
        writer.Key("ErrorID");
        writer.Int(local_pRspTransfer.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspTransfer.ErrorMsg).c_str());
        writer.Key("LongCustomerName");
        writer.String(g2u(local_pRspTransfer.LongCustomerName).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRtnRepealFromBankToFutureByBank(CThostFtdcRspRepealField * pRspRepeal)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRtnRepealFromBankToFutureByBank");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcRspRepealField local_pRspRepeal = { 0 };
        if(pRspRepeal)
        {
            memcpy(&local_pRspRepeal, pRspRepeal, sizeof(CThostFtdcRspRepealField));
        }
        writer.Key("pRspRepeal");
        writer.StartObject();
        writer.Key("RepealTimeInterval");
        writer.Int(local_pRspRepeal.RepealTimeInterval);
        writer.Key("RepealedTimes");
        writer.Int(local_pRspRepeal.RepealedTimes);
        writer.Key("BankRepealFlag");
        writer.Int(local_pRspRepeal.BankRepealFlag);
        writer.Key("BrokerRepealFlag");
        writer.Int(local_pRspRepeal.BrokerRepealFlag);
        writer.Key("PlateRepealSerial");
        writer.Int(local_pRspRepeal.PlateRepealSerial);
        writer.Key("BankRepealSerial");
        writer.String(g2u(local_pRspRepeal.BankRepealSerial).c_str());
        writer.Key("FutureRepealSerial");
        writer.Int(local_pRspRepeal.FutureRepealSerial);
        writer.Key("TradeCode");
        writer.String(g2u(local_pRspRepeal.TradeCode).c_str());
        writer.Key("BankID");
        writer.String(g2u(local_pRspRepeal.BankID).c_str());
        writer.Key("BankBranchID");
        writer.String(g2u(local_pRspRepeal.BankBranchID).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pRspRepeal.BrokerID).c_str());
        writer.Key("BrokerBranchID");
        writer.String(g2u(local_pRspRepeal.BrokerBranchID).c_str());
        writer.Key("TradeDate");
        writer.String(g2u(local_pRspRepeal.TradeDate).c_str());
        writer.Key("TradeTime");
        writer.String(g2u(local_pRspRepeal.TradeTime).c_str());
        writer.Key("BankSerial");
        writer.String(g2u(local_pRspRepeal.BankSerial).c_str());
        writer.Key("TradingDay");
        writer.String(g2u(local_pRspRepeal.TradingDay).c_str());
        writer.Key("PlateSerial");
        writer.Int(local_pRspRepeal.PlateSerial);
        writer.Key("LastFragment");
        writer.Int(local_pRspRepeal.LastFragment);
        writer.Key("SessionID");
        writer.Int(local_pRspRepeal.SessionID);
        writer.Key("CustomerName");
        writer.String(g2u(local_pRspRepeal.CustomerName).c_str());
        writer.Key("IdCardType");
        writer.Int(local_pRspRepeal.IdCardType);
        writer.Key("IdentifiedCardNo");
        writer.String(g2u(local_pRspRepeal.IdentifiedCardNo).c_str());
        writer.Key("CustType");
        writer.Int(local_pRspRepeal.CustType);
        writer.Key("BankAccount");
        writer.String(g2u(local_pRspRepeal.BankAccount).c_str());
        writer.Key("BankPassWord");
        writer.String(g2u(local_pRspRepeal.BankPassWord).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pRspRepeal.AccountID).c_str());
        writer.Key("Password");
        writer.String(g2u(local_pRspRepeal.Password).c_str());
        writer.Key("InstallID");
        writer.Int(local_pRspRepeal.InstallID);
        writer.Key("FutureSerial");
        writer.Int(local_pRspRepeal.FutureSerial);
        writer.Key("UserID");
        writer.String(g2u(local_pRspRepeal.UserID).c_str());
        writer.Key("VerifyCertNoFlag");
        writer.Int(local_pRspRepeal.VerifyCertNoFlag);
        writer.Key("CurrencyID");
        writer.String(g2u(local_pRspRepeal.CurrencyID).c_str());
        writer.Key("TradeAmount");
        writer.Double(local_pRspRepeal.TradeAmount);
        writer.Key("FutureFetchAmount");
        writer.Double(local_pRspRepeal.FutureFetchAmount);
        writer.Key("FeePayFlag");
        writer.Int(local_pRspRepeal.FeePayFlag);
        writer.Key("CustFee");
        writer.Double(local_pRspRepeal.CustFee);
        writer.Key("BrokerFee");
        writer.Double(local_pRspRepeal.BrokerFee);
        writer.Key("Message");
        writer.String(g2u(local_pRspRepeal.Message).c_str());
        writer.Key("Digest");
        writer.String(g2u(local_pRspRepeal.Digest).c_str());
        writer.Key("BankAccType");
        writer.Int(local_pRspRepeal.BankAccType);
        writer.Key("DeviceID");
        writer.String(g2u(local_pRspRepeal.DeviceID).c_str());
        writer.Key("BankSecuAccType");
        writer.Int(local_pRspRepeal.BankSecuAccType);
        writer.Key("BrokerIDByBank");
        writer.String(g2u(local_pRspRepeal.BrokerIDByBank).c_str());
        writer.Key("BankSecuAcc");
        writer.String(g2u(local_pRspRepeal.BankSecuAcc).c_str());
        writer.Key("BankPwdFlag");
        writer.Int(local_pRspRepeal.BankPwdFlag);
        writer.Key("SecuPwdFlag");
        writer.Int(local_pRspRepeal.SecuPwdFlag);
        writer.Key("OperNo");
        writer.String(g2u(local_pRspRepeal.OperNo).c_str());
        writer.Key("RequestID");
        writer.Int(local_pRspRepeal.RequestID);
        writer.Key("TID");
        writer.Int(local_pRspRepeal.TID);
        writer.Key("TransferStatus");
        writer.Int(local_pRspRepeal.TransferStatus);
        writer.Key("ErrorID");
        writer.Int(local_pRspRepeal.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspRepeal.ErrorMsg).c_str());
        writer.Key("LongCustomerName");
        writer.String(g2u(local_pRspRepeal.LongCustomerName).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRtnRepealFromFutureToBankByBank(CThostFtdcRspRepealField * pRspRepeal)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRtnRepealFromFutureToBankByBank");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcRspRepealField local_pRspRepeal = { 0 };
        if(pRspRepeal)
        {
            memcpy(&local_pRspRepeal, pRspRepeal, sizeof(CThostFtdcRspRepealField));
        }
        writer.Key("pRspRepeal");
        writer.StartObject();
        writer.Key("RepealTimeInterval");
        writer.Int(local_pRspRepeal.RepealTimeInterval);
        writer.Key("RepealedTimes");
        writer.Int(local_pRspRepeal.RepealedTimes);
        writer.Key("BankRepealFlag");
        writer.Int(local_pRspRepeal.BankRepealFlag);
        writer.Key("BrokerRepealFlag");
        writer.Int(local_pRspRepeal.BrokerRepealFlag);
        writer.Key("PlateRepealSerial");
        writer.Int(local_pRspRepeal.PlateRepealSerial);
        writer.Key("BankRepealSerial");
        writer.String(g2u(local_pRspRepeal.BankRepealSerial).c_str());
        writer.Key("FutureRepealSerial");
        writer.Int(local_pRspRepeal.FutureRepealSerial);
        writer.Key("TradeCode");
        writer.String(g2u(local_pRspRepeal.TradeCode).c_str());
        writer.Key("BankID");
        writer.String(g2u(local_pRspRepeal.BankID).c_str());
        writer.Key("BankBranchID");
        writer.String(g2u(local_pRspRepeal.BankBranchID).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pRspRepeal.BrokerID).c_str());
        writer.Key("BrokerBranchID");
        writer.String(g2u(local_pRspRepeal.BrokerBranchID).c_str());
        writer.Key("TradeDate");
        writer.String(g2u(local_pRspRepeal.TradeDate).c_str());
        writer.Key("TradeTime");
        writer.String(g2u(local_pRspRepeal.TradeTime).c_str());
        writer.Key("BankSerial");
        writer.String(g2u(local_pRspRepeal.BankSerial).c_str());
        writer.Key("TradingDay");
        writer.String(g2u(local_pRspRepeal.TradingDay).c_str());
        writer.Key("PlateSerial");
        writer.Int(local_pRspRepeal.PlateSerial);
        writer.Key("LastFragment");
        writer.Int(local_pRspRepeal.LastFragment);
        writer.Key("SessionID");
        writer.Int(local_pRspRepeal.SessionID);
        writer.Key("CustomerName");
        writer.String(g2u(local_pRspRepeal.CustomerName).c_str());
        writer.Key("IdCardType");
        writer.Int(local_pRspRepeal.IdCardType);
        writer.Key("IdentifiedCardNo");
        writer.String(g2u(local_pRspRepeal.IdentifiedCardNo).c_str());
        writer.Key("CustType");
        writer.Int(local_pRspRepeal.CustType);
        writer.Key("BankAccount");
        writer.String(g2u(local_pRspRepeal.BankAccount).c_str());
        writer.Key("BankPassWord");
        writer.String(g2u(local_pRspRepeal.BankPassWord).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pRspRepeal.AccountID).c_str());
        writer.Key("Password");
        writer.String(g2u(local_pRspRepeal.Password).c_str());
        writer.Key("InstallID");
        writer.Int(local_pRspRepeal.InstallID);
        writer.Key("FutureSerial");
        writer.Int(local_pRspRepeal.FutureSerial);
        writer.Key("UserID");
        writer.String(g2u(local_pRspRepeal.UserID).c_str());
        writer.Key("VerifyCertNoFlag");
        writer.Int(local_pRspRepeal.VerifyCertNoFlag);
        writer.Key("CurrencyID");
        writer.String(g2u(local_pRspRepeal.CurrencyID).c_str());
        writer.Key("TradeAmount");
        writer.Double(local_pRspRepeal.TradeAmount);
        writer.Key("FutureFetchAmount");
        writer.Double(local_pRspRepeal.FutureFetchAmount);
        writer.Key("FeePayFlag");
        writer.Int(local_pRspRepeal.FeePayFlag);
        writer.Key("CustFee");
        writer.Double(local_pRspRepeal.CustFee);
        writer.Key("BrokerFee");
        writer.Double(local_pRspRepeal.BrokerFee);
        writer.Key("Message");
        writer.String(g2u(local_pRspRepeal.Message).c_str());
        writer.Key("Digest");
        writer.String(g2u(local_pRspRepeal.Digest).c_str());
        writer.Key("BankAccType");
        writer.Int(local_pRspRepeal.BankAccType);
        writer.Key("DeviceID");
        writer.String(g2u(local_pRspRepeal.DeviceID).c_str());
        writer.Key("BankSecuAccType");
        writer.Int(local_pRspRepeal.BankSecuAccType);
        writer.Key("BrokerIDByBank");
        writer.String(g2u(local_pRspRepeal.BrokerIDByBank).c_str());
        writer.Key("BankSecuAcc");
        writer.String(g2u(local_pRspRepeal.BankSecuAcc).c_str());
        writer.Key("BankPwdFlag");
        writer.Int(local_pRspRepeal.BankPwdFlag);
        writer.Key("SecuPwdFlag");
        writer.Int(local_pRspRepeal.SecuPwdFlag);
        writer.Key("OperNo");
        writer.String(g2u(local_pRspRepeal.OperNo).c_str());
        writer.Key("RequestID");
        writer.Int(local_pRspRepeal.RequestID);
        writer.Key("TID");
        writer.Int(local_pRspRepeal.TID);
        writer.Key("TransferStatus");
        writer.Int(local_pRspRepeal.TransferStatus);
        writer.Key("ErrorID");
        writer.Int(local_pRspRepeal.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspRepeal.ErrorMsg).c_str());
        writer.Key("LongCustomerName");
        writer.String(g2u(local_pRspRepeal.LongCustomerName).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRtnFromBankToFutureByFuture(CThostFtdcRspTransferField * pRspTransfer)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRtnFromBankToFutureByFuture");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcRspTransferField local_pRspTransfer = { 0 };
        if(pRspTransfer)
        {
            memcpy(&local_pRspTransfer, pRspTransfer, sizeof(CThostFtdcRspTransferField));
        }
        writer.Key("pRspTransfer");
        writer.StartObject();
        writer.Key("TradeCode");
        writer.String(g2u(local_pRspTransfer.TradeCode).c_str());
        writer.Key("BankID");
        writer.String(g2u(local_pRspTransfer.BankID).c_str());
        writer.Key("BankBranchID");
        writer.String(g2u(local_pRspTransfer.BankBranchID).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pRspTransfer.BrokerID).c_str());
        writer.Key("BrokerBranchID");
        writer.String(g2u(local_pRspTransfer.BrokerBranchID).c_str());
        writer.Key("TradeDate");
        writer.String(g2u(local_pRspTransfer.TradeDate).c_str());
        writer.Key("TradeTime");
        writer.String(g2u(local_pRspTransfer.TradeTime).c_str());
        writer.Key("BankSerial");
        writer.String(g2u(local_pRspTransfer.BankSerial).c_str());
        writer.Key("TradingDay");
        writer.String(g2u(local_pRspTransfer.TradingDay).c_str());
        writer.Key("PlateSerial");
        writer.Int(local_pRspTransfer.PlateSerial);
        writer.Key("LastFragment");
        writer.Int(local_pRspTransfer.LastFragment);
        writer.Key("SessionID");
        writer.Int(local_pRspTransfer.SessionID);
        writer.Key("CustomerName");
        writer.String(g2u(local_pRspTransfer.CustomerName).c_str());
        writer.Key("IdCardType");
        writer.Int(local_pRspTransfer.IdCardType);
        writer.Key("IdentifiedCardNo");
        writer.String(g2u(local_pRspTransfer.IdentifiedCardNo).c_str());
        writer.Key("CustType");
        writer.Int(local_pRspTransfer.CustType);
        writer.Key("BankAccount");
        writer.String(g2u(local_pRspTransfer.BankAccount).c_str());
        writer.Key("BankPassWord");
        writer.String(g2u(local_pRspTransfer.BankPassWord).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pRspTransfer.AccountID).c_str());
        writer.Key("Password");
        writer.String(g2u(local_pRspTransfer.Password).c_str());
        writer.Key("InstallID");
        writer.Int(local_pRspTransfer.InstallID);
        writer.Key("FutureSerial");
        writer.Int(local_pRspTransfer.FutureSerial);
        writer.Key("UserID");
        writer.String(g2u(local_pRspTransfer.UserID).c_str());
        writer.Key("VerifyCertNoFlag");
        writer.Int(local_pRspTransfer.VerifyCertNoFlag);
        writer.Key("CurrencyID");
        writer.String(g2u(local_pRspTransfer.CurrencyID).c_str());
        writer.Key("TradeAmount");
        writer.Double(local_pRspTransfer.TradeAmount);
        writer.Key("FutureFetchAmount");
        writer.Double(local_pRspTransfer.FutureFetchAmount);
        writer.Key("FeePayFlag");
        writer.Int(local_pRspTransfer.FeePayFlag);
        writer.Key("CustFee");
        writer.Double(local_pRspTransfer.CustFee);
        writer.Key("BrokerFee");
        writer.Double(local_pRspTransfer.BrokerFee);
        writer.Key("Message");
        writer.String(g2u(local_pRspTransfer.Message).c_str());
        writer.Key("Digest");
        writer.String(g2u(local_pRspTransfer.Digest).c_str());
        writer.Key("BankAccType");
        writer.Int(local_pRspTransfer.BankAccType);
        writer.Key("DeviceID");
        writer.String(g2u(local_pRspTransfer.DeviceID).c_str());
        writer.Key("BankSecuAccType");
        writer.Int(local_pRspTransfer.BankSecuAccType);
        writer.Key("BrokerIDByBank");
        writer.String(g2u(local_pRspTransfer.BrokerIDByBank).c_str());
        writer.Key("BankSecuAcc");
        writer.String(g2u(local_pRspTransfer.BankSecuAcc).c_str());
        writer.Key("BankPwdFlag");
        writer.Int(local_pRspTransfer.BankPwdFlag);
        writer.Key("SecuPwdFlag");
        writer.Int(local_pRspTransfer.SecuPwdFlag);
        writer.Key("OperNo");
        writer.String(g2u(local_pRspTransfer.OperNo).c_str());
        writer.Key("RequestID");
        writer.Int(local_pRspTransfer.RequestID);
        writer.Key("TID");
        writer.Int(local_pRspTransfer.TID);
        writer.Key("TransferStatus");
        writer.Int(local_pRspTransfer.TransferStatus);
        writer.Key("ErrorID");
        writer.Int(local_pRspTransfer.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspTransfer.ErrorMsg).c_str());
        writer.Key("LongCustomerName");
        writer.String(g2u(local_pRspTransfer.LongCustomerName).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRtnFromFutureToBankByFuture(CThostFtdcRspTransferField * pRspTransfer)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRtnFromFutureToBankByFuture");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcRspTransferField local_pRspTransfer = { 0 };
        if(pRspTransfer)
        {
            memcpy(&local_pRspTransfer, pRspTransfer, sizeof(CThostFtdcRspTransferField));
        }
        writer.Key("pRspTransfer");
        writer.StartObject();
        writer.Key("TradeCode");
        writer.String(g2u(local_pRspTransfer.TradeCode).c_str());
        writer.Key("BankID");
        writer.String(g2u(local_pRspTransfer.BankID).c_str());
        writer.Key("BankBranchID");
        writer.String(g2u(local_pRspTransfer.BankBranchID).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pRspTransfer.BrokerID).c_str());
        writer.Key("BrokerBranchID");
        writer.String(g2u(local_pRspTransfer.BrokerBranchID).c_str());
        writer.Key("TradeDate");
        writer.String(g2u(local_pRspTransfer.TradeDate).c_str());
        writer.Key("TradeTime");
        writer.String(g2u(local_pRspTransfer.TradeTime).c_str());
        writer.Key("BankSerial");
        writer.String(g2u(local_pRspTransfer.BankSerial).c_str());
        writer.Key("TradingDay");
        writer.String(g2u(local_pRspTransfer.TradingDay).c_str());
        writer.Key("PlateSerial");
        writer.Int(local_pRspTransfer.PlateSerial);
        writer.Key("LastFragment");
        writer.Int(local_pRspTransfer.LastFragment);
        writer.Key("SessionID");
        writer.Int(local_pRspTransfer.SessionID);
        writer.Key("CustomerName");
        writer.String(g2u(local_pRspTransfer.CustomerName).c_str());
        writer.Key("IdCardType");
        writer.Int(local_pRspTransfer.IdCardType);
        writer.Key("IdentifiedCardNo");
        writer.String(g2u(local_pRspTransfer.IdentifiedCardNo).c_str());
        writer.Key("CustType");
        writer.Int(local_pRspTransfer.CustType);
        writer.Key("BankAccount");
        writer.String(g2u(local_pRspTransfer.BankAccount).c_str());
        writer.Key("BankPassWord");
        writer.String(g2u(local_pRspTransfer.BankPassWord).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pRspTransfer.AccountID).c_str());
        writer.Key("Password");
        writer.String(g2u(local_pRspTransfer.Password).c_str());
        writer.Key("InstallID");
        writer.Int(local_pRspTransfer.InstallID);
        writer.Key("FutureSerial");
        writer.Int(local_pRspTransfer.FutureSerial);
        writer.Key("UserID");
        writer.String(g2u(local_pRspTransfer.UserID).c_str());
        writer.Key("VerifyCertNoFlag");
        writer.Int(local_pRspTransfer.VerifyCertNoFlag);
        writer.Key("CurrencyID");
        writer.String(g2u(local_pRspTransfer.CurrencyID).c_str());
        writer.Key("TradeAmount");
        writer.Double(local_pRspTransfer.TradeAmount);
        writer.Key("FutureFetchAmount");
        writer.Double(local_pRspTransfer.FutureFetchAmount);
        writer.Key("FeePayFlag");
        writer.Int(local_pRspTransfer.FeePayFlag);
        writer.Key("CustFee");
        writer.Double(local_pRspTransfer.CustFee);
        writer.Key("BrokerFee");
        writer.Double(local_pRspTransfer.BrokerFee);
        writer.Key("Message");
        writer.String(g2u(local_pRspTransfer.Message).c_str());
        writer.Key("Digest");
        writer.String(g2u(local_pRspTransfer.Digest).c_str());
        writer.Key("BankAccType");
        writer.Int(local_pRspTransfer.BankAccType);
        writer.Key("DeviceID");
        writer.String(g2u(local_pRspTransfer.DeviceID).c_str());
        writer.Key("BankSecuAccType");
        writer.Int(local_pRspTransfer.BankSecuAccType);
        writer.Key("BrokerIDByBank");
        writer.String(g2u(local_pRspTransfer.BrokerIDByBank).c_str());
        writer.Key("BankSecuAcc");
        writer.String(g2u(local_pRspTransfer.BankSecuAcc).c_str());
        writer.Key("BankPwdFlag");
        writer.Int(local_pRspTransfer.BankPwdFlag);
        writer.Key("SecuPwdFlag");
        writer.Int(local_pRspTransfer.SecuPwdFlag);
        writer.Key("OperNo");
        writer.String(g2u(local_pRspTransfer.OperNo).c_str());
        writer.Key("RequestID");
        writer.Int(local_pRspTransfer.RequestID);
        writer.Key("TID");
        writer.Int(local_pRspTransfer.TID);
        writer.Key("TransferStatus");
        writer.Int(local_pRspTransfer.TransferStatus);
        writer.Key("ErrorID");
        writer.Int(local_pRspTransfer.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspTransfer.ErrorMsg).c_str());
        writer.Key("LongCustomerName");
        writer.String(g2u(local_pRspTransfer.LongCustomerName).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRtnRepealFromBankToFutureByFutureManual(CThostFtdcRspRepealField * pRspRepeal)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRtnRepealFromBankToFutureByFutureManual");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcRspRepealField local_pRspRepeal = { 0 };
        if(pRspRepeal)
        {
            memcpy(&local_pRspRepeal, pRspRepeal, sizeof(CThostFtdcRspRepealField));
        }
        writer.Key("pRspRepeal");
        writer.StartObject();
        writer.Key("RepealTimeInterval");
        writer.Int(local_pRspRepeal.RepealTimeInterval);
        writer.Key("RepealedTimes");
        writer.Int(local_pRspRepeal.RepealedTimes);
        writer.Key("BankRepealFlag");
        writer.Int(local_pRspRepeal.BankRepealFlag);
        writer.Key("BrokerRepealFlag");
        writer.Int(local_pRspRepeal.BrokerRepealFlag);
        writer.Key("PlateRepealSerial");
        writer.Int(local_pRspRepeal.PlateRepealSerial);
        writer.Key("BankRepealSerial");
        writer.String(g2u(local_pRspRepeal.BankRepealSerial).c_str());
        writer.Key("FutureRepealSerial");
        writer.Int(local_pRspRepeal.FutureRepealSerial);
        writer.Key("TradeCode");
        writer.String(g2u(local_pRspRepeal.TradeCode).c_str());
        writer.Key("BankID");
        writer.String(g2u(local_pRspRepeal.BankID).c_str());
        writer.Key("BankBranchID");
        writer.String(g2u(local_pRspRepeal.BankBranchID).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pRspRepeal.BrokerID).c_str());
        writer.Key("BrokerBranchID");
        writer.String(g2u(local_pRspRepeal.BrokerBranchID).c_str());
        writer.Key("TradeDate");
        writer.String(g2u(local_pRspRepeal.TradeDate).c_str());
        writer.Key("TradeTime");
        writer.String(g2u(local_pRspRepeal.TradeTime).c_str());
        writer.Key("BankSerial");
        writer.String(g2u(local_pRspRepeal.BankSerial).c_str());
        writer.Key("TradingDay");
        writer.String(g2u(local_pRspRepeal.TradingDay).c_str());
        writer.Key("PlateSerial");
        writer.Int(local_pRspRepeal.PlateSerial);
        writer.Key("LastFragment");
        writer.Int(local_pRspRepeal.LastFragment);
        writer.Key("SessionID");
        writer.Int(local_pRspRepeal.SessionID);
        writer.Key("CustomerName");
        writer.String(g2u(local_pRspRepeal.CustomerName).c_str());
        writer.Key("IdCardType");
        writer.Int(local_pRspRepeal.IdCardType);
        writer.Key("IdentifiedCardNo");
        writer.String(g2u(local_pRspRepeal.IdentifiedCardNo).c_str());
        writer.Key("CustType");
        writer.Int(local_pRspRepeal.CustType);
        writer.Key("BankAccount");
        writer.String(g2u(local_pRspRepeal.BankAccount).c_str());
        writer.Key("BankPassWord");
        writer.String(g2u(local_pRspRepeal.BankPassWord).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pRspRepeal.AccountID).c_str());
        writer.Key("Password");
        writer.String(g2u(local_pRspRepeal.Password).c_str());
        writer.Key("InstallID");
        writer.Int(local_pRspRepeal.InstallID);
        writer.Key("FutureSerial");
        writer.Int(local_pRspRepeal.FutureSerial);
        writer.Key("UserID");
        writer.String(g2u(local_pRspRepeal.UserID).c_str());
        writer.Key("VerifyCertNoFlag");
        writer.Int(local_pRspRepeal.VerifyCertNoFlag);
        writer.Key("CurrencyID");
        writer.String(g2u(local_pRspRepeal.CurrencyID).c_str());
        writer.Key("TradeAmount");
        writer.Double(local_pRspRepeal.TradeAmount);
        writer.Key("FutureFetchAmount");
        writer.Double(local_pRspRepeal.FutureFetchAmount);
        writer.Key("FeePayFlag");
        writer.Int(local_pRspRepeal.FeePayFlag);
        writer.Key("CustFee");
        writer.Double(local_pRspRepeal.CustFee);
        writer.Key("BrokerFee");
        writer.Double(local_pRspRepeal.BrokerFee);
        writer.Key("Message");
        writer.String(g2u(local_pRspRepeal.Message).c_str());
        writer.Key("Digest");
        writer.String(g2u(local_pRspRepeal.Digest).c_str());
        writer.Key("BankAccType");
        writer.Int(local_pRspRepeal.BankAccType);
        writer.Key("DeviceID");
        writer.String(g2u(local_pRspRepeal.DeviceID).c_str());
        writer.Key("BankSecuAccType");
        writer.Int(local_pRspRepeal.BankSecuAccType);
        writer.Key("BrokerIDByBank");
        writer.String(g2u(local_pRspRepeal.BrokerIDByBank).c_str());
        writer.Key("BankSecuAcc");
        writer.String(g2u(local_pRspRepeal.BankSecuAcc).c_str());
        writer.Key("BankPwdFlag");
        writer.Int(local_pRspRepeal.BankPwdFlag);
        writer.Key("SecuPwdFlag");
        writer.Int(local_pRspRepeal.SecuPwdFlag);
        writer.Key("OperNo");
        writer.String(g2u(local_pRspRepeal.OperNo).c_str());
        writer.Key("RequestID");
        writer.Int(local_pRspRepeal.RequestID);
        writer.Key("TID");
        writer.Int(local_pRspRepeal.TID);
        writer.Key("TransferStatus");
        writer.Int(local_pRspRepeal.TransferStatus);
        writer.Key("ErrorID");
        writer.Int(local_pRspRepeal.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspRepeal.ErrorMsg).c_str());
        writer.Key("LongCustomerName");
        writer.String(g2u(local_pRspRepeal.LongCustomerName).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRtnRepealFromFutureToBankByFutureManual(CThostFtdcRspRepealField * pRspRepeal)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRtnRepealFromFutureToBankByFutureManual");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcRspRepealField local_pRspRepeal = { 0 };
        if(pRspRepeal)
        {
            memcpy(&local_pRspRepeal, pRspRepeal, sizeof(CThostFtdcRspRepealField));
        }
        writer.Key("pRspRepeal");
        writer.StartObject();
        writer.Key("RepealTimeInterval");
        writer.Int(local_pRspRepeal.RepealTimeInterval);
        writer.Key("RepealedTimes");
        writer.Int(local_pRspRepeal.RepealedTimes);
        writer.Key("BankRepealFlag");
        writer.Int(local_pRspRepeal.BankRepealFlag);
        writer.Key("BrokerRepealFlag");
        writer.Int(local_pRspRepeal.BrokerRepealFlag);
        writer.Key("PlateRepealSerial");
        writer.Int(local_pRspRepeal.PlateRepealSerial);
        writer.Key("BankRepealSerial");
        writer.String(g2u(local_pRspRepeal.BankRepealSerial).c_str());
        writer.Key("FutureRepealSerial");
        writer.Int(local_pRspRepeal.FutureRepealSerial);
        writer.Key("TradeCode");
        writer.String(g2u(local_pRspRepeal.TradeCode).c_str());
        writer.Key("BankID");
        writer.String(g2u(local_pRspRepeal.BankID).c_str());
        writer.Key("BankBranchID");
        writer.String(g2u(local_pRspRepeal.BankBranchID).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pRspRepeal.BrokerID).c_str());
        writer.Key("BrokerBranchID");
        writer.String(g2u(local_pRspRepeal.BrokerBranchID).c_str());
        writer.Key("TradeDate");
        writer.String(g2u(local_pRspRepeal.TradeDate).c_str());
        writer.Key("TradeTime");
        writer.String(g2u(local_pRspRepeal.TradeTime).c_str());
        writer.Key("BankSerial");
        writer.String(g2u(local_pRspRepeal.BankSerial).c_str());
        writer.Key("TradingDay");
        writer.String(g2u(local_pRspRepeal.TradingDay).c_str());
        writer.Key("PlateSerial");
        writer.Int(local_pRspRepeal.PlateSerial);
        writer.Key("LastFragment");
        writer.Int(local_pRspRepeal.LastFragment);
        writer.Key("SessionID");
        writer.Int(local_pRspRepeal.SessionID);
        writer.Key("CustomerName");
        writer.String(g2u(local_pRspRepeal.CustomerName).c_str());
        writer.Key("IdCardType");
        writer.Int(local_pRspRepeal.IdCardType);
        writer.Key("IdentifiedCardNo");
        writer.String(g2u(local_pRspRepeal.IdentifiedCardNo).c_str());
        writer.Key("CustType");
        writer.Int(local_pRspRepeal.CustType);
        writer.Key("BankAccount");
        writer.String(g2u(local_pRspRepeal.BankAccount).c_str());
        writer.Key("BankPassWord");
        writer.String(g2u(local_pRspRepeal.BankPassWord).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pRspRepeal.AccountID).c_str());
        writer.Key("Password");
        writer.String(g2u(local_pRspRepeal.Password).c_str());
        writer.Key("InstallID");
        writer.Int(local_pRspRepeal.InstallID);
        writer.Key("FutureSerial");
        writer.Int(local_pRspRepeal.FutureSerial);
        writer.Key("UserID");
        writer.String(g2u(local_pRspRepeal.UserID).c_str());
        writer.Key("VerifyCertNoFlag");
        writer.Int(local_pRspRepeal.VerifyCertNoFlag);
        writer.Key("CurrencyID");
        writer.String(g2u(local_pRspRepeal.CurrencyID).c_str());
        writer.Key("TradeAmount");
        writer.Double(local_pRspRepeal.TradeAmount);
        writer.Key("FutureFetchAmount");
        writer.Double(local_pRspRepeal.FutureFetchAmount);
        writer.Key("FeePayFlag");
        writer.Int(local_pRspRepeal.FeePayFlag);
        writer.Key("CustFee");
        writer.Double(local_pRspRepeal.CustFee);
        writer.Key("BrokerFee");
        writer.Double(local_pRspRepeal.BrokerFee);
        writer.Key("Message");
        writer.String(g2u(local_pRspRepeal.Message).c_str());
        writer.Key("Digest");
        writer.String(g2u(local_pRspRepeal.Digest).c_str());
        writer.Key("BankAccType");
        writer.Int(local_pRspRepeal.BankAccType);
        writer.Key("DeviceID");
        writer.String(g2u(local_pRspRepeal.DeviceID).c_str());
        writer.Key("BankSecuAccType");
        writer.Int(local_pRspRepeal.BankSecuAccType);
        writer.Key("BrokerIDByBank");
        writer.String(g2u(local_pRspRepeal.BrokerIDByBank).c_str());
        writer.Key("BankSecuAcc");
        writer.String(g2u(local_pRspRepeal.BankSecuAcc).c_str());
        writer.Key("BankPwdFlag");
        writer.Int(local_pRspRepeal.BankPwdFlag);
        writer.Key("SecuPwdFlag");
        writer.Int(local_pRspRepeal.SecuPwdFlag);
        writer.Key("OperNo");
        writer.String(g2u(local_pRspRepeal.OperNo).c_str());
        writer.Key("RequestID");
        writer.Int(local_pRspRepeal.RequestID);
        writer.Key("TID");
        writer.Int(local_pRspRepeal.TID);
        writer.Key("TransferStatus");
        writer.Int(local_pRspRepeal.TransferStatus);
        writer.Key("ErrorID");
        writer.Int(local_pRspRepeal.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspRepeal.ErrorMsg).c_str());
        writer.Key("LongCustomerName");
        writer.String(g2u(local_pRspRepeal.LongCustomerName).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRtnQueryBankBalanceByFuture(CThostFtdcNotifyQueryAccountField * pNotifyQueryAccount)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRtnQueryBankBalanceByFuture");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcNotifyQueryAccountField local_pNotifyQueryAccount = { 0 };
        if(pNotifyQueryAccount)
        {
            memcpy(&local_pNotifyQueryAccount, pNotifyQueryAccount, sizeof(CThostFtdcNotifyQueryAccountField));
        }
        writer.Key("pNotifyQueryAccount");
        writer.StartObject();
        writer.Key("TradeCode");
        writer.String(g2u(local_pNotifyQueryAccount.TradeCode).c_str());
        writer.Key("BankID");
        writer.String(g2u(local_pNotifyQueryAccount.BankID).c_str());
        writer.Key("BankBranchID");
        writer.String(g2u(local_pNotifyQueryAccount.BankBranchID).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pNotifyQueryAccount.BrokerID).c_str());
        writer.Key("BrokerBranchID");
        writer.String(g2u(local_pNotifyQueryAccount.BrokerBranchID).c_str());
        writer.Key("TradeDate");
        writer.String(g2u(local_pNotifyQueryAccount.TradeDate).c_str());
        writer.Key("TradeTime");
        writer.String(g2u(local_pNotifyQueryAccount.TradeTime).c_str());
        writer.Key("BankSerial");
        writer.String(g2u(local_pNotifyQueryAccount.BankSerial).c_str());
        writer.Key("TradingDay");
        writer.String(g2u(local_pNotifyQueryAccount.TradingDay).c_str());
        writer.Key("PlateSerial");
        writer.Int(local_pNotifyQueryAccount.PlateSerial);
        writer.Key("LastFragment");
        writer.Int(local_pNotifyQueryAccount.LastFragment);
        writer.Key("SessionID");
        writer.Int(local_pNotifyQueryAccount.SessionID);
        writer.Key("CustomerName");
        writer.String(g2u(local_pNotifyQueryAccount.CustomerName).c_str());
        writer.Key("IdCardType");
        writer.Int(local_pNotifyQueryAccount.IdCardType);
        writer.Key("IdentifiedCardNo");
        writer.String(g2u(local_pNotifyQueryAccount.IdentifiedCardNo).c_str());
        writer.Key("CustType");
        writer.Int(local_pNotifyQueryAccount.CustType);
        writer.Key("BankAccount");
        writer.String(g2u(local_pNotifyQueryAccount.BankAccount).c_str());
        writer.Key("BankPassWord");
        writer.String(g2u(local_pNotifyQueryAccount.BankPassWord).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pNotifyQueryAccount.AccountID).c_str());
        writer.Key("Password");
        writer.String(g2u(local_pNotifyQueryAccount.Password).c_str());
        writer.Key("FutureSerial");
        writer.Int(local_pNotifyQueryAccount.FutureSerial);
        writer.Key("InstallID");
        writer.Int(local_pNotifyQueryAccount.InstallID);
        writer.Key("UserID");
        writer.String(g2u(local_pNotifyQueryAccount.UserID).c_str());
        writer.Key("VerifyCertNoFlag");
        writer.Int(local_pNotifyQueryAccount.VerifyCertNoFlag);
        writer.Key("CurrencyID");
        writer.String(g2u(local_pNotifyQueryAccount.CurrencyID).c_str());
        writer.Key("Digest");
        writer.String(g2u(local_pNotifyQueryAccount.Digest).c_str());
        writer.Key("BankAccType");
        writer.Int(local_pNotifyQueryAccount.BankAccType);
        writer.Key("DeviceID");
        writer.String(g2u(local_pNotifyQueryAccount.DeviceID).c_str());
        writer.Key("BankSecuAccType");
        writer.Int(local_pNotifyQueryAccount.BankSecuAccType);
        writer.Key("BrokerIDByBank");
        writer.String(g2u(local_pNotifyQueryAccount.BrokerIDByBank).c_str());
        writer.Key("BankSecuAcc");
        writer.String(g2u(local_pNotifyQueryAccount.BankSecuAcc).c_str());
        writer.Key("BankPwdFlag");
        writer.Int(local_pNotifyQueryAccount.BankPwdFlag);
        writer.Key("SecuPwdFlag");
        writer.Int(local_pNotifyQueryAccount.SecuPwdFlag);
        writer.Key("OperNo");
        writer.String(g2u(local_pNotifyQueryAccount.OperNo).c_str());
        writer.Key("RequestID");
        writer.Int(local_pNotifyQueryAccount.RequestID);
        writer.Key("TID");
        writer.Int(local_pNotifyQueryAccount.TID);
        writer.Key("BankUseAmount");
        writer.Double(local_pNotifyQueryAccount.BankUseAmount);
        writer.Key("BankFetchAmount");
        writer.Double(local_pNotifyQueryAccount.BankFetchAmount);
        writer.Key("ErrorID");
        writer.Int(local_pNotifyQueryAccount.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pNotifyQueryAccount.ErrorMsg).c_str());
        writer.Key("LongCustomerName");
        writer.String(g2u(local_pNotifyQueryAccount.LongCustomerName).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnErrRtnBankToFutureByFuture(CThostFtdcReqTransferField * pReqTransfer, CThostFtdcRspInfoField * pRspInfo)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnErrRtnBankToFutureByFuture");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcReqTransferField local_pReqTransfer = { 0 };
        if(pReqTransfer)
        {
            memcpy(&local_pReqTransfer, pReqTransfer, sizeof(CThostFtdcReqTransferField));
        }
        writer.Key("pReqTransfer");
        writer.StartObject();
        writer.Key("TradeCode");
        writer.String(g2u(local_pReqTransfer.TradeCode).c_str());
        writer.Key("BankID");
        writer.String(g2u(local_pReqTransfer.BankID).c_str());
        writer.Key("BankBranchID");
        writer.String(g2u(local_pReqTransfer.BankBranchID).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pReqTransfer.BrokerID).c_str());
        writer.Key("BrokerBranchID");
        writer.String(g2u(local_pReqTransfer.BrokerBranchID).c_str());
        writer.Key("TradeDate");
        writer.String(g2u(local_pReqTransfer.TradeDate).c_str());
        writer.Key("TradeTime");
        writer.String(g2u(local_pReqTransfer.TradeTime).c_str());
        writer.Key("BankSerial");
        writer.String(g2u(local_pReqTransfer.BankSerial).c_str());
        writer.Key("TradingDay");
        writer.String(g2u(local_pReqTransfer.TradingDay).c_str());
        writer.Key("PlateSerial");
        writer.Int(local_pReqTransfer.PlateSerial);
        writer.Key("LastFragment");
        writer.Int(local_pReqTransfer.LastFragment);
        writer.Key("SessionID");
        writer.Int(local_pReqTransfer.SessionID);
        writer.Key("CustomerName");
        writer.String(g2u(local_pReqTransfer.CustomerName).c_str());
        writer.Key("IdCardType");
        writer.Int(local_pReqTransfer.IdCardType);
        writer.Key("IdentifiedCardNo");
        writer.String(g2u(local_pReqTransfer.IdentifiedCardNo).c_str());
        writer.Key("CustType");
        writer.Int(local_pReqTransfer.CustType);
        writer.Key("BankAccount");
        writer.String(g2u(local_pReqTransfer.BankAccount).c_str());
        writer.Key("BankPassWord");
        writer.String(g2u(local_pReqTransfer.BankPassWord).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pReqTransfer.AccountID).c_str());
        writer.Key("Password");
        writer.String(g2u(local_pReqTransfer.Password).c_str());
        writer.Key("InstallID");
        writer.Int(local_pReqTransfer.InstallID);
        writer.Key("FutureSerial");
        writer.Int(local_pReqTransfer.FutureSerial);
        writer.Key("UserID");
        writer.String(g2u(local_pReqTransfer.UserID).c_str());
        writer.Key("VerifyCertNoFlag");
        writer.Int(local_pReqTransfer.VerifyCertNoFlag);
        writer.Key("CurrencyID");
        writer.String(g2u(local_pReqTransfer.CurrencyID).c_str());
        writer.Key("TradeAmount");
        writer.Double(local_pReqTransfer.TradeAmount);
        writer.Key("FutureFetchAmount");
        writer.Double(local_pReqTransfer.FutureFetchAmount);
        writer.Key("FeePayFlag");
        writer.Int(local_pReqTransfer.FeePayFlag);
        writer.Key("CustFee");
        writer.Double(local_pReqTransfer.CustFee);
        writer.Key("BrokerFee");
        writer.Double(local_pReqTransfer.BrokerFee);
        writer.Key("Message");
        writer.String(g2u(local_pReqTransfer.Message).c_str());
        writer.Key("Digest");
        writer.String(g2u(local_pReqTransfer.Digest).c_str());
        writer.Key("BankAccType");
        writer.Int(local_pReqTransfer.BankAccType);
        writer.Key("DeviceID");
        writer.String(g2u(local_pReqTransfer.DeviceID).c_str());
        writer.Key("BankSecuAccType");
        writer.Int(local_pReqTransfer.BankSecuAccType);
        writer.Key("BrokerIDByBank");
        writer.String(g2u(local_pReqTransfer.BrokerIDByBank).c_str());
        writer.Key("BankSecuAcc");
        writer.String(g2u(local_pReqTransfer.BankSecuAcc).c_str());
        writer.Key("BankPwdFlag");
        writer.Int(local_pReqTransfer.BankPwdFlag);
        writer.Key("SecuPwdFlag");
        writer.Int(local_pReqTransfer.SecuPwdFlag);
        writer.Key("OperNo");
        writer.String(g2u(local_pReqTransfer.OperNo).c_str());
        writer.Key("RequestID");
        writer.Int(local_pReqTransfer.RequestID);
        writer.Key("TID");
        writer.Int(local_pReqTransfer.TID);
        writer.Key("TransferStatus");
        writer.Int(local_pReqTransfer.TransferStatus);
        writer.Key("LongCustomerName");
        writer.String(g2u(local_pReqTransfer.LongCustomerName).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnErrRtnFutureToBankByFuture(CThostFtdcReqTransferField * pReqTransfer, CThostFtdcRspInfoField * pRspInfo)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnErrRtnFutureToBankByFuture");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcReqTransferField local_pReqTransfer = { 0 };
        if(pReqTransfer)
        {
            memcpy(&local_pReqTransfer, pReqTransfer, sizeof(CThostFtdcReqTransferField));
        }
        writer.Key("pReqTransfer");
        writer.StartObject();
        writer.Key("TradeCode");
        writer.String(g2u(local_pReqTransfer.TradeCode).c_str());
        writer.Key("BankID");
        writer.String(g2u(local_pReqTransfer.BankID).c_str());
        writer.Key("BankBranchID");
        writer.String(g2u(local_pReqTransfer.BankBranchID).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pReqTransfer.BrokerID).c_str());
        writer.Key("BrokerBranchID");
        writer.String(g2u(local_pReqTransfer.BrokerBranchID).c_str());
        writer.Key("TradeDate");
        writer.String(g2u(local_pReqTransfer.TradeDate).c_str());
        writer.Key("TradeTime");
        writer.String(g2u(local_pReqTransfer.TradeTime).c_str());
        writer.Key("BankSerial");
        writer.String(g2u(local_pReqTransfer.BankSerial).c_str());
        writer.Key("TradingDay");
        writer.String(g2u(local_pReqTransfer.TradingDay).c_str());
        writer.Key("PlateSerial");
        writer.Int(local_pReqTransfer.PlateSerial);
        writer.Key("LastFragment");
        writer.Int(local_pReqTransfer.LastFragment);
        writer.Key("SessionID");
        writer.Int(local_pReqTransfer.SessionID);
        writer.Key("CustomerName");
        writer.String(g2u(local_pReqTransfer.CustomerName).c_str());
        writer.Key("IdCardType");
        writer.Int(local_pReqTransfer.IdCardType);
        writer.Key("IdentifiedCardNo");
        writer.String(g2u(local_pReqTransfer.IdentifiedCardNo).c_str());
        writer.Key("CustType");
        writer.Int(local_pReqTransfer.CustType);
        writer.Key("BankAccount");
        writer.String(g2u(local_pReqTransfer.BankAccount).c_str());
        writer.Key("BankPassWord");
        writer.String(g2u(local_pReqTransfer.BankPassWord).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pReqTransfer.AccountID).c_str());
        writer.Key("Password");
        writer.String(g2u(local_pReqTransfer.Password).c_str());
        writer.Key("InstallID");
        writer.Int(local_pReqTransfer.InstallID);
        writer.Key("FutureSerial");
        writer.Int(local_pReqTransfer.FutureSerial);
        writer.Key("UserID");
        writer.String(g2u(local_pReqTransfer.UserID).c_str());
        writer.Key("VerifyCertNoFlag");
        writer.Int(local_pReqTransfer.VerifyCertNoFlag);
        writer.Key("CurrencyID");
        writer.String(g2u(local_pReqTransfer.CurrencyID).c_str());
        writer.Key("TradeAmount");
        writer.Double(local_pReqTransfer.TradeAmount);
        writer.Key("FutureFetchAmount");
        writer.Double(local_pReqTransfer.FutureFetchAmount);
        writer.Key("FeePayFlag");
        writer.Int(local_pReqTransfer.FeePayFlag);
        writer.Key("CustFee");
        writer.Double(local_pReqTransfer.CustFee);
        writer.Key("BrokerFee");
        writer.Double(local_pReqTransfer.BrokerFee);
        writer.Key("Message");
        writer.String(g2u(local_pReqTransfer.Message).c_str());
        writer.Key("Digest");
        writer.String(g2u(local_pReqTransfer.Digest).c_str());
        writer.Key("BankAccType");
        writer.Int(local_pReqTransfer.BankAccType);
        writer.Key("DeviceID");
        writer.String(g2u(local_pReqTransfer.DeviceID).c_str());
        writer.Key("BankSecuAccType");
        writer.Int(local_pReqTransfer.BankSecuAccType);
        writer.Key("BrokerIDByBank");
        writer.String(g2u(local_pReqTransfer.BrokerIDByBank).c_str());
        writer.Key("BankSecuAcc");
        writer.String(g2u(local_pReqTransfer.BankSecuAcc).c_str());
        writer.Key("BankPwdFlag");
        writer.Int(local_pReqTransfer.BankPwdFlag);
        writer.Key("SecuPwdFlag");
        writer.Int(local_pReqTransfer.SecuPwdFlag);
        writer.Key("OperNo");
        writer.String(g2u(local_pReqTransfer.OperNo).c_str());
        writer.Key("RequestID");
        writer.Int(local_pReqTransfer.RequestID);
        writer.Key("TID");
        writer.Int(local_pReqTransfer.TID);
        writer.Key("TransferStatus");
        writer.Int(local_pReqTransfer.TransferStatus);
        writer.Key("LongCustomerName");
        writer.String(g2u(local_pReqTransfer.LongCustomerName).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnErrRtnRepealBankToFutureByFutureManual(CThostFtdcReqRepealField * pReqRepeal, CThostFtdcRspInfoField * pRspInfo)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnErrRtnRepealBankToFutureByFutureManual");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcReqRepealField local_pReqRepeal = { 0 };
        if(pReqRepeal)
        {
            memcpy(&local_pReqRepeal, pReqRepeal, sizeof(CThostFtdcReqRepealField));
        }
        writer.Key("pReqRepeal");
        writer.StartObject();
        writer.Key("RepealTimeInterval");
        writer.Int(local_pReqRepeal.RepealTimeInterval);
        writer.Key("RepealedTimes");
        writer.Int(local_pReqRepeal.RepealedTimes);
        writer.Key("BankRepealFlag");
        writer.Int(local_pReqRepeal.BankRepealFlag);
        writer.Key("BrokerRepealFlag");
        writer.Int(local_pReqRepeal.BrokerRepealFlag);
        writer.Key("PlateRepealSerial");
        writer.Int(local_pReqRepeal.PlateRepealSerial);
        writer.Key("BankRepealSerial");
        writer.String(g2u(local_pReqRepeal.BankRepealSerial).c_str());
        writer.Key("FutureRepealSerial");
        writer.Int(local_pReqRepeal.FutureRepealSerial);
        writer.Key("TradeCode");
        writer.String(g2u(local_pReqRepeal.TradeCode).c_str());
        writer.Key("BankID");
        writer.String(g2u(local_pReqRepeal.BankID).c_str());
        writer.Key("BankBranchID");
        writer.String(g2u(local_pReqRepeal.BankBranchID).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pReqRepeal.BrokerID).c_str());
        writer.Key("BrokerBranchID");
        writer.String(g2u(local_pReqRepeal.BrokerBranchID).c_str());
        writer.Key("TradeDate");
        writer.String(g2u(local_pReqRepeal.TradeDate).c_str());
        writer.Key("TradeTime");
        writer.String(g2u(local_pReqRepeal.TradeTime).c_str());
        writer.Key("BankSerial");
        writer.String(g2u(local_pReqRepeal.BankSerial).c_str());
        writer.Key("TradingDay");
        writer.String(g2u(local_pReqRepeal.TradingDay).c_str());
        writer.Key("PlateSerial");
        writer.Int(local_pReqRepeal.PlateSerial);
        writer.Key("LastFragment");
        writer.Int(local_pReqRepeal.LastFragment);
        writer.Key("SessionID");
        writer.Int(local_pReqRepeal.SessionID);
        writer.Key("CustomerName");
        writer.String(g2u(local_pReqRepeal.CustomerName).c_str());
        writer.Key("IdCardType");
        writer.Int(local_pReqRepeal.IdCardType);
        writer.Key("IdentifiedCardNo");
        writer.String(g2u(local_pReqRepeal.IdentifiedCardNo).c_str());
        writer.Key("CustType");
        writer.Int(local_pReqRepeal.CustType);
        writer.Key("BankAccount");
        writer.String(g2u(local_pReqRepeal.BankAccount).c_str());
        writer.Key("BankPassWord");
        writer.String(g2u(local_pReqRepeal.BankPassWord).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pReqRepeal.AccountID).c_str());
        writer.Key("Password");
        writer.String(g2u(local_pReqRepeal.Password).c_str());
        writer.Key("InstallID");
        writer.Int(local_pReqRepeal.InstallID);
        writer.Key("FutureSerial");
        writer.Int(local_pReqRepeal.FutureSerial);
        writer.Key("UserID");
        writer.String(g2u(local_pReqRepeal.UserID).c_str());
        writer.Key("VerifyCertNoFlag");
        writer.Int(local_pReqRepeal.VerifyCertNoFlag);
        writer.Key("CurrencyID");
        writer.String(g2u(local_pReqRepeal.CurrencyID).c_str());
        writer.Key("TradeAmount");
        writer.Double(local_pReqRepeal.TradeAmount);
        writer.Key("FutureFetchAmount");
        writer.Double(local_pReqRepeal.FutureFetchAmount);
        writer.Key("FeePayFlag");
        writer.Int(local_pReqRepeal.FeePayFlag);
        writer.Key("CustFee");
        writer.Double(local_pReqRepeal.CustFee);
        writer.Key("BrokerFee");
        writer.Double(local_pReqRepeal.BrokerFee);
        writer.Key("Message");
        writer.String(g2u(local_pReqRepeal.Message).c_str());
        writer.Key("Digest");
        writer.String(g2u(local_pReqRepeal.Digest).c_str());
        writer.Key("BankAccType");
        writer.Int(local_pReqRepeal.BankAccType);
        writer.Key("DeviceID");
        writer.String(g2u(local_pReqRepeal.DeviceID).c_str());
        writer.Key("BankSecuAccType");
        writer.Int(local_pReqRepeal.BankSecuAccType);
        writer.Key("BrokerIDByBank");
        writer.String(g2u(local_pReqRepeal.BrokerIDByBank).c_str());
        writer.Key("BankSecuAcc");
        writer.String(g2u(local_pReqRepeal.BankSecuAcc).c_str());
        writer.Key("BankPwdFlag");
        writer.Int(local_pReqRepeal.BankPwdFlag);
        writer.Key("SecuPwdFlag");
        writer.Int(local_pReqRepeal.SecuPwdFlag);
        writer.Key("OperNo");
        writer.String(g2u(local_pReqRepeal.OperNo).c_str());
        writer.Key("RequestID");
        writer.Int(local_pReqRepeal.RequestID);
        writer.Key("TID");
        writer.Int(local_pReqRepeal.TID);
        writer.Key("TransferStatus");
        writer.Int(local_pReqRepeal.TransferStatus);
        writer.Key("LongCustomerName");
        writer.String(g2u(local_pReqRepeal.LongCustomerName).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnErrRtnRepealFutureToBankByFutureManual(CThostFtdcReqRepealField * pReqRepeal, CThostFtdcRspInfoField * pRspInfo)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnErrRtnRepealFutureToBankByFutureManual");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcReqRepealField local_pReqRepeal = { 0 };
        if(pReqRepeal)
        {
            memcpy(&local_pReqRepeal, pReqRepeal, sizeof(CThostFtdcReqRepealField));
        }
        writer.Key("pReqRepeal");
        writer.StartObject();
        writer.Key("RepealTimeInterval");
        writer.Int(local_pReqRepeal.RepealTimeInterval);
        writer.Key("RepealedTimes");
        writer.Int(local_pReqRepeal.RepealedTimes);
        writer.Key("BankRepealFlag");
        writer.Int(local_pReqRepeal.BankRepealFlag);
        writer.Key("BrokerRepealFlag");
        writer.Int(local_pReqRepeal.BrokerRepealFlag);
        writer.Key("PlateRepealSerial");
        writer.Int(local_pReqRepeal.PlateRepealSerial);
        writer.Key("BankRepealSerial");
        writer.String(g2u(local_pReqRepeal.BankRepealSerial).c_str());
        writer.Key("FutureRepealSerial");
        writer.Int(local_pReqRepeal.FutureRepealSerial);
        writer.Key("TradeCode");
        writer.String(g2u(local_pReqRepeal.TradeCode).c_str());
        writer.Key("BankID");
        writer.String(g2u(local_pReqRepeal.BankID).c_str());
        writer.Key("BankBranchID");
        writer.String(g2u(local_pReqRepeal.BankBranchID).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pReqRepeal.BrokerID).c_str());
        writer.Key("BrokerBranchID");
        writer.String(g2u(local_pReqRepeal.BrokerBranchID).c_str());
        writer.Key("TradeDate");
        writer.String(g2u(local_pReqRepeal.TradeDate).c_str());
        writer.Key("TradeTime");
        writer.String(g2u(local_pReqRepeal.TradeTime).c_str());
        writer.Key("BankSerial");
        writer.String(g2u(local_pReqRepeal.BankSerial).c_str());
        writer.Key("TradingDay");
        writer.String(g2u(local_pReqRepeal.TradingDay).c_str());
        writer.Key("PlateSerial");
        writer.Int(local_pReqRepeal.PlateSerial);
        writer.Key("LastFragment");
        writer.Int(local_pReqRepeal.LastFragment);
        writer.Key("SessionID");
        writer.Int(local_pReqRepeal.SessionID);
        writer.Key("CustomerName");
        writer.String(g2u(local_pReqRepeal.CustomerName).c_str());
        writer.Key("IdCardType");
        writer.Int(local_pReqRepeal.IdCardType);
        writer.Key("IdentifiedCardNo");
        writer.String(g2u(local_pReqRepeal.IdentifiedCardNo).c_str());
        writer.Key("CustType");
        writer.Int(local_pReqRepeal.CustType);
        writer.Key("BankAccount");
        writer.String(g2u(local_pReqRepeal.BankAccount).c_str());
        writer.Key("BankPassWord");
        writer.String(g2u(local_pReqRepeal.BankPassWord).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pReqRepeal.AccountID).c_str());
        writer.Key("Password");
        writer.String(g2u(local_pReqRepeal.Password).c_str());
        writer.Key("InstallID");
        writer.Int(local_pReqRepeal.InstallID);
        writer.Key("FutureSerial");
        writer.Int(local_pReqRepeal.FutureSerial);
        writer.Key("UserID");
        writer.String(g2u(local_pReqRepeal.UserID).c_str());
        writer.Key("VerifyCertNoFlag");
        writer.Int(local_pReqRepeal.VerifyCertNoFlag);
        writer.Key("CurrencyID");
        writer.String(g2u(local_pReqRepeal.CurrencyID).c_str());
        writer.Key("TradeAmount");
        writer.Double(local_pReqRepeal.TradeAmount);
        writer.Key("FutureFetchAmount");
        writer.Double(local_pReqRepeal.FutureFetchAmount);
        writer.Key("FeePayFlag");
        writer.Int(local_pReqRepeal.FeePayFlag);
        writer.Key("CustFee");
        writer.Double(local_pReqRepeal.CustFee);
        writer.Key("BrokerFee");
        writer.Double(local_pReqRepeal.BrokerFee);
        writer.Key("Message");
        writer.String(g2u(local_pReqRepeal.Message).c_str());
        writer.Key("Digest");
        writer.String(g2u(local_pReqRepeal.Digest).c_str());
        writer.Key("BankAccType");
        writer.Int(local_pReqRepeal.BankAccType);
        writer.Key("DeviceID");
        writer.String(g2u(local_pReqRepeal.DeviceID).c_str());
        writer.Key("BankSecuAccType");
        writer.Int(local_pReqRepeal.BankSecuAccType);
        writer.Key("BrokerIDByBank");
        writer.String(g2u(local_pReqRepeal.BrokerIDByBank).c_str());
        writer.Key("BankSecuAcc");
        writer.String(g2u(local_pReqRepeal.BankSecuAcc).c_str());
        writer.Key("BankPwdFlag");
        writer.Int(local_pReqRepeal.BankPwdFlag);
        writer.Key("SecuPwdFlag");
        writer.Int(local_pReqRepeal.SecuPwdFlag);
        writer.Key("OperNo");
        writer.String(g2u(local_pReqRepeal.OperNo).c_str());
        writer.Key("RequestID");
        writer.Int(local_pReqRepeal.RequestID);
        writer.Key("TID");
        writer.Int(local_pReqRepeal.TID);
        writer.Key("TransferStatus");
        writer.Int(local_pReqRepeal.TransferStatus);
        writer.Key("LongCustomerName");
        writer.String(g2u(local_pReqRepeal.LongCustomerName).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnErrRtnQueryBankBalanceByFuture(CThostFtdcReqQueryAccountField * pReqQueryAccount, CThostFtdcRspInfoField * pRspInfo)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnErrRtnQueryBankBalanceByFuture");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcReqQueryAccountField local_pReqQueryAccount = { 0 };
        if(pReqQueryAccount)
        {
            memcpy(&local_pReqQueryAccount, pReqQueryAccount, sizeof(CThostFtdcReqQueryAccountField));
        }
        writer.Key("pReqQueryAccount");
        writer.StartObject();
        writer.Key("TradeCode");
        writer.String(g2u(local_pReqQueryAccount.TradeCode).c_str());
        writer.Key("BankID");
        writer.String(g2u(local_pReqQueryAccount.BankID).c_str());
        writer.Key("BankBranchID");
        writer.String(g2u(local_pReqQueryAccount.BankBranchID).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pReqQueryAccount.BrokerID).c_str());
        writer.Key("BrokerBranchID");
        writer.String(g2u(local_pReqQueryAccount.BrokerBranchID).c_str());
        writer.Key("TradeDate");
        writer.String(g2u(local_pReqQueryAccount.TradeDate).c_str());
        writer.Key("TradeTime");
        writer.String(g2u(local_pReqQueryAccount.TradeTime).c_str());
        writer.Key("BankSerial");
        writer.String(g2u(local_pReqQueryAccount.BankSerial).c_str());
        writer.Key("TradingDay");
        writer.String(g2u(local_pReqQueryAccount.TradingDay).c_str());
        writer.Key("PlateSerial");
        writer.Int(local_pReqQueryAccount.PlateSerial);
        writer.Key("LastFragment");
        writer.Int(local_pReqQueryAccount.LastFragment);
        writer.Key("SessionID");
        writer.Int(local_pReqQueryAccount.SessionID);
        writer.Key("CustomerName");
        writer.String(g2u(local_pReqQueryAccount.CustomerName).c_str());
        writer.Key("IdCardType");
        writer.Int(local_pReqQueryAccount.IdCardType);
        writer.Key("IdentifiedCardNo");
        writer.String(g2u(local_pReqQueryAccount.IdentifiedCardNo).c_str());
        writer.Key("CustType");
        writer.Int(local_pReqQueryAccount.CustType);
        writer.Key("BankAccount");
        writer.String(g2u(local_pReqQueryAccount.BankAccount).c_str());
        writer.Key("BankPassWord");
        writer.String(g2u(local_pReqQueryAccount.BankPassWord).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pReqQueryAccount.AccountID).c_str());
        writer.Key("Password");
        writer.String(g2u(local_pReqQueryAccount.Password).c_str());
        writer.Key("FutureSerial");
        writer.Int(local_pReqQueryAccount.FutureSerial);
        writer.Key("InstallID");
        writer.Int(local_pReqQueryAccount.InstallID);
        writer.Key("UserID");
        writer.String(g2u(local_pReqQueryAccount.UserID).c_str());
        writer.Key("VerifyCertNoFlag");
        writer.Int(local_pReqQueryAccount.VerifyCertNoFlag);
        writer.Key("CurrencyID");
        writer.String(g2u(local_pReqQueryAccount.CurrencyID).c_str());
        writer.Key("Digest");
        writer.String(g2u(local_pReqQueryAccount.Digest).c_str());
        writer.Key("BankAccType");
        writer.Int(local_pReqQueryAccount.BankAccType);
        writer.Key("DeviceID");
        writer.String(g2u(local_pReqQueryAccount.DeviceID).c_str());
        writer.Key("BankSecuAccType");
        writer.Int(local_pReqQueryAccount.BankSecuAccType);
        writer.Key("BrokerIDByBank");
        writer.String(g2u(local_pReqQueryAccount.BrokerIDByBank).c_str());
        writer.Key("BankSecuAcc");
        writer.String(g2u(local_pReqQueryAccount.BankSecuAcc).c_str());
        writer.Key("BankPwdFlag");
        writer.Int(local_pReqQueryAccount.BankPwdFlag);
        writer.Key("SecuPwdFlag");
        writer.Int(local_pReqQueryAccount.SecuPwdFlag);
        writer.Key("OperNo");
        writer.String(g2u(local_pReqQueryAccount.OperNo).c_str());
        writer.Key("RequestID");
        writer.Int(local_pReqQueryAccount.RequestID);
        writer.Key("TID");
        writer.Int(local_pReqQueryAccount.TID);
        writer.Key("LongCustomerName");
        writer.String(g2u(local_pReqQueryAccount.LongCustomerName).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRtnRepealFromBankToFutureByFuture(CThostFtdcRspRepealField * pRspRepeal)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRtnRepealFromBankToFutureByFuture");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcRspRepealField local_pRspRepeal = { 0 };
        if(pRspRepeal)
        {
            memcpy(&local_pRspRepeal, pRspRepeal, sizeof(CThostFtdcRspRepealField));
        }
        writer.Key("pRspRepeal");
        writer.StartObject();
        writer.Key("RepealTimeInterval");
        writer.Int(local_pRspRepeal.RepealTimeInterval);
        writer.Key("RepealedTimes");
        writer.Int(local_pRspRepeal.RepealedTimes);
        writer.Key("BankRepealFlag");
        writer.Int(local_pRspRepeal.BankRepealFlag);
        writer.Key("BrokerRepealFlag");
        writer.Int(local_pRspRepeal.BrokerRepealFlag);
        writer.Key("PlateRepealSerial");
        writer.Int(local_pRspRepeal.PlateRepealSerial);
        writer.Key("BankRepealSerial");
        writer.String(g2u(local_pRspRepeal.BankRepealSerial).c_str());
        writer.Key("FutureRepealSerial");
        writer.Int(local_pRspRepeal.FutureRepealSerial);
        writer.Key("TradeCode");
        writer.String(g2u(local_pRspRepeal.TradeCode).c_str());
        writer.Key("BankID");
        writer.String(g2u(local_pRspRepeal.BankID).c_str());
        writer.Key("BankBranchID");
        writer.String(g2u(local_pRspRepeal.BankBranchID).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pRspRepeal.BrokerID).c_str());
        writer.Key("BrokerBranchID");
        writer.String(g2u(local_pRspRepeal.BrokerBranchID).c_str());
        writer.Key("TradeDate");
        writer.String(g2u(local_pRspRepeal.TradeDate).c_str());
        writer.Key("TradeTime");
        writer.String(g2u(local_pRspRepeal.TradeTime).c_str());
        writer.Key("BankSerial");
        writer.String(g2u(local_pRspRepeal.BankSerial).c_str());
        writer.Key("TradingDay");
        writer.String(g2u(local_pRspRepeal.TradingDay).c_str());
        writer.Key("PlateSerial");
        writer.Int(local_pRspRepeal.PlateSerial);
        writer.Key("LastFragment");
        writer.Int(local_pRspRepeal.LastFragment);
        writer.Key("SessionID");
        writer.Int(local_pRspRepeal.SessionID);
        writer.Key("CustomerName");
        writer.String(g2u(local_pRspRepeal.CustomerName).c_str());
        writer.Key("IdCardType");
        writer.Int(local_pRspRepeal.IdCardType);
        writer.Key("IdentifiedCardNo");
        writer.String(g2u(local_pRspRepeal.IdentifiedCardNo).c_str());
        writer.Key("CustType");
        writer.Int(local_pRspRepeal.CustType);
        writer.Key("BankAccount");
        writer.String(g2u(local_pRspRepeal.BankAccount).c_str());
        writer.Key("BankPassWord");
        writer.String(g2u(local_pRspRepeal.BankPassWord).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pRspRepeal.AccountID).c_str());
        writer.Key("Password");
        writer.String(g2u(local_pRspRepeal.Password).c_str());
        writer.Key("InstallID");
        writer.Int(local_pRspRepeal.InstallID);
        writer.Key("FutureSerial");
        writer.Int(local_pRspRepeal.FutureSerial);
        writer.Key("UserID");
        writer.String(g2u(local_pRspRepeal.UserID).c_str());
        writer.Key("VerifyCertNoFlag");
        writer.Int(local_pRspRepeal.VerifyCertNoFlag);
        writer.Key("CurrencyID");
        writer.String(g2u(local_pRspRepeal.CurrencyID).c_str());
        writer.Key("TradeAmount");
        writer.Double(local_pRspRepeal.TradeAmount);
        writer.Key("FutureFetchAmount");
        writer.Double(local_pRspRepeal.FutureFetchAmount);
        writer.Key("FeePayFlag");
        writer.Int(local_pRspRepeal.FeePayFlag);
        writer.Key("CustFee");
        writer.Double(local_pRspRepeal.CustFee);
        writer.Key("BrokerFee");
        writer.Double(local_pRspRepeal.BrokerFee);
        writer.Key("Message");
        writer.String(g2u(local_pRspRepeal.Message).c_str());
        writer.Key("Digest");
        writer.String(g2u(local_pRspRepeal.Digest).c_str());
        writer.Key("BankAccType");
        writer.Int(local_pRspRepeal.BankAccType);
        writer.Key("DeviceID");
        writer.String(g2u(local_pRspRepeal.DeviceID).c_str());
        writer.Key("BankSecuAccType");
        writer.Int(local_pRspRepeal.BankSecuAccType);
        writer.Key("BrokerIDByBank");
        writer.String(g2u(local_pRspRepeal.BrokerIDByBank).c_str());
        writer.Key("BankSecuAcc");
        writer.String(g2u(local_pRspRepeal.BankSecuAcc).c_str());
        writer.Key("BankPwdFlag");
        writer.Int(local_pRspRepeal.BankPwdFlag);
        writer.Key("SecuPwdFlag");
        writer.Int(local_pRspRepeal.SecuPwdFlag);
        writer.Key("OperNo");
        writer.String(g2u(local_pRspRepeal.OperNo).c_str());
        writer.Key("RequestID");
        writer.Int(local_pRspRepeal.RequestID);
        writer.Key("TID");
        writer.Int(local_pRspRepeal.TID);
        writer.Key("TransferStatus");
        writer.Int(local_pRspRepeal.TransferStatus);
        writer.Key("ErrorID");
        writer.Int(local_pRspRepeal.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspRepeal.ErrorMsg).c_str());
        writer.Key("LongCustomerName");
        writer.String(g2u(local_pRspRepeal.LongCustomerName).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRtnRepealFromFutureToBankByFuture(CThostFtdcRspRepealField * pRspRepeal)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRtnRepealFromFutureToBankByFuture");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcRspRepealField local_pRspRepeal = { 0 };
        if(pRspRepeal)
        {
            memcpy(&local_pRspRepeal, pRspRepeal, sizeof(CThostFtdcRspRepealField));
        }
        writer.Key("pRspRepeal");
        writer.StartObject();
        writer.Key("RepealTimeInterval");
        writer.Int(local_pRspRepeal.RepealTimeInterval);
        writer.Key("RepealedTimes");
        writer.Int(local_pRspRepeal.RepealedTimes);
        writer.Key("BankRepealFlag");
        writer.Int(local_pRspRepeal.BankRepealFlag);
        writer.Key("BrokerRepealFlag");
        writer.Int(local_pRspRepeal.BrokerRepealFlag);
        writer.Key("PlateRepealSerial");
        writer.Int(local_pRspRepeal.PlateRepealSerial);
        writer.Key("BankRepealSerial");
        writer.String(g2u(local_pRspRepeal.BankRepealSerial).c_str());
        writer.Key("FutureRepealSerial");
        writer.Int(local_pRspRepeal.FutureRepealSerial);
        writer.Key("TradeCode");
        writer.String(g2u(local_pRspRepeal.TradeCode).c_str());
        writer.Key("BankID");
        writer.String(g2u(local_pRspRepeal.BankID).c_str());
        writer.Key("BankBranchID");
        writer.String(g2u(local_pRspRepeal.BankBranchID).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pRspRepeal.BrokerID).c_str());
        writer.Key("BrokerBranchID");
        writer.String(g2u(local_pRspRepeal.BrokerBranchID).c_str());
        writer.Key("TradeDate");
        writer.String(g2u(local_pRspRepeal.TradeDate).c_str());
        writer.Key("TradeTime");
        writer.String(g2u(local_pRspRepeal.TradeTime).c_str());
        writer.Key("BankSerial");
        writer.String(g2u(local_pRspRepeal.BankSerial).c_str());
        writer.Key("TradingDay");
        writer.String(g2u(local_pRspRepeal.TradingDay).c_str());
        writer.Key("PlateSerial");
        writer.Int(local_pRspRepeal.PlateSerial);
        writer.Key("LastFragment");
        writer.Int(local_pRspRepeal.LastFragment);
        writer.Key("SessionID");
        writer.Int(local_pRspRepeal.SessionID);
        writer.Key("CustomerName");
        writer.String(g2u(local_pRspRepeal.CustomerName).c_str());
        writer.Key("IdCardType");
        writer.Int(local_pRspRepeal.IdCardType);
        writer.Key("IdentifiedCardNo");
        writer.String(g2u(local_pRspRepeal.IdentifiedCardNo).c_str());
        writer.Key("CustType");
        writer.Int(local_pRspRepeal.CustType);
        writer.Key("BankAccount");
        writer.String(g2u(local_pRspRepeal.BankAccount).c_str());
        writer.Key("BankPassWord");
        writer.String(g2u(local_pRspRepeal.BankPassWord).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pRspRepeal.AccountID).c_str());
        writer.Key("Password");
        writer.String(g2u(local_pRspRepeal.Password).c_str());
        writer.Key("InstallID");
        writer.Int(local_pRspRepeal.InstallID);
        writer.Key("FutureSerial");
        writer.Int(local_pRspRepeal.FutureSerial);
        writer.Key("UserID");
        writer.String(g2u(local_pRspRepeal.UserID).c_str());
        writer.Key("VerifyCertNoFlag");
        writer.Int(local_pRspRepeal.VerifyCertNoFlag);
        writer.Key("CurrencyID");
        writer.String(g2u(local_pRspRepeal.CurrencyID).c_str());
        writer.Key("TradeAmount");
        writer.Double(local_pRspRepeal.TradeAmount);
        writer.Key("FutureFetchAmount");
        writer.Double(local_pRspRepeal.FutureFetchAmount);
        writer.Key("FeePayFlag");
        writer.Int(local_pRspRepeal.FeePayFlag);
        writer.Key("CustFee");
        writer.Double(local_pRspRepeal.CustFee);
        writer.Key("BrokerFee");
        writer.Double(local_pRspRepeal.BrokerFee);
        writer.Key("Message");
        writer.String(g2u(local_pRspRepeal.Message).c_str());
        writer.Key("Digest");
        writer.String(g2u(local_pRspRepeal.Digest).c_str());
        writer.Key("BankAccType");
        writer.Int(local_pRspRepeal.BankAccType);
        writer.Key("DeviceID");
        writer.String(g2u(local_pRspRepeal.DeviceID).c_str());
        writer.Key("BankSecuAccType");
        writer.Int(local_pRspRepeal.BankSecuAccType);
        writer.Key("BrokerIDByBank");
        writer.String(g2u(local_pRspRepeal.BrokerIDByBank).c_str());
        writer.Key("BankSecuAcc");
        writer.String(g2u(local_pRspRepeal.BankSecuAcc).c_str());
        writer.Key("BankPwdFlag");
        writer.Int(local_pRspRepeal.BankPwdFlag);
        writer.Key("SecuPwdFlag");
        writer.Int(local_pRspRepeal.SecuPwdFlag);
        writer.Key("OperNo");
        writer.String(g2u(local_pRspRepeal.OperNo).c_str());
        writer.Key("RequestID");
        writer.Int(local_pRspRepeal.RequestID);
        writer.Key("TID");
        writer.Int(local_pRspRepeal.TID);
        writer.Key("TransferStatus");
        writer.Int(local_pRspRepeal.TransferStatus);
        writer.Key("ErrorID");
        writer.Int(local_pRspRepeal.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspRepeal.ErrorMsg).c_str());
        writer.Key("LongCustomerName");
        writer.String(g2u(local_pRspRepeal.LongCustomerName).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspFromBankToFutureByFuture(CThostFtdcReqTransferField * pReqTransfer, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspFromBankToFutureByFuture");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcReqTransferField local_pReqTransfer = { 0 };
        if(pReqTransfer)
        {
            memcpy(&local_pReqTransfer, pReqTransfer, sizeof(CThostFtdcReqTransferField));
        }
        writer.Key("pReqTransfer");
        writer.StartObject();
        writer.Key("TradeCode");
        writer.String(g2u(local_pReqTransfer.TradeCode).c_str());
        writer.Key("BankID");
        writer.String(g2u(local_pReqTransfer.BankID).c_str());
        writer.Key("BankBranchID");
        writer.String(g2u(local_pReqTransfer.BankBranchID).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pReqTransfer.BrokerID).c_str());
        writer.Key("BrokerBranchID");
        writer.String(g2u(local_pReqTransfer.BrokerBranchID).c_str());
        writer.Key("TradeDate");
        writer.String(g2u(local_pReqTransfer.TradeDate).c_str());
        writer.Key("TradeTime");
        writer.String(g2u(local_pReqTransfer.TradeTime).c_str());
        writer.Key("BankSerial");
        writer.String(g2u(local_pReqTransfer.BankSerial).c_str());
        writer.Key("TradingDay");
        writer.String(g2u(local_pReqTransfer.TradingDay).c_str());
        writer.Key("PlateSerial");
        writer.Int(local_pReqTransfer.PlateSerial);
        writer.Key("LastFragment");
        writer.Int(local_pReqTransfer.LastFragment);
        writer.Key("SessionID");
        writer.Int(local_pReqTransfer.SessionID);
        writer.Key("CustomerName");
        writer.String(g2u(local_pReqTransfer.CustomerName).c_str());
        writer.Key("IdCardType");
        writer.Int(local_pReqTransfer.IdCardType);
        writer.Key("IdentifiedCardNo");
        writer.String(g2u(local_pReqTransfer.IdentifiedCardNo).c_str());
        writer.Key("CustType");
        writer.Int(local_pReqTransfer.CustType);
        writer.Key("BankAccount");
        writer.String(g2u(local_pReqTransfer.BankAccount).c_str());
        writer.Key("BankPassWord");
        writer.String(g2u(local_pReqTransfer.BankPassWord).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pReqTransfer.AccountID).c_str());
        writer.Key("Password");
        writer.String(g2u(local_pReqTransfer.Password).c_str());
        writer.Key("InstallID");
        writer.Int(local_pReqTransfer.InstallID);
        writer.Key("FutureSerial");
        writer.Int(local_pReqTransfer.FutureSerial);
        writer.Key("UserID");
        writer.String(g2u(local_pReqTransfer.UserID).c_str());
        writer.Key("VerifyCertNoFlag");
        writer.Int(local_pReqTransfer.VerifyCertNoFlag);
        writer.Key("CurrencyID");
        writer.String(g2u(local_pReqTransfer.CurrencyID).c_str());
        writer.Key("TradeAmount");
        writer.Double(local_pReqTransfer.TradeAmount);
        writer.Key("FutureFetchAmount");
        writer.Double(local_pReqTransfer.FutureFetchAmount);
        writer.Key("FeePayFlag");
        writer.Int(local_pReqTransfer.FeePayFlag);
        writer.Key("CustFee");
        writer.Double(local_pReqTransfer.CustFee);
        writer.Key("BrokerFee");
        writer.Double(local_pReqTransfer.BrokerFee);
        writer.Key("Message");
        writer.String(g2u(local_pReqTransfer.Message).c_str());
        writer.Key("Digest");
        writer.String(g2u(local_pReqTransfer.Digest).c_str());
        writer.Key("BankAccType");
        writer.Int(local_pReqTransfer.BankAccType);
        writer.Key("DeviceID");
        writer.String(g2u(local_pReqTransfer.DeviceID).c_str());
        writer.Key("BankSecuAccType");
        writer.Int(local_pReqTransfer.BankSecuAccType);
        writer.Key("BrokerIDByBank");
        writer.String(g2u(local_pReqTransfer.BrokerIDByBank).c_str());
        writer.Key("BankSecuAcc");
        writer.String(g2u(local_pReqTransfer.BankSecuAcc).c_str());
        writer.Key("BankPwdFlag");
        writer.Int(local_pReqTransfer.BankPwdFlag);
        writer.Key("SecuPwdFlag");
        writer.Int(local_pReqTransfer.SecuPwdFlag);
        writer.Key("OperNo");
        writer.String(g2u(local_pReqTransfer.OperNo).c_str());
        writer.Key("RequestID");
        writer.Int(local_pReqTransfer.RequestID);
        writer.Key("TID");
        writer.Int(local_pReqTransfer.TID);
        writer.Key("TransferStatus");
        writer.Int(local_pReqTransfer.TransferStatus);
        writer.Key("LongCustomerName");
        writer.String(g2u(local_pReqTransfer.LongCustomerName).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspFromFutureToBankByFuture(CThostFtdcReqTransferField * pReqTransfer, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspFromFutureToBankByFuture");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcReqTransferField local_pReqTransfer = { 0 };
        if(pReqTransfer)
        {
            memcpy(&local_pReqTransfer, pReqTransfer, sizeof(CThostFtdcReqTransferField));
        }
        writer.Key("pReqTransfer");
        writer.StartObject();
        writer.Key("TradeCode");
        writer.String(g2u(local_pReqTransfer.TradeCode).c_str());
        writer.Key("BankID");
        writer.String(g2u(local_pReqTransfer.BankID).c_str());
        writer.Key("BankBranchID");
        writer.String(g2u(local_pReqTransfer.BankBranchID).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pReqTransfer.BrokerID).c_str());
        writer.Key("BrokerBranchID");
        writer.String(g2u(local_pReqTransfer.BrokerBranchID).c_str());
        writer.Key("TradeDate");
        writer.String(g2u(local_pReqTransfer.TradeDate).c_str());
        writer.Key("TradeTime");
        writer.String(g2u(local_pReqTransfer.TradeTime).c_str());
        writer.Key("BankSerial");
        writer.String(g2u(local_pReqTransfer.BankSerial).c_str());
        writer.Key("TradingDay");
        writer.String(g2u(local_pReqTransfer.TradingDay).c_str());
        writer.Key("PlateSerial");
        writer.Int(local_pReqTransfer.PlateSerial);
        writer.Key("LastFragment");
        writer.Int(local_pReqTransfer.LastFragment);
        writer.Key("SessionID");
        writer.Int(local_pReqTransfer.SessionID);
        writer.Key("CustomerName");
        writer.String(g2u(local_pReqTransfer.CustomerName).c_str());
        writer.Key("IdCardType");
        writer.Int(local_pReqTransfer.IdCardType);
        writer.Key("IdentifiedCardNo");
        writer.String(g2u(local_pReqTransfer.IdentifiedCardNo).c_str());
        writer.Key("CustType");
        writer.Int(local_pReqTransfer.CustType);
        writer.Key("BankAccount");
        writer.String(g2u(local_pReqTransfer.BankAccount).c_str());
        writer.Key("BankPassWord");
        writer.String(g2u(local_pReqTransfer.BankPassWord).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pReqTransfer.AccountID).c_str());
        writer.Key("Password");
        writer.String(g2u(local_pReqTransfer.Password).c_str());
        writer.Key("InstallID");
        writer.Int(local_pReqTransfer.InstallID);
        writer.Key("FutureSerial");
        writer.Int(local_pReqTransfer.FutureSerial);
        writer.Key("UserID");
        writer.String(g2u(local_pReqTransfer.UserID).c_str());
        writer.Key("VerifyCertNoFlag");
        writer.Int(local_pReqTransfer.VerifyCertNoFlag);
        writer.Key("CurrencyID");
        writer.String(g2u(local_pReqTransfer.CurrencyID).c_str());
        writer.Key("TradeAmount");
        writer.Double(local_pReqTransfer.TradeAmount);
        writer.Key("FutureFetchAmount");
        writer.Double(local_pReqTransfer.FutureFetchAmount);
        writer.Key("FeePayFlag");
        writer.Int(local_pReqTransfer.FeePayFlag);
        writer.Key("CustFee");
        writer.Double(local_pReqTransfer.CustFee);
        writer.Key("BrokerFee");
        writer.Double(local_pReqTransfer.BrokerFee);
        writer.Key("Message");
        writer.String(g2u(local_pReqTransfer.Message).c_str());
        writer.Key("Digest");
        writer.String(g2u(local_pReqTransfer.Digest).c_str());
        writer.Key("BankAccType");
        writer.Int(local_pReqTransfer.BankAccType);
        writer.Key("DeviceID");
        writer.String(g2u(local_pReqTransfer.DeviceID).c_str());
        writer.Key("BankSecuAccType");
        writer.Int(local_pReqTransfer.BankSecuAccType);
        writer.Key("BrokerIDByBank");
        writer.String(g2u(local_pReqTransfer.BrokerIDByBank).c_str());
        writer.Key("BankSecuAcc");
        writer.String(g2u(local_pReqTransfer.BankSecuAcc).c_str());
        writer.Key("BankPwdFlag");
        writer.Int(local_pReqTransfer.BankPwdFlag);
        writer.Key("SecuPwdFlag");
        writer.Int(local_pReqTransfer.SecuPwdFlag);
        writer.Key("OperNo");
        writer.String(g2u(local_pReqTransfer.OperNo).c_str());
        writer.Key("RequestID");
        writer.Int(local_pReqTransfer.RequestID);
        writer.Key("TID");
        writer.Int(local_pReqTransfer.TID);
        writer.Key("TransferStatus");
        writer.Int(local_pReqTransfer.TransferStatus);
        writer.Key("LongCustomerName");
        writer.String(g2u(local_pReqTransfer.LongCustomerName).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQueryBankAccountMoneyByFuture(CThostFtdcReqQueryAccountField * pReqQueryAccount, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQueryBankAccountMoneyByFuture");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcReqQueryAccountField local_pReqQueryAccount = { 0 };
        if(pReqQueryAccount)
        {
            memcpy(&local_pReqQueryAccount, pReqQueryAccount, sizeof(CThostFtdcReqQueryAccountField));
        }
        writer.Key("pReqQueryAccount");
        writer.StartObject();
        writer.Key("TradeCode");
        writer.String(g2u(local_pReqQueryAccount.TradeCode).c_str());
        writer.Key("BankID");
        writer.String(g2u(local_pReqQueryAccount.BankID).c_str());
        writer.Key("BankBranchID");
        writer.String(g2u(local_pReqQueryAccount.BankBranchID).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pReqQueryAccount.BrokerID).c_str());
        writer.Key("BrokerBranchID");
        writer.String(g2u(local_pReqQueryAccount.BrokerBranchID).c_str());
        writer.Key("TradeDate");
        writer.String(g2u(local_pReqQueryAccount.TradeDate).c_str());
        writer.Key("TradeTime");
        writer.String(g2u(local_pReqQueryAccount.TradeTime).c_str());
        writer.Key("BankSerial");
        writer.String(g2u(local_pReqQueryAccount.BankSerial).c_str());
        writer.Key("TradingDay");
        writer.String(g2u(local_pReqQueryAccount.TradingDay).c_str());
        writer.Key("PlateSerial");
        writer.Int(local_pReqQueryAccount.PlateSerial);
        writer.Key("LastFragment");
        writer.Int(local_pReqQueryAccount.LastFragment);
        writer.Key("SessionID");
        writer.Int(local_pReqQueryAccount.SessionID);
        writer.Key("CustomerName");
        writer.String(g2u(local_pReqQueryAccount.CustomerName).c_str());
        writer.Key("IdCardType");
        writer.Int(local_pReqQueryAccount.IdCardType);
        writer.Key("IdentifiedCardNo");
        writer.String(g2u(local_pReqQueryAccount.IdentifiedCardNo).c_str());
        writer.Key("CustType");
        writer.Int(local_pReqQueryAccount.CustType);
        writer.Key("BankAccount");
        writer.String(g2u(local_pReqQueryAccount.BankAccount).c_str());
        writer.Key("BankPassWord");
        writer.String(g2u(local_pReqQueryAccount.BankPassWord).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pReqQueryAccount.AccountID).c_str());
        writer.Key("Password");
        writer.String(g2u(local_pReqQueryAccount.Password).c_str());
        writer.Key("FutureSerial");
        writer.Int(local_pReqQueryAccount.FutureSerial);
        writer.Key("InstallID");
        writer.Int(local_pReqQueryAccount.InstallID);
        writer.Key("UserID");
        writer.String(g2u(local_pReqQueryAccount.UserID).c_str());
        writer.Key("VerifyCertNoFlag");
        writer.Int(local_pReqQueryAccount.VerifyCertNoFlag);
        writer.Key("CurrencyID");
        writer.String(g2u(local_pReqQueryAccount.CurrencyID).c_str());
        writer.Key("Digest");
        writer.String(g2u(local_pReqQueryAccount.Digest).c_str());
        writer.Key("BankAccType");
        writer.Int(local_pReqQueryAccount.BankAccType);
        writer.Key("DeviceID");
        writer.String(g2u(local_pReqQueryAccount.DeviceID).c_str());
        writer.Key("BankSecuAccType");
        writer.Int(local_pReqQueryAccount.BankSecuAccType);
        writer.Key("BrokerIDByBank");
        writer.String(g2u(local_pReqQueryAccount.BrokerIDByBank).c_str());
        writer.Key("BankSecuAcc");
        writer.String(g2u(local_pReqQueryAccount.BankSecuAcc).c_str());
        writer.Key("BankPwdFlag");
        writer.Int(local_pReqQueryAccount.BankPwdFlag);
        writer.Key("SecuPwdFlag");
        writer.Int(local_pReqQueryAccount.SecuPwdFlag);
        writer.Key("OperNo");
        writer.String(g2u(local_pReqQueryAccount.OperNo).c_str());
        writer.Key("RequestID");
        writer.Int(local_pReqQueryAccount.RequestID);
        writer.Key("TID");
        writer.Int(local_pReqQueryAccount.TID);
        writer.Key("LongCustomerName");
        writer.String(g2u(local_pReqQueryAccount.LongCustomerName).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRtnOpenAccountByBank(CThostFtdcOpenAccountField * pOpenAccount)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRtnOpenAccountByBank");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcOpenAccountField local_pOpenAccount = { 0 };
        if(pOpenAccount)
        {
            memcpy(&local_pOpenAccount, pOpenAccount, sizeof(CThostFtdcOpenAccountField));
        }
        writer.Key("pOpenAccount");
        writer.StartObject();
        writer.Key("TradeCode");
        writer.String(g2u(local_pOpenAccount.TradeCode).c_str());
        writer.Key("BankID");
        writer.String(g2u(local_pOpenAccount.BankID).c_str());
        writer.Key("BankBranchID");
        writer.String(g2u(local_pOpenAccount.BankBranchID).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pOpenAccount.BrokerID).c_str());
        writer.Key("BrokerBranchID");
        writer.String(g2u(local_pOpenAccount.BrokerBranchID).c_str());
        writer.Key("TradeDate");
        writer.String(g2u(local_pOpenAccount.TradeDate).c_str());
        writer.Key("TradeTime");
        writer.String(g2u(local_pOpenAccount.TradeTime).c_str());
        writer.Key("BankSerial");
        writer.String(g2u(local_pOpenAccount.BankSerial).c_str());
        writer.Key("TradingDay");
        writer.String(g2u(local_pOpenAccount.TradingDay).c_str());
        writer.Key("PlateSerial");
        writer.Int(local_pOpenAccount.PlateSerial);
        writer.Key("LastFragment");
        writer.Int(local_pOpenAccount.LastFragment);
        writer.Key("SessionID");
        writer.Int(local_pOpenAccount.SessionID);
        writer.Key("CustomerName");
        writer.String(g2u(local_pOpenAccount.CustomerName).c_str());
        writer.Key("IdCardType");
        writer.Int(local_pOpenAccount.IdCardType);
        writer.Key("IdentifiedCardNo");
        writer.String(g2u(local_pOpenAccount.IdentifiedCardNo).c_str());
        writer.Key("Gender");
        writer.Int(local_pOpenAccount.Gender);
        writer.Key("CountryCode");
        writer.String(g2u(local_pOpenAccount.CountryCode).c_str());
        writer.Key("CustType");
        writer.Int(local_pOpenAccount.CustType);
        writer.Key("Address");
        writer.String(g2u(local_pOpenAccount.Address).c_str());
        writer.Key("ZipCode");
        writer.String(g2u(local_pOpenAccount.ZipCode).c_str());
        writer.Key("Telephone");
        writer.String(g2u(local_pOpenAccount.Telephone).c_str());
        writer.Key("MobilePhone");
        writer.String(g2u(local_pOpenAccount.MobilePhone).c_str());
        writer.Key("Fax");
        writer.String(g2u(local_pOpenAccount.Fax).c_str());
        writer.Key("EMail");
        writer.String(g2u(local_pOpenAccount.EMail).c_str());
        writer.Key("MoneyAccountStatus");
        writer.Int(local_pOpenAccount.MoneyAccountStatus);
        writer.Key("BankAccount");
        writer.String(g2u(local_pOpenAccount.BankAccount).c_str());
        writer.Key("BankPassWord");
        writer.String(g2u(local_pOpenAccount.BankPassWord).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pOpenAccount.AccountID).c_str());
        writer.Key("Password");
        writer.String(g2u(local_pOpenAccount.Password).c_str());
        writer.Key("InstallID");
        writer.Int(local_pOpenAccount.InstallID);
        writer.Key("VerifyCertNoFlag");
        writer.Int(local_pOpenAccount.VerifyCertNoFlag);
        writer.Key("CurrencyID");
        writer.String(g2u(local_pOpenAccount.CurrencyID).c_str());
        writer.Key("CashExchangeCode");
        writer.Int(local_pOpenAccount.CashExchangeCode);
        writer.Key("Digest");
        writer.String(g2u(local_pOpenAccount.Digest).c_str());
        writer.Key("BankAccType");
        writer.Int(local_pOpenAccount.BankAccType);
        writer.Key("DeviceID");
        writer.String(g2u(local_pOpenAccount.DeviceID).c_str());
        writer.Key("BankSecuAccType");
        writer.Int(local_pOpenAccount.BankSecuAccType);
        writer.Key("BrokerIDByBank");
        writer.String(g2u(local_pOpenAccount.BrokerIDByBank).c_str());
        writer.Key("BankSecuAcc");
        writer.String(g2u(local_pOpenAccount.BankSecuAcc).c_str());
        writer.Key("BankPwdFlag");
        writer.Int(local_pOpenAccount.BankPwdFlag);
        writer.Key("SecuPwdFlag");
        writer.Int(local_pOpenAccount.SecuPwdFlag);
        writer.Key("OperNo");
        writer.String(g2u(local_pOpenAccount.OperNo).c_str());
        writer.Key("TID");
        writer.Int(local_pOpenAccount.TID);
        writer.Key("UserID");
        writer.String(g2u(local_pOpenAccount.UserID).c_str());
        writer.Key("ErrorID");
        writer.Int(local_pOpenAccount.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pOpenAccount.ErrorMsg).c_str());
        writer.Key("LongCustomerName");
        writer.String(g2u(local_pOpenAccount.LongCustomerName).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRtnCancelAccountByBank(CThostFtdcCancelAccountField * pCancelAccount)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRtnCancelAccountByBank");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcCancelAccountField local_pCancelAccount = { 0 };
        if(pCancelAccount)
        {
            memcpy(&local_pCancelAccount, pCancelAccount, sizeof(CThostFtdcCancelAccountField));
        }
        writer.Key("pCancelAccount");
        writer.StartObject();
        writer.Key("TradeCode");
        writer.String(g2u(local_pCancelAccount.TradeCode).c_str());
        writer.Key("BankID");
        writer.String(g2u(local_pCancelAccount.BankID).c_str());
        writer.Key("BankBranchID");
        writer.String(g2u(local_pCancelAccount.BankBranchID).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pCancelAccount.BrokerID).c_str());
        writer.Key("BrokerBranchID");
        writer.String(g2u(local_pCancelAccount.BrokerBranchID).c_str());
        writer.Key("TradeDate");
        writer.String(g2u(local_pCancelAccount.TradeDate).c_str());
        writer.Key("TradeTime");
        writer.String(g2u(local_pCancelAccount.TradeTime).c_str());
        writer.Key("BankSerial");
        writer.String(g2u(local_pCancelAccount.BankSerial).c_str());
        writer.Key("TradingDay");
        writer.String(g2u(local_pCancelAccount.TradingDay).c_str());
        writer.Key("PlateSerial");
        writer.Int(local_pCancelAccount.PlateSerial);
        writer.Key("LastFragment");
        writer.Int(local_pCancelAccount.LastFragment);
        writer.Key("SessionID");
        writer.Int(local_pCancelAccount.SessionID);
        writer.Key("CustomerName");
        writer.String(g2u(local_pCancelAccount.CustomerName).c_str());
        writer.Key("IdCardType");
        writer.Int(local_pCancelAccount.IdCardType);
        writer.Key("IdentifiedCardNo");
        writer.String(g2u(local_pCancelAccount.IdentifiedCardNo).c_str());
        writer.Key("Gender");
        writer.Int(local_pCancelAccount.Gender);
        writer.Key("CountryCode");
        writer.String(g2u(local_pCancelAccount.CountryCode).c_str());
        writer.Key("CustType");
        writer.Int(local_pCancelAccount.CustType);
        writer.Key("Address");
        writer.String(g2u(local_pCancelAccount.Address).c_str());
        writer.Key("ZipCode");
        writer.String(g2u(local_pCancelAccount.ZipCode).c_str());
        writer.Key("Telephone");
        writer.String(g2u(local_pCancelAccount.Telephone).c_str());
        writer.Key("MobilePhone");
        writer.String(g2u(local_pCancelAccount.MobilePhone).c_str());
        writer.Key("Fax");
        writer.String(g2u(local_pCancelAccount.Fax).c_str());
        writer.Key("EMail");
        writer.String(g2u(local_pCancelAccount.EMail).c_str());
        writer.Key("MoneyAccountStatus");
        writer.Int(local_pCancelAccount.MoneyAccountStatus);
        writer.Key("BankAccount");
        writer.String(g2u(local_pCancelAccount.BankAccount).c_str());
        writer.Key("BankPassWord");
        writer.String(g2u(local_pCancelAccount.BankPassWord).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pCancelAccount.AccountID).c_str());
        writer.Key("Password");
        writer.String(g2u(local_pCancelAccount.Password).c_str());
        writer.Key("InstallID");
        writer.Int(local_pCancelAccount.InstallID);
        writer.Key("VerifyCertNoFlag");
        writer.Int(local_pCancelAccount.VerifyCertNoFlag);
        writer.Key("CurrencyID");
        writer.String(g2u(local_pCancelAccount.CurrencyID).c_str());
        writer.Key("CashExchangeCode");
        writer.Int(local_pCancelAccount.CashExchangeCode);
        writer.Key("Digest");
        writer.String(g2u(local_pCancelAccount.Digest).c_str());
        writer.Key("BankAccType");
        writer.Int(local_pCancelAccount.BankAccType);
        writer.Key("DeviceID");
        writer.String(g2u(local_pCancelAccount.DeviceID).c_str());
        writer.Key("BankSecuAccType");
        writer.Int(local_pCancelAccount.BankSecuAccType);
        writer.Key("BrokerIDByBank");
        writer.String(g2u(local_pCancelAccount.BrokerIDByBank).c_str());
        writer.Key("BankSecuAcc");
        writer.String(g2u(local_pCancelAccount.BankSecuAcc).c_str());
        writer.Key("BankPwdFlag");
        writer.Int(local_pCancelAccount.BankPwdFlag);
        writer.Key("SecuPwdFlag");
        writer.Int(local_pCancelAccount.SecuPwdFlag);
        writer.Key("OperNo");
        writer.String(g2u(local_pCancelAccount.OperNo).c_str());
        writer.Key("TID");
        writer.Int(local_pCancelAccount.TID);
        writer.Key("UserID");
        writer.String(g2u(local_pCancelAccount.UserID).c_str());
        writer.Key("ErrorID");
        writer.Int(local_pCancelAccount.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pCancelAccount.ErrorMsg).c_str());
        writer.Key("LongCustomerName");
        writer.String(g2u(local_pCancelAccount.LongCustomerName).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRtnChangeAccountByBank(CThostFtdcChangeAccountField * pChangeAccount)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRtnChangeAccountByBank");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcChangeAccountField local_pChangeAccount = { 0 };
        if(pChangeAccount)
        {
            memcpy(&local_pChangeAccount, pChangeAccount, sizeof(CThostFtdcChangeAccountField));
        }
        writer.Key("pChangeAccount");
        writer.StartObject();
        writer.Key("TradeCode");
        writer.String(g2u(local_pChangeAccount.TradeCode).c_str());
        writer.Key("BankID");
        writer.String(g2u(local_pChangeAccount.BankID).c_str());
        writer.Key("BankBranchID");
        writer.String(g2u(local_pChangeAccount.BankBranchID).c_str());
        writer.Key("BrokerID");
        writer.String(g2u(local_pChangeAccount.BrokerID).c_str());
        writer.Key("BrokerBranchID");
        writer.String(g2u(local_pChangeAccount.BrokerBranchID).c_str());
        writer.Key("TradeDate");
        writer.String(g2u(local_pChangeAccount.TradeDate).c_str());
        writer.Key("TradeTime");
        writer.String(g2u(local_pChangeAccount.TradeTime).c_str());
        writer.Key("BankSerial");
        writer.String(g2u(local_pChangeAccount.BankSerial).c_str());
        writer.Key("TradingDay");
        writer.String(g2u(local_pChangeAccount.TradingDay).c_str());
        writer.Key("PlateSerial");
        writer.Int(local_pChangeAccount.PlateSerial);
        writer.Key("LastFragment");
        writer.Int(local_pChangeAccount.LastFragment);
        writer.Key("SessionID");
        writer.Int(local_pChangeAccount.SessionID);
        writer.Key("CustomerName");
        writer.String(g2u(local_pChangeAccount.CustomerName).c_str());
        writer.Key("IdCardType");
        writer.Int(local_pChangeAccount.IdCardType);
        writer.Key("IdentifiedCardNo");
        writer.String(g2u(local_pChangeAccount.IdentifiedCardNo).c_str());
        writer.Key("Gender");
        writer.Int(local_pChangeAccount.Gender);
        writer.Key("CountryCode");
        writer.String(g2u(local_pChangeAccount.CountryCode).c_str());
        writer.Key("CustType");
        writer.Int(local_pChangeAccount.CustType);
        writer.Key("Address");
        writer.String(g2u(local_pChangeAccount.Address).c_str());
        writer.Key("ZipCode");
        writer.String(g2u(local_pChangeAccount.ZipCode).c_str());
        writer.Key("Telephone");
        writer.String(g2u(local_pChangeAccount.Telephone).c_str());
        writer.Key("MobilePhone");
        writer.String(g2u(local_pChangeAccount.MobilePhone).c_str());
        writer.Key("Fax");
        writer.String(g2u(local_pChangeAccount.Fax).c_str());
        writer.Key("EMail");
        writer.String(g2u(local_pChangeAccount.EMail).c_str());
        writer.Key("MoneyAccountStatus");
        writer.Int(local_pChangeAccount.MoneyAccountStatus);
        writer.Key("BankAccount");
        writer.String(g2u(local_pChangeAccount.BankAccount).c_str());
        writer.Key("BankPassWord");
        writer.String(g2u(local_pChangeAccount.BankPassWord).c_str());
        writer.Key("NewBankAccount");
        writer.String(g2u(local_pChangeAccount.NewBankAccount).c_str());
        writer.Key("NewBankPassWord");
        writer.String(g2u(local_pChangeAccount.NewBankPassWord).c_str());
        writer.Key("AccountID");
        writer.String(g2u(local_pChangeAccount.AccountID).c_str());
        writer.Key("Password");
        writer.String(g2u(local_pChangeAccount.Password).c_str());
        writer.Key("BankAccType");
        writer.Int(local_pChangeAccount.BankAccType);
        writer.Key("InstallID");
        writer.Int(local_pChangeAccount.InstallID);
        writer.Key("VerifyCertNoFlag");
        writer.Int(local_pChangeAccount.VerifyCertNoFlag);
        writer.Key("CurrencyID");
        writer.String(g2u(local_pChangeAccount.CurrencyID).c_str());
        writer.Key("BrokerIDByBank");
        writer.String(g2u(local_pChangeAccount.BrokerIDByBank).c_str());
        writer.Key("BankPwdFlag");
        writer.Int(local_pChangeAccount.BankPwdFlag);
        writer.Key("SecuPwdFlag");
        writer.Int(local_pChangeAccount.SecuPwdFlag);
        writer.Key("TID");
        writer.Int(local_pChangeAccount.TID);
        writer.Key("Digest");
        writer.String(g2u(local_pChangeAccount.Digest).c_str());
        writer.Key("ErrorID");
        writer.Int(local_pChangeAccount.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pChangeAccount.ErrorMsg).c_str());
        writer.Key("LongCustomerName");
        writer.String(g2u(local_pChangeAccount.LongCustomerName).c_str());
        writer.EndObject();
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryClassifiedInstrument(CThostFtdcInstrumentField * pInstrument, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryClassifiedInstrument");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcInstrumentField local_pInstrument = { 0 };
        if(pInstrument)
        {
            memcpy(&local_pInstrument, pInstrument, sizeof(CThostFtdcInstrumentField));
        }
        writer.Key("pInstrument");
        writer.StartObject();
        writer.Key("reserve1");
        writer.String(g2u(local_pInstrument.reserve1).c_str());
        writer.Key("ExchangeID");
        writer.String(g2u(local_pInstrument.ExchangeID).c_str());
        writer.Key("InstrumentName");
        writer.String(g2u(local_pInstrument.InstrumentName).c_str());
        writer.Key("reserve2");
        writer.String(g2u(local_pInstrument.reserve2).c_str());
        writer.Key("reserve3");
        writer.String(g2u(local_pInstrument.reserve3).c_str());
        writer.Key("ProductClass");
        writer.Int(local_pInstrument.ProductClass);
        writer.Key("DeliveryYear");
        writer.Int(local_pInstrument.DeliveryYear);
        writer.Key("DeliveryMonth");
        writer.Int(local_pInstrument.DeliveryMonth);
        writer.Key("MaxMarketOrderVolume");
        writer.Int(local_pInstrument.MaxMarketOrderVolume);
        writer.Key("MinMarketOrderVolume");
        writer.Int(local_pInstrument.MinMarketOrderVolume);
        writer.Key("MaxLimitOrderVolume");
        writer.Int(local_pInstrument.MaxLimitOrderVolume);
        writer.Key("MinLimitOrderVolume");
        writer.Int(local_pInstrument.MinLimitOrderVolume);
        writer.Key("VolumeMultiple");
        writer.Int(local_pInstrument.VolumeMultiple);
        writer.Key("PriceTick");
        writer.Double(local_pInstrument.PriceTick);
        writer.Key("CreateDate");
        writer.String(g2u(local_pInstrument.CreateDate).c_str());
        writer.Key("OpenDate");
        writer.String(g2u(local_pInstrument.OpenDate).c_str());
        writer.Key("ExpireDate");
        writer.String(g2u(local_pInstrument.ExpireDate).c_str());
        writer.Key("StartDelivDate");
        writer.String(g2u(local_pInstrument.StartDelivDate).c_str());
        writer.Key("EndDelivDate");
        writer.String(g2u(local_pInstrument.EndDelivDate).c_str());
        writer.Key("InstLifePhase");
        writer.Int(local_pInstrument.InstLifePhase);
        writer.Key("IsTrading");
        writer.Int(local_pInstrument.IsTrading);
        writer.Key("PositionType");
        writer.Int(local_pInstrument.PositionType);
        writer.Key("PositionDateType");
        writer.Int(local_pInstrument.PositionDateType);
        writer.Key("LongMarginRatio");
        writer.Double(local_pInstrument.LongMarginRatio);
        writer.Key("ShortMarginRatio");
        writer.Double(local_pInstrument.ShortMarginRatio);
        writer.Key("MaxMarginSideAlgorithm");
        writer.Int(local_pInstrument.MaxMarginSideAlgorithm);
        writer.Key("reserve4");
        writer.String(g2u(local_pInstrument.reserve4).c_str());
        writer.Key("StrikePrice");
        writer.Double(local_pInstrument.StrikePrice);
        writer.Key("OptionsType");
        writer.Int(local_pInstrument.OptionsType);
        writer.Key("UnderlyingMultiple");
        writer.Double(local_pInstrument.UnderlyingMultiple);
        writer.Key("CombinationType");
        writer.Int(local_pInstrument.CombinationType);
        writer.Key("InstrumentID");
        writer.String(g2u(local_pInstrument.InstrumentID).c_str());
        writer.Key("ExchangeInstID");
        writer.String(g2u(local_pInstrument.ExchangeInstID).c_str());
        writer.Key("ProductID");
        writer.String(g2u(local_pInstrument.ProductID).c_str());
        writer.Key("UnderlyingInstrID");
        writer.String(g2u(local_pInstrument.UnderlyingInstrID).c_str());
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

    void OnRspQryCombPromotionParam(CThostFtdcCombPromotionParamField * pCombPromotionParam, CThostFtdcRspInfoField * pRspInfo, int nRequestID, bool bIsLast)
    {
        StringBuffer s;
        Writer<StringBuffer> writer(s);
        writer.StartObject();
        writer.Key("cmd");
        writer.String("OnRspQryCombPromotionParam");
        writer.Key("cmd_type");
        writer.String("td");
        writer.Key("ptr");
        writer.Uint64((uint64_t)this);
        CThostFtdcCombPromotionParamField local_pCombPromotionParam = { 0 };
        if(pCombPromotionParam)
        {
            memcpy(&local_pCombPromotionParam, pCombPromotionParam, sizeof(CThostFtdcCombPromotionParamField));
        }
        writer.Key("pCombPromotionParam");
        writer.StartObject();
        writer.Key("ExchangeID");
        writer.String(g2u(local_pCombPromotionParam.ExchangeID).c_str());
        writer.Key("InstrumentID");
        writer.String(g2u(local_pCombPromotionParam.InstrumentID).c_str());
        writer.Key("CombHedgeFlag");
        writer.String(g2u(local_pCombPromotionParam.CombHedgeFlag).c_str());
        writer.Key("Xparameter");
        writer.Double(local_pCombPromotionParam.Xparameter);
        writer.EndObject();
        CThostFtdcRspInfoField local_pRspInfo = { 0 };
        if(pRspInfo)
        {
            memcpy(&local_pRspInfo, pRspInfo, sizeof(CThostFtdcRspInfoField));
        }
        writer.Key("pRspInfo");
        writer.StartObject();
        writer.Key("ErrorID");
        writer.Int(local_pRspInfo.ErrorID);
        writer.Key("ErrorMsg");
        writer.String(g2u(local_pRspInfo.ErrorMsg).c_str());
        writer.EndObject();
        writer.Key("nRequestID");
        writer.Int(nRequestID);
        writer.Key("bIsLast");
        writer.Bool(bIsLast);
        writer.EndObject();
        this->socks->send_rsp(s.GetString());
    }

};
#endif
